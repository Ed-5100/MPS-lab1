
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029d8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08002bd8  08002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e58  08002e58  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002e58  08002e58  00012e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e60  08002e60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e60  08002e60  00012e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e64  08002e64  00012e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08002ed8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000120  08002ed8  00020120  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2b8  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016bb  00000000  00000000  0002a356  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002fbd  00000000  00000000  0002ba11  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000648  00000000  00000000  0002e9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000600  00000000  00000000  0002f018  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002bf98  00000000  00000000  0002f618  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000067dc  00000000  00000000  0005b5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0010a880  00000000  00000000  00061d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0016c60c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000177c  00000000  00000000  0016c688  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stab         0000006c  00000000  00000000  0016de04  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000000e3  00000000  00000000  0016de70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08002bc0 	.word	0x08002bc0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08002bc0 	.word	0x08002bc0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 80005e0:	b500      	push	{lr}
 80005e2:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ec:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005f6:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005f8:	2219      	movs	r2, #25
 80005fa:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 80005fc:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000600:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000602:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000604:	2309      	movs	r3, #9
 8000606:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000608:	2307      	movs	r3, #7
 800060a:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800060c:	4668      	mov	r0, sp
 800060e:	f000 fbf9 	bl	8000e04 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8000612:	b100      	cbz	r0, 8000616 <SystemClock_Config+0x36>
 8000614:	e7fe      	b.n	8000614 <SystemClock_Config+0x34>
    while(1) { ; }
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8000616:	f000 fbb7 	bl	8000d88 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800061a:	b100      	cbz	r0, 800061e <SystemClock_Config+0x3e>
 800061c:	e7fe      	b.n	800061c <SystemClock_Config+0x3c>
    while(1) { ; }
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800061e:	230f      	movs	r3, #15
 8000620:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2302      	movs	r3, #2
 8000624:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000636:	2107      	movs	r1, #7
 8000638:	a80d      	add	r0, sp, #52	; 0x34
 800063a:	f000 fe59 	bl	80012f0 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 800063e:	b100      	cbz	r0, 8000642 <SystemClock_Config+0x62>
 8000640:	e7fe      	b.n	8000640 <SystemClock_Config+0x60>
    while(1) { ; }
  }
}
 8000642:	b013      	add	sp, #76	; 0x4c
 8000644:	f85d fb04 	ldr.w	pc, [sp], #4

08000648 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8000648:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800064a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800064e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <CPU_CACHE_Enable+0x7c>)
 8000654:	2100      	movs	r1, #0
 8000656:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800065a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800065e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000662:	695a      	ldr	r2, [r3, #20]
 8000664:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000668:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800066a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800066e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000672:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000676:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800067a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800067e:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8000682:	e00f      	b.n	80006a4 <CPU_CACHE_Enable+0x5c>
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000684:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000686:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800068a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800068e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000692:	490c      	ldr	r1, [pc, #48]	; (80006c4 <CPU_CACHE_Enable+0x7c>)
 8000694:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000698:	1e53      	subs	r3, r2, #1
 800069a:	2a00      	cmp	r2, #0
 800069c:	d1f2      	bne.n	8000684 <CPU_CACHE_Enable+0x3c>
    } while(sets-- != 0U);
 800069e:	1e43      	subs	r3, r0, #1
 80006a0:	b118      	cbz	r0, 80006aa <CPU_CACHE_Enable+0x62>
 80006a2:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006a4:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 80006a8:	e7ed      	b.n	8000686 <CPU_CACHE_Enable+0x3e>
 80006aa:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006ae:	694b      	ldr	r3, [r1, #20]
 80006b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006b4:	614b      	str	r3, [r1, #20]
 80006b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006ba:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80006be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 80006c8:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 80006ca:	f7ff ffbd 	bl	8000648 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 80006ce:	f000 f9dd 	bl	8000a8c <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 80006d2:	f7ff ff85 	bl	80005e0 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 80006d6:	4a03      	ldr	r2, [pc, #12]	; (80006e4 <Sys_Init+0x1c>)
 80006d8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80006dc:	4802      	ldr	r0, [pc, #8]	; (80006e8 <Sys_Init+0x20>)
 80006de:	f000 f94f 	bl	8000980 <initUart>
}
 80006e2:	bd08      	pop	{r3, pc}
 80006e4:	40011000 	.word	0x40011000
 80006e8:	20000098 	.word	0x20000098

080006ec <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 80006ec:	b508      	push	{r3, lr}
  HAL_IncTick();
 80006ee:	f000 f9e3 	bl	8000ab8 <HAL_IncTick>
}
 80006f2:	bd08      	pop	{r3, pc}

080006f4 <gpio_hal_init>:
				int a = uart_getline(&USB_UART, in, size);
				printf("\r\nuart_getline result: %d\r\n", a);*/
	}
}

void gpio_hal_init(){
 80006f4:	b570      	push	{r4, r5, r6, lr}
 80006f6:	b086      	sub	sp, #24
	//led pj13 pj5 pa12 pd4
	__HAL_RCC_GPIOJ_CLK_ENABLE(); 	// Through HAL
 80006f8:	4b30      	ldr	r3, [pc, #192]	; (80007bc <gpio_hal_init+0xc8>)
 80006fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000700:	631a      	str	r2, [r3, #48]	; 0x30
 8000702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000704:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000708:	9201      	str	r2, [sp, #4]
 800070a:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800070c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800070e:	f042 0201 	orr.w	r2, r2, #1
 8000712:	631a      	str	r2, [r3, #48]	; 0x30
 8000714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000716:	f002 0201 	and.w	r2, r2, #1
 800071a:	9202      	str	r2, [sp, #8]
 800071c:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800071e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000720:	f042 0208 	orr.w	r2, r2, #8
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
 8000726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000728:	f002 0208 	and.w	r2, r2, #8
 800072c:	9203      	str	r2, [sp, #12]
 800072e:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000732:	f042 0204 	orr.w	r2, r2, #4
 8000736:	631a      	str	r2, [r3, #48]	; 0x30
 8000738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800073a:	f002 0204 	and.w	r2, r2, #4
 800073e:	9204      	str	r2, [sp, #16]
 8000740:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000744:	f042 0220 	orr.w	r2, r2, #32
 8000748:	631a      	str	r2, [r3, #48]	; 0x30
 800074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074c:	f003 0320 	and.w	r3, r3, #32
 8000750:	9305      	str	r3, [sp, #20]
 8000752:	9b05      	ldr	r3, [sp, #20]
	GPIO_InitTypeDef* config = (GPIO_InitTypeDef*)malloc(sizeof(GPIO_InitTypeDef));
 8000754:	2014      	movs	r0, #20
 8000756:	f001 fc27 	bl	8001fa8 <malloc>
 800075a:	4604      	mov	r4, r0
	config->Mode=GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	6043      	str	r3, [r0, #4]
	config->Pin=GPIO_PIN_13|GPIO_PIN_5;
 8000760:	f242 0220 	movw	r2, #8224	; 0x2020
 8000764:	6002      	str	r2, [r0, #0]
	config->Pull=GPIO_PULLUP ;
 8000766:	6083      	str	r3, [r0, #8]
	config->Speed=GPIO_SPEED_FREQ_HIGH;
 8000768:	2602      	movs	r6, #2
 800076a:	60c6      	str	r6, [r0, #12]
	HAL_GPIO_Init(GPIOJ, config);
 800076c:	4d14      	ldr	r5, [pc, #80]	; (80007c0 <gpio_hal_init+0xcc>)
 800076e:	4601      	mov	r1, r0
 8000770:	4628      	mov	r0, r5
 8000772:	f000 fa0d 	bl	8000b90 <HAL_GPIO_Init>
	config->Pin=GPIO_PIN_12;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	6023      	str	r3, [r4, #0]
	HAL_GPIO_Init(GPIOA, config);
 800077c:	4621      	mov	r1, r4
 800077e:	4811      	ldr	r0, [pc, #68]	; (80007c4 <gpio_hal_init+0xd0>)
 8000780:	f000 fa06 	bl	8000b90 <HAL_GPIO_Init>
	config->Pin=GPIO_PIN_4;
 8000784:	2310      	movs	r3, #16
 8000786:	6023      	str	r3, [r4, #0]
	HAL_GPIO_Init(GPIOD, config);
 8000788:	4621      	mov	r1, r4
 800078a:	480f      	ldr	r0, [pc, #60]	; (80007c8 <gpio_hal_init+0xd4>)
 800078c:	f000 fa00 	bl	8000b90 <HAL_GPIO_Init>

	//input pc7 pc6 pj1 pf6
	config->Mode=GPIO_MODE_INPUT;
 8000790:	2300      	movs	r3, #0
 8000792:	6063      	str	r3, [r4, #4]
	config->Pin=GPIO_PIN_7|GPIO_PIN_6;
 8000794:	23c0      	movs	r3, #192	; 0xc0
 8000796:	6023      	str	r3, [r4, #0]
	HAL_GPIO_Init(GPIOC, config);
 8000798:	4621      	mov	r1, r4
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <gpio_hal_init+0xd8>)
 800079c:	f000 f9f8 	bl	8000b90 <HAL_GPIO_Init>
	config->Pin=GPIO_PIN_1;
 80007a0:	6026      	str	r6, [r4, #0]
	HAL_GPIO_Init(GPIOJ, config);
 80007a2:	4621      	mov	r1, r4
 80007a4:	4628      	mov	r0, r5
 80007a6:	f000 f9f3 	bl	8000b90 <HAL_GPIO_Init>
	config->Pin=GPIO_PIN_6;
 80007aa:	2340      	movs	r3, #64	; 0x40
 80007ac:	6023      	str	r3, [r4, #0]
	HAL_GPIO_Init(GPIOF, config);
 80007ae:	4621      	mov	r1, r4
 80007b0:	4807      	ldr	r0, [pc, #28]	; (80007d0 <gpio_hal_init+0xdc>)
 80007b2:	f000 f9ed 	bl	8000b90 <HAL_GPIO_Init>
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
}
 80007b6:	b006      	add	sp, #24
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40022400 	.word	0x40022400
 80007c4:	40020000 	.word	0x40020000
 80007c8:	40020c00 	.word	0x40020c00
 80007cc:	40020800 	.word	0x40020800
 80007d0:	40021400 	.word	0x40021400

080007d4 <update_led>:

void update_led(){
 80007d4:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13, HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7));
 80007d6:	4d16      	ldr	r5, [pc, #88]	; (8000830 <update_led+0x5c>)
 80007d8:	2180      	movs	r1, #128	; 0x80
 80007da:	4628      	mov	r0, r5
 80007dc:	f000 fac6 	bl	8000d6c <HAL_GPIO_ReadPin>
 80007e0:	4c14      	ldr	r4, [pc, #80]	; (8000834 <update_led+0x60>)
 80007e2:	4602      	mov	r2, r0
 80007e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e8:	4620      	mov	r0, r4
 80007ea:	f000 fac6 	bl	8000d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6));
 80007ee:	2140      	movs	r1, #64	; 0x40
 80007f0:	4628      	mov	r0, r5
 80007f2:	f000 fabb 	bl	8000d6c <HAL_GPIO_ReadPin>
 80007f6:	4602      	mov	r2, r0
 80007f8:	2120      	movs	r1, #32
 80007fa:	4620      	mov	r0, r4
 80007fc:	f000 fabd 	bl	8000d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, HAL_GPIO_ReadPin(GPIOJ, GPIO_PIN_1));
 8000800:	2102      	movs	r1, #2
 8000802:	4620      	mov	r0, r4
 8000804:	f000 fab2 	bl	8000d6c <HAL_GPIO_ReadPin>
 8000808:	4602      	mov	r2, r0
 800080a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800080e:	480a      	ldr	r0, [pc, #40]	; (8000838 <update_led+0x64>)
 8000810:	f000 fab3 	bl	8000d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6)==GPIO_PIN_SET?GPIO_PIN_RESET:GPIO_PIN_SET);
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	4809      	ldr	r0, [pc, #36]	; (800083c <update_led+0x68>)
 8000818:	f000 faa8 	bl	8000d6c <HAL_GPIO_ReadPin>
 800081c:	f110 32ff 	adds.w	r2, r0, #4294967295
 8000820:	bf18      	it	ne
 8000822:	2201      	movne	r2, #1
 8000824:	2110      	movs	r1, #16
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <update_led+0x6c>)
 8000828:	f000 faa7 	bl	8000d7a <HAL_GPIO_WritePin>
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_4);
}
 800082c:	bd38      	pop	{r3, r4, r5, pc}
 800082e:	bf00      	nop
 8000830:	40020800 	.word	0x40020800
 8000834:	40022400 	.word	0x40022400
 8000838:	40020000 	.word	0x40020000
 800083c:	40021400 	.word	0x40021400
 8000840:	40020c00 	.word	0x40020c00

08000844 <main>:
{
 8000844:	b510      	push	{r4, lr}
    Sys_Init(); // This always goes at the top of main (defined in init.c)
 8000846:	f7ff ff3f 	bl	80006c8 <Sys_Init>
    printf("\033[0;33;44m\033[?25l");
 800084a:	4812      	ldr	r0, [pc, #72]	; (8000894 <main+0x50>)
 800084c:	f001 fc64 	bl	8002118 <iprintf>
    fflush(stdout);
 8000850:	4c11      	ldr	r4, [pc, #68]	; (8000898 <main+0x54>)
 8000852:	6823      	ldr	r3, [r4, #0]
 8000854:	6898      	ldr	r0, [r3, #8]
 8000856:	f001 faa7 	bl	8001da8 <fflush>
    printf("\033[2J\033[2;15H"); // Erase screen & move cursor to home position
 800085a:	4810      	ldr	r0, [pc, #64]	; (800089c <main+0x58>)
 800085c:	f001 fc5c 	bl	8002118 <iprintf>
    fflush(stdout); // Need to flush stdout after using printf that doesn't end in \n
 8000860:	6823      	ldr	r3, [r4, #0]
 8000862:	6898      	ldr	r0, [r3, #8]
 8000864:	f001 faa0 	bl	8001da8 <fflush>
    printf("PRESS <ESC> OR <CTL>+[ TO QUIT\n");
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <main+0x5c>)
 800086a:	f001 fcc9 	bl	8002200 <puts>
    printf("\033[12;H\033[s");
 800086e:	480d      	ldr	r0, [pc, #52]	; (80008a4 <main+0x60>)
 8000870:	f001 fc52 	bl	8002118 <iprintf>
    fflush(stdout);
 8000874:	6823      	ldr	r3, [r4, #0]
 8000876:	6898      	ldr	r0, [r3, #8]
 8000878:	f001 fa96 	bl	8001da8 <fflush>
    printf("\033[12;24r");
 800087c:	480a      	ldr	r0, [pc, #40]	; (80008a8 <main+0x64>)
 800087e:	f001 fc4b 	bl	8002118 <iprintf>
    fflush(stdout);
 8000882:	6823      	ldr	r3, [r4, #0]
 8000884:	6898      	ldr	r0, [r3, #8]
 8000886:	f001 fa8f 	bl	8001da8 <fflush>
    gpio_hal_init();
 800088a:	f7ff ff33 	bl	80006f4 <gpio_hal_init>
        	update_led();
 800088e:	f7ff ffa1 	bl	80007d4 <update_led>
 8000892:	e7fc      	b.n	800088e <main+0x4a>
 8000894:	08002bf0 	.word	0x08002bf0
 8000898:	2000000c 	.word	0x2000000c
 800089c:	08002c04 	.word	0x08002c04
 80008a0:	08002c10 	.word	0x08002c10
 80008a4:	08002c30 	.word	0x08002c30
 80008a8:	08002c3c 	.word	0x08002c3c

080008ac <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 80008ac:	b530      	push	{r4, r5, lr}
 80008ae:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 80008b0:	6803      	ldr	r3, [r0, #0]
 80008b2:	4a2e      	ldr	r2, [pc, #184]	; (800096c <HAL_UART_MspInit+0xc0>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d004      	beq.n	80008c2 <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 80008b8:	4a2d      	ldr	r2, [pc, #180]	; (8000970 <HAL_UART_MspInit+0xc4>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d02c      	beq.n	8000918 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 80008be:	b00b      	add	sp, #44	; 0x2c
 80008c0:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 80008c2:	4c2c      	ldr	r4, [pc, #176]	; (8000974 <HAL_UART_MspInit+0xc8>)
 80008c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	6323      	str	r3, [r4, #48]	; 0x30
 80008cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	9301      	str	r3, [sp, #4]
 80008d4:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 80008d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008da:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008e8:	2307      	movs	r3, #7
 80008ea:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 80008ec:	4d22      	ldr	r5, [pc, #136]	; (8000978 <HAL_UART_MspInit+0xcc>)
 80008ee:	a905      	add	r1, sp, #20
 80008f0:	4628      	mov	r0, r5
 80008f2:	f000 f94d 	bl	8000b90 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fa:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 80008fc:	a905      	add	r1, sp, #20
 80008fe:	4628      	mov	r0, r5
 8000900:	f000 f946 	bl	8000b90 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8000904:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000906:	f043 0310 	orr.w	r3, r3, #16
 800090a:	6463      	str	r3, [r4, #68]	; 0x44
 800090c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800090e:	f003 0310 	and.w	r3, r3, #16
 8000912:	9302      	str	r3, [sp, #8]
 8000914:	9b02      	ldr	r3, [sp, #8]
 8000916:	e7d2      	b.n	80008be <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000918:	4c16      	ldr	r4, [pc, #88]	; (8000974 <HAL_UART_MspInit+0xc8>)
 800091a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6323      	str	r3, [r4, #48]	; 0x30
 8000922:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	9303      	str	r3, [sp, #12]
 800092a:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000934:	2301      	movs	r3, #1
 8000936:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800093c:	2308      	movs	r3, #8
 800093e:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8000940:	4d0e      	ldr	r5, [pc, #56]	; (800097c <HAL_UART_MspInit+0xd0>)
 8000942:	a905      	add	r1, sp, #20
 8000944:	4628      	mov	r0, r5
 8000946:	f000 f923 	bl	8000b90 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 800094e:	a905      	add	r1, sp, #20
 8000950:	4628      	mov	r0, r5
 8000952:	f000 f91d 	bl	8000b90 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8000956:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000958:	f043 0320 	orr.w	r3, r3, #32
 800095c:	6463      	str	r3, [r4, #68]	; 0x44
 800095e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000960:	f003 0320 	and.w	r3, r3, #32
 8000964:	9304      	str	r3, [sp, #16]
 8000966:	9b04      	ldr	r3, [sp, #16]
}
 8000968:	e7a9      	b.n	80008be <HAL_UART_MspInit+0x12>
 800096a:	bf00      	nop
 800096c:	40011000 	.word	0x40011000
 8000970:	40011400 	.word	0x40011400
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000
 800097c:	40020800 	.word	0x40020800

08000980 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000980:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8000982:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8000984:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	2200      	movs	r2, #0
 8000988:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 800098a:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 800098c:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 800098e:	210c      	movs	r1, #12
 8000990:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000992:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8000994:	f001 f926 	bl	8001be4 <HAL_UART_Init>
}
 8000998:	bd08      	pop	{r3, pc}
	...

0800099c <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 800099c:	b510      	push	{r4, lr}
 800099e:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 80009a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a4:	b292      	uxth	r2, r2
 80009a6:	4802      	ldr	r0, [pc, #8]	; (80009b0 <_write+0x14>)
 80009a8:	f000 ffe7 	bl	800197a <HAL_UART_Transmit>
	return len;
}
 80009ac:	4620      	mov	r0, r4
 80009ae:	bd10      	pop	{r4, pc}
 80009b0:	20000098 	.word	0x20000098

080009b4 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 80009b4:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 80009b6:	2200      	movs	r2, #0
 80009b8:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	2201      	movs	r2, #1
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <_read+0x18>)
 80009c2:	f001 f848 	bl	8001a56 <HAL_UART_Receive>
	return len;
}
 80009c6:	2001      	movs	r0, #1
 80009c8:	bd08      	pop	{r3, pc}
 80009ca:	bf00      	nop
 80009cc:	20000098 	.word	0x20000098

080009d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <LoopForever+0x6>)
  ldr r1, =_edata
 80009d6:	490e      	ldr	r1, [pc, #56]	; (8000a10 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d8:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <LoopForever+0xe>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1



  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009ec:	4c0b      	ldr	r4, [pc, #44]	; (8000a1c <LoopForever+0x16>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009fa:	f000 f813 	bl	8000a24 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009fe:	f001 faaf 	bl	8001f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a02:	f7ff ff1f 	bl	8000844 <main>

08000a06 <LoopForever>:

LoopForever:
    b LoopForever
 8000a06:	e7fe      	b.n	8000a06 <LoopForever>
  ldr   r0, =_estack
 8000a08:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a14:	08002e68 	.word	0x08002e68
  ldr r2, =_sbss
 8000a18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a1c:	20000120 	.word	0x20000120

08000a20 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC_IRQHandler>
	...

08000a24 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <SystemInit+0x18>)
 8000a26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000a2a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a36:	609a      	str	r2, [r3, #8]
#endif
}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000a40:	4770      	bx	lr
	...

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b510      	push	{r4, lr}
 8000a46:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_InitTick+0x40>)
 8000a4a:	7818      	ldrb	r0, [r3, #0]
 8000a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a50:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a54:	4a0c      	ldr	r2, [pc, #48]	; (8000a88 <HAL_InitTick+0x44>)
 8000a56:	6810      	ldr	r0, [r2, #0]
 8000a58:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a5c:	f000 f882 	bl	8000b64 <HAL_SYSTICK_Config>
 8000a60:	b968      	cbnz	r0, 8000a7e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a62:	2c0f      	cmp	r4, #15
 8000a64:	d901      	bls.n	8000a6a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000a66:	2001      	movs	r0, #1
 8000a68:	e00a      	b.n	8000a80 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	4621      	mov	r1, r4
 8000a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a72:	f000 f845 	bl	8000b00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a76:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <HAL_InitTick+0x40>)
 8000a78:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	e000      	b.n	8000a80 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000a7e:	2001      	movs	r0, #1
}
 8000a80:	bd10      	pop	{r4, pc}
 8000a82:	bf00      	nop
 8000a84:	20000004 	.word	0x20000004
 8000a88:	20000000 	.word	0x20000000

08000a8c <HAL_Init>:
{
 8000a8c:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_Init+0x28>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a96:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a9e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f81b 	bl	8000adc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f7ff ffcc 	bl	8000a44 <HAL_InitTick>
  HAL_MspInit();
 8000aac:	f7ff ffc8 	bl	8000a40 <HAL_MspInit>
}
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	bd08      	pop	{r3, pc}
 8000ab4:	40023c00 	.word	0x40023c00

08000ab8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ab8:	4a03      	ldr	r2, [pc, #12]	; (8000ac8 <HAL_IncTick+0x10>)
 8000aba:	6811      	ldr	r1, [r2, #0]
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_IncTick+0x14>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	440b      	add	r3, r1
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000118 	.word	0x20000118
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ad0:	4b01      	ldr	r3, [pc, #4]	; (8000ad8 <HAL_GetTick+0x8>)
 8000ad2:	6818      	ldr	r0, [r3, #0]
}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000118 	.word	0x20000118

08000adc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000adc:	4906      	ldr	r1, [pc, #24]	; (8000af8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000ade:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ae4:	041b      	lsls	r3, r3, #16
 8000ae6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae8:	0200      	lsls	r0, r0, #8
 8000aea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aee:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000af0:	4a02      	ldr	r2, [pc, #8]	; (8000afc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000af2:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000af4:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00
 8000afc:	05fa0000 	.word	0x05fa0000

08000b00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b00:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_NVIC_SetPriority+0x58>)
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0a:	f1c3 0407 	rsb	r4, r3, #7
 8000b0e:	2c04      	cmp	r4, #4
 8000b10:	bf28      	it	cs
 8000b12:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b14:	1d1d      	adds	r5, r3, #4
 8000b16:	2d06      	cmp	r5, #6
 8000b18:	d914      	bls.n	8000b44 <HAL_NVIC_SetPriority+0x44>
 8000b1a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	f04f 35ff 	mov.w	r5, #4294967295
 8000b20:	fa05 f404 	lsl.w	r4, r5, r4
 8000b24:	ea21 0104 	bic.w	r1, r1, r4
 8000b28:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2a:	fa05 f303 	lsl.w	r3, r5, r3
 8000b2e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b32:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000b34:	2800      	cmp	r0, #0
 8000b36:	db07      	blt.n	8000b48 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	0109      	lsls	r1, r1, #4
 8000b3a:	b2c9      	uxtb	r1, r1
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_NVIC_SetPriority+0x5c>)
 8000b3e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b40:	bc30      	pop	{r4, r5}
 8000b42:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b44:	2300      	movs	r3, #0
 8000b46:	e7e9      	b.n	8000b1c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	f000 000f 	and.w	r0, r0, #15
 8000b4c:	0109      	lsls	r1, r1, #4
 8000b4e:	b2c9      	uxtb	r1, r1
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_NVIC_SetPriority+0x60>)
 8000b52:	5419      	strb	r1, [r3, r0]
 8000b54:	e7f4      	b.n	8000b40 <HAL_NVIC_SetPriority+0x40>
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00
 8000b5c:	e000e400 	.word	0xe000e400
 8000b60:	e000ed14 	.word	0xe000ed14

08000b64 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b64:	3801      	subs	r0, #1
 8000b66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b6a:	d20a      	bcs.n	8000b82 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_SYSTICK_Config+0x24>)
 8000b6e:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b70:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <HAL_SYSTICK_Config+0x28>)
 8000b72:	21f0      	movs	r1, #240	; 0xf0
 8000b74:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b78:	2000      	movs	r0, #0
 8000b7a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b82:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000e010 	.word	0xe000e010
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	2b0f      	cmp	r3, #15
 8000b94:	f200 80e1 	bhi.w	8000d5a <HAL_GPIO_Init+0x1ca>
{
 8000b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	e039      	b.n	8000c12 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b9e:	2209      	movs	r2, #9
 8000ba0:	e000      	b.n	8000ba4 <HAL_GPIO_Init+0x14>
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	40b2      	lsls	r2, r6
 8000ba6:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ba8:	3402      	adds	r4, #2
 8000baa:	4e6c      	ldr	r6, [pc, #432]	; (8000d5c <HAL_GPIO_Init+0x1cc>)
 8000bac:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bb0:	4a6b      	ldr	r2, [pc, #428]	; (8000d60 <HAL_GPIO_Init+0x1d0>)
 8000bb2:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000bb4:	43ea      	mvns	r2, r5
 8000bb6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bba:	684f      	ldr	r7, [r1, #4]
 8000bbc:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000bc0:	d001      	beq.n	8000bc6 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000bc2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000bc6:	4c66      	ldr	r4, [pc, #408]	; (8000d60 <HAL_GPIO_Init+0x1d0>)
 8000bc8:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000bca:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000bcc:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bd0:	684f      	ldr	r7, [r1, #4]
 8000bd2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000bd6:	d001      	beq.n	8000bdc <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000bd8:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000bdc:	4c60      	ldr	r4, [pc, #384]	; (8000d60 <HAL_GPIO_Init+0x1d0>)
 8000bde:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000be0:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000be2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000be6:	684f      	ldr	r7, [r1, #4]
 8000be8:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000bec:	d001      	beq.n	8000bf2 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000bee:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000bf2:	4c5b      	ldr	r4, [pc, #364]	; (8000d60 <HAL_GPIO_Init+0x1d0>)
 8000bf4:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000bf6:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000bf8:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bfa:	684e      	ldr	r6, [r1, #4]
 8000bfc:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000c00:	d001      	beq.n	8000c06 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000c02:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000c06:	4c56      	ldr	r4, [pc, #344]	; (8000d60 <HAL_GPIO_Init+0x1d0>)
 8000c08:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	2b0f      	cmp	r3, #15
 8000c0e:	f200 80a2 	bhi.w	8000d56 <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8000c12:	2201      	movs	r2, #1
 8000c14:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c16:	680c      	ldr	r4, [r1, #0]
 8000c18:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000c1c:	42aa      	cmp	r2, r5
 8000c1e:	d1f4      	bne.n	8000c0a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c20:	684c      	ldr	r4, [r1, #4]
 8000c22:	1e66      	subs	r6, r4, #1
 8000c24:	2c11      	cmp	r4, #17
 8000c26:	bf18      	it	ne
 8000c28:	2e01      	cmpne	r6, #1
 8000c2a:	d901      	bls.n	8000c30 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c2c:	2c12      	cmp	r4, #18
 8000c2e:	d112      	bne.n	8000c56 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8000c30:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c32:	005f      	lsls	r7, r3, #1
 8000c34:	2403      	movs	r4, #3
 8000c36:	40bc      	lsls	r4, r7
 8000c38:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c3c:	68cc      	ldr	r4, [r1, #12]
 8000c3e:	40bc      	lsls	r4, r7
 8000c40:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000c42:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c44:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c46:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c4a:	684c      	ldr	r4, [r1, #4]
 8000c4c:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000c50:	409a      	lsls	r2, r3
 8000c52:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000c54:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c56:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c58:	005f      	lsls	r7, r3, #1
 8000c5a:	2603      	movs	r6, #3
 8000c5c:	40be      	lsls	r6, r7
 8000c5e:	43f6      	mvns	r6, r6
 8000c60:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c62:	688c      	ldr	r4, [r1, #8]
 8000c64:	40bc      	lsls	r4, r7
 8000c66:	4314      	orrs	r4, r2
      GPIOx->PUPDR = temp;
 8000c68:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c6a:	684a      	ldr	r2, [r1, #4]
 8000c6c:	2a12      	cmp	r2, #18
 8000c6e:	bf18      	it	ne
 8000c70:	2a02      	cmpne	r2, #2
 8000c72:	d113      	bne.n	8000c9c <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3];
 8000c74:	08dc      	lsrs	r4, r3, #3
 8000c76:	3408      	adds	r4, #8
 8000c78:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c7c:	f003 0207 	and.w	r2, r3, #7
 8000c80:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8000c84:	220f      	movs	r2, #15
 8000c86:	fa02 f20c 	lsl.w	r2, r2, ip
 8000c8a:	ea2e 0e02 	bic.w	lr, lr, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c8e:	690a      	ldr	r2, [r1, #16]
 8000c90:	fa02 f20c 	lsl.w	r2, r2, ip
 8000c94:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8000c98:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
      temp = GPIOx->MODER;
 8000c9c:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c9e:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ca0:	684a      	ldr	r2, [r1, #4]
 8000ca2:	f002 0203 	and.w	r2, r2, #3
 8000ca6:	40ba      	lsls	r2, r7
 8000ca8:	4332      	orrs	r2, r6
      GPIOx->MODER = temp;
 8000caa:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cac:	684a      	ldr	r2, [r1, #4]
 8000cae:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000cb2:	d0aa      	beq.n	8000c0a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb4:	4a2b      	ldr	r2, [pc, #172]	; (8000d64 <HAL_GPIO_Init+0x1d4>)
 8000cb6:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000cb8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000cbc:	6454      	str	r4, [r2, #68]	; 0x44
 8000cbe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000cc0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000cc4:	9201      	str	r2, [sp, #4]
 8000cc6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000cc8:	089c      	lsrs	r4, r3, #2
 8000cca:	1ca6      	adds	r6, r4, #2
 8000ccc:	4a23      	ldr	r2, [pc, #140]	; (8000d5c <HAL_GPIO_Init+0x1cc>)
 8000cce:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cd2:	f003 0203 	and.w	r2, r3, #3
 8000cd6:	0096      	lsls	r6, r2, #2
 8000cd8:	220f      	movs	r2, #15
 8000cda:	40b2      	lsls	r2, r6
 8000cdc:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ce0:	4a21      	ldr	r2, [pc, #132]	; (8000d68 <HAL_GPIO_Init+0x1d8>)
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	f43f af5d 	beq.w	8000ba2 <HAL_GPIO_Init+0x12>
 8000ce8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cec:	4290      	cmp	r0, r2
 8000cee:	d022      	beq.n	8000d36 <HAL_GPIO_Init+0x1a6>
 8000cf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	d020      	beq.n	8000d3a <HAL_GPIO_Init+0x1aa>
 8000cf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cfc:	4290      	cmp	r0, r2
 8000cfe:	d01e      	beq.n	8000d3e <HAL_GPIO_Init+0x1ae>
 8000d00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d04:	4290      	cmp	r0, r2
 8000d06:	d01c      	beq.n	8000d42 <HAL_GPIO_Init+0x1b2>
 8000d08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d0c:	4290      	cmp	r0, r2
 8000d0e:	d01a      	beq.n	8000d46 <HAL_GPIO_Init+0x1b6>
 8000d10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d14:	4290      	cmp	r0, r2
 8000d16:	d018      	beq.n	8000d4a <HAL_GPIO_Init+0x1ba>
 8000d18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	d016      	beq.n	8000d4e <HAL_GPIO_Init+0x1be>
 8000d20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d24:	4290      	cmp	r0, r2
 8000d26:	d014      	beq.n	8000d52 <HAL_GPIO_Init+0x1c2>
 8000d28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	f43f af36 	beq.w	8000b9e <HAL_GPIO_Init+0xe>
 8000d32:	220a      	movs	r2, #10
 8000d34:	e736      	b.n	8000ba4 <HAL_GPIO_Init+0x14>
 8000d36:	2201      	movs	r2, #1
 8000d38:	e734      	b.n	8000ba4 <HAL_GPIO_Init+0x14>
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	e732      	b.n	8000ba4 <HAL_GPIO_Init+0x14>
 8000d3e:	2203      	movs	r2, #3
 8000d40:	e730      	b.n	8000ba4 <HAL_GPIO_Init+0x14>
 8000d42:	2204      	movs	r2, #4
 8000d44:	e72e      	b.n	8000ba4 <HAL_GPIO_Init+0x14>
 8000d46:	2205      	movs	r2, #5
 8000d48:	e72c      	b.n	8000ba4 <HAL_GPIO_Init+0x14>
 8000d4a:	2206      	movs	r2, #6
 8000d4c:	e72a      	b.n	8000ba4 <HAL_GPIO_Init+0x14>
 8000d4e:	2207      	movs	r2, #7
 8000d50:	e728      	b.n	8000ba4 <HAL_GPIO_Init+0x14>
 8000d52:	2208      	movs	r2, #8
 8000d54:	e726      	b.n	8000ba4 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000d56:	b003      	add	sp, #12
 8000d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d5a:	4770      	bx	lr
 8000d5c:	40013800 	.word	0x40013800
 8000d60:	40013c00 	.word	0x40013c00
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000

08000d6c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d6c:	6903      	ldr	r3, [r0, #16]
 8000d6e:	4219      	tst	r1, r3
 8000d70:	d101      	bne.n	8000d76 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d72:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000d74:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8000d76:	2001      	movs	r0, #1
 8000d78:	4770      	bx	lr

08000d7a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d7a:	b912      	cbnz	r2, 8000d82 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000d7c:	0409      	lsls	r1, r1, #16
 8000d7e:	6181      	str	r1, [r0, #24]
  }
}
 8000d80:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000d82:	6181      	str	r1, [r0, #24]
 8000d84:	4770      	bx	lr
	...

08000d88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000d88:	b510      	push	{r4, lr}
 8000d8a:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <HAL_PWREx_EnableOverDrive+0x74>)
 8000d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d94:	641a      	str	r2, [r3, #64]	; 0x40
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000da0:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <HAL_PWREx_EnableOverDrive+0x78>)
 8000da2:	6813      	ldr	r3, [r2, #0]
 8000da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000daa:	f7ff fe91 	bl	8000ad0 <HAL_GetTick>
 8000dae:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <HAL_PWREx_EnableOverDrive+0x78>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000db8:	d108      	bne.n	8000dcc <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000dba:	f7ff fe89 	bl	8000ad0 <HAL_GetTick>
 8000dbe:	1b00      	subs	r0, r0, r4
 8000dc0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000dc4:	d9f4      	bls.n	8000db0 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000dc6:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000dcc:	4a0c      	ldr	r2, [pc, #48]	; (8000e00 <HAL_PWREx_EnableOverDrive+0x78>)
 8000dce:	6813      	ldr	r3, [r2, #0]
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd4:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000dd6:	f7ff fe7b 	bl	8000ad0 <HAL_GetTick>
 8000dda:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_PWREx_EnableOverDrive+0x78>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000de4:	d107      	bne.n	8000df6 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000de6:	f7ff fe73 	bl	8000ad0 <HAL_GetTick>
 8000dea:	1b00      	subs	r0, r0, r4
 8000dec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000df0:	d9f4      	bls.n	8000ddc <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8000df2:	2003      	movs	r0, #3
 8000df4:	e7e8      	b.n	8000dc8 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000df6:	2000      	movs	r0, #0
 8000df8:	e7e6      	b.n	8000dc8 <HAL_PWREx_EnableOverDrive+0x40>
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40007000 	.word	0x40007000

08000e04 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e04:	2800      	cmp	r0, #0
 8000e06:	f000 8212 	beq.w	800122e <HAL_RCC_OscConfig+0x42a>
{
 8000e0a:	b570      	push	{r4, r5, r6, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e10:	6803      	ldr	r3, [r0, #0]
 8000e12:	f013 0f01 	tst.w	r3, #1
 8000e16:	d029      	beq.n	8000e6c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e18:	4ba2      	ldr	r3, [pc, #648]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f003 030c 	and.w	r3, r3, #12
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d01a      	beq.n	8000e5a <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e24:	4b9f      	ldr	r3, [pc, #636]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 030c 	and.w	r3, r3, #12
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d00f      	beq.n	8000e50 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e30:	6863      	ldr	r3, [r4, #4]
 8000e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e36:	d040      	beq.n	8000eba <HAL_RCC_OscConfig+0xb6>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d154      	bne.n	8000ee6 <HAL_RCC_OscConfig+0xe2>
 8000e3c:	4b99      	ldr	r3, [pc, #612]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	e039      	b.n	8000ec4 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e50:	4b94      	ldr	r3, [pc, #592]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000e58:	d0ea      	beq.n	8000e30 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5a:	4b92      	ldr	r3, [pc, #584]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e62:	d003      	beq.n	8000e6c <HAL_RCC_OscConfig+0x68>
 8000e64:	6863      	ldr	r3, [r4, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 81e3 	beq.w	8001232 <HAL_RCC_OscConfig+0x42e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e6c:	6823      	ldr	r3, [r4, #0]
 8000e6e:	f013 0f02 	tst.w	r3, #2
 8000e72:	d075      	beq.n	8000f60 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e74:	4b8b      	ldr	r3, [pc, #556]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f013 0f0c 	tst.w	r3, #12
 8000e7c:	d05e      	beq.n	8000f3c <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e7e:	4b89      	ldr	r3, [pc, #548]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 030c 	and.w	r3, r3, #12
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d053      	beq.n	8000f32 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000e8a:	68e3      	ldr	r3, [r4, #12]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f000 808a 	beq.w	8000fa6 <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e92:	4a84      	ldr	r2, [pc, #528]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000e94:	6813      	ldr	r3, [r2, #0]
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fe18 	bl	8000ad0 <HAL_GetTick>
 8000ea0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea2:	4b80      	ldr	r3, [pc, #512]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f013 0f02 	tst.w	r3, #2
 8000eaa:	d173      	bne.n	8000f94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eac:	f7ff fe10 	bl	8000ad0 <HAL_GetTick>
 8000eb0:	1b40      	subs	r0, r0, r5
 8000eb2:	2802      	cmp	r0, #2
 8000eb4:	d9f5      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	e1be      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eba:	4a7a      	ldr	r2, [pc, #488]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000ebc:	6813      	ldr	r3, [r2, #0]
 8000ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec2:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ec4:	6863      	ldr	r3, [r4, #4]
 8000ec6:	b32b      	cbz	r3, 8000f14 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fe02 	bl	8000ad0 <HAL_GetTick>
 8000ecc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ece:	4b75      	ldr	r3, [pc, #468]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ed6:	d1c9      	bne.n	8000e6c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ed8:	f7ff fdfa 	bl	8000ad0 <HAL_GetTick>
 8000edc:	1b40      	subs	r0, r0, r5
 8000ede:	2864      	cmp	r0, #100	; 0x64
 8000ee0:	d9f5      	bls.n	8000ece <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000ee2:	2003      	movs	r0, #3
 8000ee4:	e1a8      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eea:	d009      	beq.n	8000f00 <HAL_RCC_OscConfig+0xfc>
 8000eec:	4b6d      	ldr	r3, [pc, #436]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	e7e1      	b.n	8000ec4 <HAL_RCC_OscConfig+0xc0>
 8000f00:	4b68      	ldr	r3, [pc, #416]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	e7d7      	b.n	8000ec4 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8000f14:	f7ff fddc 	bl	8000ad0 <HAL_GetTick>
 8000f18:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1a:	4b62      	ldr	r3, [pc, #392]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f22:	d0a3      	beq.n	8000e6c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f24:	f7ff fdd4 	bl	8000ad0 <HAL_GetTick>
 8000f28:	1b40      	subs	r0, r0, r5
 8000f2a:	2864      	cmp	r0, #100	; 0x64
 8000f2c:	d9f5      	bls.n	8000f1a <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000f2e:	2003      	movs	r0, #3
 8000f30:	e182      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f32:	4b5c      	ldr	r3, [pc, #368]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000f3a:	d1a6      	bne.n	8000e8a <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f3c:	4b59      	ldr	r3, [pc, #356]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f013 0f02 	tst.w	r3, #2
 8000f44:	d004      	beq.n	8000f50 <HAL_RCC_OscConfig+0x14c>
 8000f46:	68e3      	ldr	r3, [r4, #12]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d001      	beq.n	8000f50 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	e173      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f50:	4a54      	ldr	r2, [pc, #336]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000f52:	6813      	ldr	r3, [r2, #0]
 8000f54:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f58:	6921      	ldr	r1, [r4, #16]
 8000f5a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f5e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	f013 0f08 	tst.w	r3, #8
 8000f66:	d046      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000f68:	6963      	ldr	r3, [r4, #20]
 8000f6a:	b383      	cbz	r3, 8000fce <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f6c:	4a4d      	ldr	r2, [pc, #308]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000f6e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f76:	f7ff fdab 	bl	8000ad0 <HAL_GetTick>
 8000f7a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7c:	4b49      	ldr	r3, [pc, #292]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f80:	f013 0f02 	tst.w	r3, #2
 8000f84:	d137      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f86:	f7ff fda3 	bl	8000ad0 <HAL_GetTick>
 8000f8a:	1b40      	subs	r0, r0, r5
 8000f8c:	2802      	cmp	r0, #2
 8000f8e:	d9f5      	bls.n	8000f7c <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8000f90:	2003      	movs	r0, #3
 8000f92:	e151      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f94:	4a43      	ldr	r2, [pc, #268]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000f96:	6813      	ldr	r3, [r2, #0]
 8000f98:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f9c:	6921      	ldr	r1, [r4, #16]
 8000f9e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	e7dc      	b.n	8000f60 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8000fa6:	4a3f      	ldr	r2, [pc, #252]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000fa8:	6813      	ldr	r3, [r2, #0]
 8000faa:	f023 0301 	bic.w	r3, r3, #1
 8000fae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fd8e 	bl	8000ad0 <HAL_GetTick>
 8000fb4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb6:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f013 0f02 	tst.w	r3, #2
 8000fbe:	d0cf      	beq.n	8000f60 <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc0:	f7ff fd86 	bl	8000ad0 <HAL_GetTick>
 8000fc4:	1b40      	subs	r0, r0, r5
 8000fc6:	2802      	cmp	r0, #2
 8000fc8:	d9f5      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8000fca:	2003      	movs	r0, #3
 8000fcc:	e134      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fce:	4a35      	ldr	r2, [pc, #212]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000fd0:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000fd2:	f023 0301 	bic.w	r3, r3, #1
 8000fd6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fd8:	f7ff fd7a 	bl	8000ad0 <HAL_GetTick>
 8000fdc:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fde:	4b31      	ldr	r3, [pc, #196]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fe2:	f013 0f02 	tst.w	r3, #2
 8000fe6:	d006      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe8:	f7ff fd72 	bl	8000ad0 <HAL_GetTick>
 8000fec:	1b40      	subs	r0, r0, r5
 8000fee:	2802      	cmp	r0, #2
 8000ff0:	d9f5      	bls.n	8000fde <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	e120      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	f013 0f04 	tst.w	r3, #4
 8000ffc:	d07e      	beq.n	80010fc <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ffe:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001006:	d11e      	bne.n	8001046 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001008:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 800100a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800100c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001010:	641a      	str	r2, [r3, #64]	; 0x40
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800101c:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800101e:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <HAL_RCC_OscConfig+0x2a4>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001026:	d010      	beq.n	800104a <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001028:	68a3      	ldr	r3, [r4, #8]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d021      	beq.n	8001072 <HAL_RCC_OscConfig+0x26e>
 800102e:	2b00      	cmp	r3, #0
 8001030:	d13c      	bne.n	80010ac <HAL_RCC_OscConfig+0x2a8>
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8001034:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001036:	f022 0201 	bic.w	r2, r2, #1
 800103a:	671a      	str	r2, [r3, #112]	; 0x70
 800103c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800103e:	f022 0204 	bic.w	r2, r2, #4
 8001042:	671a      	str	r2, [r3, #112]	; 0x70
 8001044:	e01a      	b.n	800107c <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 8001046:	2500      	movs	r5, #0
 8001048:	e7e9      	b.n	800101e <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <HAL_RCC_OscConfig+0x2a4>)
 800104c:	6813      	ldr	r3, [r2, #0]
 800104e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001052:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001054:	f7ff fd3c 	bl	8000ad0 <HAL_GetTick>
 8001058:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <HAL_RCC_OscConfig+0x2a4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001062:	d1e1      	bne.n	8001028 <HAL_RCC_OscConfig+0x224>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001064:	f7ff fd34 	bl	8000ad0 <HAL_GetTick>
 8001068:	1b80      	subs	r0, r0, r6
 800106a:	2864      	cmp	r0, #100	; 0x64
 800106c:	d9f5      	bls.n	800105a <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 800106e:	2003      	movs	r0, #3
 8001070:	e0e2      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001072:	4a0c      	ldr	r2, [pc, #48]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8001074:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800107c:	68a3      	ldr	r3, [r4, #8]
 800107e:	b35b      	cbz	r3, 80010d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001080:	f7ff fd26 	bl	8000ad0 <HAL_GetTick>
 8001084:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8001088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800108a:	f013 0f02 	tst.w	r3, #2
 800108e:	d134      	bne.n	80010fa <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001090:	f7ff fd1e 	bl	8000ad0 <HAL_GetTick>
 8001094:	1b80      	subs	r0, r0, r6
 8001096:	f241 3388 	movw	r3, #5000	; 0x1388
 800109a:	4298      	cmp	r0, r3
 800109c:	d9f3      	bls.n	8001086 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 800109e:	2003      	movs	r0, #3
 80010a0:	e0ca      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d009      	beq.n	80010c4 <HAL_RCC_OscConfig+0x2c0>
 80010b0:	4b64      	ldr	r3, [pc, #400]	; (8001244 <HAL_RCC_OscConfig+0x440>)
 80010b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010b4:	f022 0201 	bic.w	r2, r2, #1
 80010b8:	671a      	str	r2, [r3, #112]	; 0x70
 80010ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010bc:	f022 0204 	bic.w	r2, r2, #4
 80010c0:	671a      	str	r2, [r3, #112]	; 0x70
 80010c2:	e7db      	b.n	800107c <HAL_RCC_OscConfig+0x278>
 80010c4:	4b5f      	ldr	r3, [pc, #380]	; (8001244 <HAL_RCC_OscConfig+0x440>)
 80010c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010c8:	f042 0204 	orr.w	r2, r2, #4
 80010cc:	671a      	str	r2, [r3, #112]	; 0x70
 80010ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010d0:	f042 0201 	orr.w	r2, r2, #1
 80010d4:	671a      	str	r2, [r3, #112]	; 0x70
 80010d6:	e7d1      	b.n	800107c <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d8:	f7ff fcfa 	bl	8000ad0 <HAL_GetTick>
 80010dc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010de:	4b59      	ldr	r3, [pc, #356]	; (8001244 <HAL_RCC_OscConfig+0x440>)
 80010e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010e2:	f013 0f02 	tst.w	r3, #2
 80010e6:	d008      	beq.n	80010fa <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e8:	f7ff fcf2 	bl	8000ad0 <HAL_GetTick>
 80010ec:	1b80      	subs	r0, r0, r6
 80010ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80010f2:	4298      	cmp	r0, r3
 80010f4:	d9f3      	bls.n	80010de <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 80010f6:	2003      	movs	r0, #3
 80010f8:	e09e      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80010fa:	b9fd      	cbnz	r5, 800113c <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010fc:	69a3      	ldr	r3, [r4, #24]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 8099 	beq.w	8001236 <HAL_RCC_OscConfig+0x432>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001104:	4a4f      	ldr	r2, [pc, #316]	; (8001244 <HAL_RCC_OscConfig+0x440>)
 8001106:	6892      	ldr	r2, [r2, #8]
 8001108:	f002 020c 	and.w	r2, r2, #12
 800110c:	2a08      	cmp	r2, #8
 800110e:	d059      	beq.n	80011c4 <HAL_RCC_OscConfig+0x3c0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001110:	2b02      	cmp	r3, #2
 8001112:	d019      	beq.n	8001148 <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001114:	4a4b      	ldr	r2, [pc, #300]	; (8001244 <HAL_RCC_OscConfig+0x440>)
 8001116:	6813      	ldr	r3, [r2, #0]
 8001118:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800111c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111e:	f7ff fcd7 	bl	8000ad0 <HAL_GetTick>
 8001122:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001124:	4b47      	ldr	r3, [pc, #284]	; (8001244 <HAL_RCC_OscConfig+0x440>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800112c:	d048      	beq.n	80011c0 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112e:	f7ff fccf 	bl	8000ad0 <HAL_GetTick>
 8001132:	1b00      	subs	r0, r0, r4
 8001134:	2802      	cmp	r0, #2
 8001136:	d9f5      	bls.n	8001124 <HAL_RCC_OscConfig+0x320>
          {
            return HAL_TIMEOUT;
 8001138:	2003      	movs	r0, #3
 800113a:	e07d      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
      __HAL_RCC_PWR_CLK_DISABLE();
 800113c:	4a41      	ldr	r2, [pc, #260]	; (8001244 <HAL_RCC_OscConfig+0x440>)
 800113e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	e7d9      	b.n	80010fc <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8001148:	4a3e      	ldr	r2, [pc, #248]	; (8001244 <HAL_RCC_OscConfig+0x440>)
 800114a:	6813      	ldr	r3, [r2, #0]
 800114c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001150:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001152:	f7ff fcbd 	bl	8000ad0 <HAL_GetTick>
 8001156:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001158:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <HAL_RCC_OscConfig+0x440>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001160:	d006      	beq.n	8001170 <HAL_RCC_OscConfig+0x36c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001162:	f7ff fcb5 	bl	8000ad0 <HAL_GetTick>
 8001166:	1b40      	subs	r0, r0, r5
 8001168:	2802      	cmp	r0, #2
 800116a:	d9f5      	bls.n	8001158 <HAL_RCC_OscConfig+0x354>
            return HAL_TIMEOUT;
 800116c:	2003      	movs	r0, #3
 800116e:	e063      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001170:	69e3      	ldr	r3, [r4, #28]
 8001172:	6a22      	ldr	r2, [r4, #32]
 8001174:	4313      	orrs	r3, r2
 8001176:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001178:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800117c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800117e:	0852      	lsrs	r2, r2, #1
 8001180:	3a01      	subs	r2, #1
 8001182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001186:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001188:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800118c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800118e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001192:	4a2c      	ldr	r2, [pc, #176]	; (8001244 <HAL_RCC_OscConfig+0x440>)
 8001194:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001196:	6813      	ldr	r3, [r2, #0]
 8001198:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800119c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800119e:	f7ff fc97 	bl	8000ad0 <HAL_GetTick>
 80011a2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <HAL_RCC_OscConfig+0x440>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011ac:	d106      	bne.n	80011bc <HAL_RCC_OscConfig+0x3b8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ae:	f7ff fc8f 	bl	8000ad0 <HAL_GetTick>
 80011b2:	1b00      	subs	r0, r0, r4
 80011b4:	2802      	cmp	r0, #2
 80011b6:	d9f5      	bls.n	80011a4 <HAL_RCC_OscConfig+0x3a0>
            return HAL_TIMEOUT;
 80011b8:	2003      	movs	r0, #3
 80011ba:	e03d      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80011bc:	2000      	movs	r0, #0
 80011be:	e03b      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
 80011c0:	2000      	movs	r0, #0
 80011c2:	e039      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
      pll_config = RCC->PLLCFGR;
 80011c4:	4a1f      	ldr	r2, [pc, #124]	; (8001244 <HAL_RCC_OscConfig+0x440>)
 80011c6:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d037      	beq.n	800123c <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011cc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80011d0:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011d2:	428b      	cmp	r3, r1
 80011d4:	d001      	beq.n	80011da <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 80011d6:	2001      	movs	r0, #1
 80011d8:	e02e      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80011da:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80011de:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e0:	428b      	cmp	r3, r1
 80011e2:	d001      	beq.n	80011e8 <HAL_RCC_OscConfig+0x3e4>
        return HAL_ERROR;
 80011e4:	2001      	movs	r0, #1
 80011e6:	e027      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80011ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80011ee:	4013      	ands	r3, r2
 80011f0:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80011f4:	d001      	beq.n	80011fa <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 80011f6:	2001      	movs	r0, #1
 80011f8:	e01e      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80011fa:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80011fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001200:	085b      	lsrs	r3, r3, #1
 8001202:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001204:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001208:	d001      	beq.n	800120e <HAL_RCC_OscConfig+0x40a>
        return HAL_ERROR;
 800120a:	2001      	movs	r0, #1
 800120c:	e014      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800120e:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 8001212:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001214:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8001218:	d001      	beq.n	800121e <HAL_RCC_OscConfig+0x41a>
        return HAL_ERROR;
 800121a:	2001      	movs	r0, #1
 800121c:	e00c      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800121e:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001222:	6b23      	ldr	r3, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001224:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8001228:	d00a      	beq.n	8001240 <HAL_RCC_OscConfig+0x43c>
        return HAL_ERROR;
 800122a:	2001      	movs	r0, #1
 800122c:	e004      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
    return HAL_ERROR;
 800122e:	2001      	movs	r0, #1
}
 8001230:	4770      	bx	lr
        return HAL_ERROR;
 8001232:	2001      	movs	r0, #1
 8001234:	e000      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
  return HAL_OK;
 8001236:	2000      	movs	r0, #0
}
 8001238:	b002      	add	sp, #8
 800123a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800123c:	2001      	movs	r0, #1
 800123e:	e7fb      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
  return HAL_OK;
 8001240:	2000      	movs	r0, #0
 8001242:	e7f9      	b.n	8001238 <HAL_RCC_OscConfig+0x434>
 8001244:	40023800 	.word	0x40023800

08001248 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b04      	cmp	r3, #4
 8001252:	d044      	beq.n	80012de <HAL_RCC_GetSysClockFreq+0x96>
 8001254:	2b08      	cmp	r3, #8
 8001256:	d001      	beq.n	800125c <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001258:	4823      	ldr	r0, [pc, #140]	; (80012e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800125a:	4770      	bx	lr
{
 800125c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001260:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800126e:	d013      	beq.n	8001298 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001272:	6859      	ldr	r1, [r3, #4]
 8001274:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001278:	2300      	movs	r3, #0
 800127a:	481c      	ldr	r0, [pc, #112]	; (80012ec <HAL_RCC_GetSysClockFreq+0xa4>)
 800127c:	fba1 0100 	umull	r0, r1, r1, r0
 8001280:	f7ff f82e 	bl	80002e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800128c:	3301      	adds	r3, #1
 800128e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001290:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001294:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80012a0:	461e      	mov	r6, r3
 80012a2:	2700      	movs	r7, #0
 80012a4:	015c      	lsls	r4, r3, #5
 80012a6:	2500      	movs	r5, #0
 80012a8:	1ae4      	subs	r4, r4, r3
 80012aa:	eb65 0507 	sbc.w	r5, r5, r7
 80012ae:	01a9      	lsls	r1, r5, #6
 80012b0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80012b4:	01a0      	lsls	r0, r4, #6
 80012b6:	1b00      	subs	r0, r0, r4
 80012b8:	eb61 0105 	sbc.w	r1, r1, r5
 80012bc:	00cb      	lsls	r3, r1, #3
 80012be:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80012c2:	00c4      	lsls	r4, r0, #3
 80012c4:	19a0      	adds	r0, r4, r6
 80012c6:	eb43 0107 	adc.w	r1, r3, r7
 80012ca:	028b      	lsls	r3, r1, #10
 80012cc:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80012d0:	0284      	lsls	r4, r0, #10
 80012d2:	4620      	mov	r0, r4
 80012d4:	4619      	mov	r1, r3
 80012d6:	2300      	movs	r3, #0
 80012d8:	f7ff f802 	bl	80002e0 <__aeabi_uldivmod>
 80012dc:	e7d2      	b.n	8001284 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 80012de:	4803      	ldr	r0, [pc, #12]	; (80012ec <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	00f42400 	.word	0x00f42400
 80012ec:	017d7840 	.word	0x017d7840

080012f0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80012f0:	2800      	cmp	r0, #0
 80012f2:	f000 80a3 	beq.w	800143c <HAL_RCC_ClockConfig+0x14c>
{
 80012f6:	b570      	push	{r4, r5, r6, lr}
 80012f8:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012fa:	4b52      	ldr	r3, [pc, #328]	; (8001444 <HAL_RCC_ClockConfig+0x154>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	428b      	cmp	r3, r1
 8001304:	d20c      	bcs.n	8001320 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001306:	4a4f      	ldr	r2, [pc, #316]	; (8001444 <HAL_RCC_ClockConfig+0x154>)
 8001308:	6813      	ldr	r3, [r2, #0]
 800130a:	f023 030f 	bic.w	r3, r3, #15
 800130e:	430b      	orrs	r3, r1
 8001310:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001312:	6813      	ldr	r3, [r2, #0]
 8001314:	f003 030f 	and.w	r3, r3, #15
 8001318:	428b      	cmp	r3, r1
 800131a:	d001      	beq.n	8001320 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 800131c:	2001      	movs	r0, #1
}
 800131e:	bd70      	pop	{r4, r5, r6, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	f013 0f02 	tst.w	r3, #2
 8001326:	d017      	beq.n	8001358 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001328:	f013 0f04 	tst.w	r3, #4
 800132c:	d004      	beq.n	8001338 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800132e:	4a46      	ldr	r2, [pc, #280]	; (8001448 <HAL_RCC_ClockConfig+0x158>)
 8001330:	6893      	ldr	r3, [r2, #8]
 8001332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001336:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	f013 0f08 	tst.w	r3, #8
 800133e:	d004      	beq.n	800134a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001340:	4a41      	ldr	r2, [pc, #260]	; (8001448 <HAL_RCC_ClockConfig+0x158>)
 8001342:	6893      	ldr	r3, [r2, #8]
 8001344:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001348:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800134a:	4a3f      	ldr	r2, [pc, #252]	; (8001448 <HAL_RCC_ClockConfig+0x158>)
 800134c:	6893      	ldr	r3, [r2, #8]
 800134e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001352:	68a0      	ldr	r0, [r4, #8]
 8001354:	4303      	orrs	r3, r0
 8001356:	6093      	str	r3, [r2, #8]
 8001358:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	f013 0f01 	tst.w	r3, #1
 8001360:	d031      	beq.n	80013c6 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001362:	6863      	ldr	r3, [r4, #4]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d020      	beq.n	80013aa <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001368:	2b02      	cmp	r3, #2
 800136a:	d025      	beq.n	80013b8 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	4a36      	ldr	r2, [pc, #216]	; (8001448 <HAL_RCC_ClockConfig+0x158>)
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	f012 0f02 	tst.w	r2, #2
 8001374:	d064      	beq.n	8001440 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001376:	4934      	ldr	r1, [pc, #208]	; (8001448 <HAL_RCC_ClockConfig+0x158>)
 8001378:	688a      	ldr	r2, [r1, #8]
 800137a:	f022 0203 	bic.w	r2, r2, #3
 800137e:	4313      	orrs	r3, r2
 8001380:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001382:	f7ff fba5 	bl	8000ad0 <HAL_GetTick>
 8001386:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001388:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <HAL_RCC_ClockConfig+0x158>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	6862      	ldr	r2, [r4, #4]
 8001392:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001396:	d016      	beq.n	80013c6 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001398:	f7ff fb9a 	bl	8000ad0 <HAL_GetTick>
 800139c:	1b80      	subs	r0, r0, r6
 800139e:	f241 3388 	movw	r3, #5000	; 0x1388
 80013a2:	4298      	cmp	r0, r3
 80013a4:	d9f0      	bls.n	8001388 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 80013a6:	2003      	movs	r0, #3
 80013a8:	e7b9      	b.n	800131e <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013aa:	4a27      	ldr	r2, [pc, #156]	; (8001448 <HAL_RCC_ClockConfig+0x158>)
 80013ac:	6812      	ldr	r2, [r2, #0]
 80013ae:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80013b2:	d1e0      	bne.n	8001376 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80013b4:	2001      	movs	r0, #1
 80013b6:	e7b2      	b.n	800131e <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b8:	4a23      	ldr	r2, [pc, #140]	; (8001448 <HAL_RCC_ClockConfig+0x158>)
 80013ba:	6812      	ldr	r2, [r2, #0]
 80013bc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80013c0:	d1d9      	bne.n	8001376 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80013c2:	2001      	movs	r0, #1
 80013c4:	e7ab      	b.n	800131e <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <HAL_RCC_ClockConfig+0x154>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	42ab      	cmp	r3, r5
 80013d0:	d90c      	bls.n	80013ec <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d2:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <HAL_RCC_ClockConfig+0x154>)
 80013d4:	6813      	ldr	r3, [r2, #0]
 80013d6:	f023 030f 	bic.w	r3, r3, #15
 80013da:	432b      	orrs	r3, r5
 80013dc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013de:	6813      	ldr	r3, [r2, #0]
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	42ab      	cmp	r3, r5
 80013e6:	d001      	beq.n	80013ec <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 80013e8:	2001      	movs	r0, #1
 80013ea:	e798      	b.n	800131e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ec:	6823      	ldr	r3, [r4, #0]
 80013ee:	f013 0f04 	tst.w	r3, #4
 80013f2:	d006      	beq.n	8001402 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f4:	4a14      	ldr	r2, [pc, #80]	; (8001448 <HAL_RCC_ClockConfig+0x158>)
 80013f6:	6893      	ldr	r3, [r2, #8]
 80013f8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80013fc:	68e1      	ldr	r1, [r4, #12]
 80013fe:	430b      	orrs	r3, r1
 8001400:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001402:	6823      	ldr	r3, [r4, #0]
 8001404:	f013 0f08 	tst.w	r3, #8
 8001408:	d007      	beq.n	800141a <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800140a:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <HAL_RCC_ClockConfig+0x158>)
 800140c:	6893      	ldr	r3, [r2, #8]
 800140e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001412:	6921      	ldr	r1, [r4, #16]
 8001414:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001418:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800141a:	f7ff ff15 	bl	8001248 <HAL_RCC_GetSysClockFreq>
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_RCC_ClockConfig+0x158>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001426:	4a09      	ldr	r2, [pc, #36]	; (800144c <HAL_RCC_ClockConfig+0x15c>)
 8001428:	5cd3      	ldrb	r3, [r2, r3]
 800142a:	40d8      	lsrs	r0, r3
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_RCC_ClockConfig+0x160>)
 800142e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_RCC_ClockConfig+0x164>)
 8001432:	6818      	ldr	r0, [r3, #0]
 8001434:	f7ff fb06 	bl	8000a44 <HAL_InitTick>
  return HAL_OK;
 8001438:	2000      	movs	r0, #0
 800143a:	e770      	b.n	800131e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800143c:	2001      	movs	r0, #1
}
 800143e:	4770      	bx	lr
        return HAL_ERROR;
 8001440:	2001      	movs	r0, #1
 8001442:	e76c      	b.n	800131e <HAL_RCC_ClockConfig+0x2e>
 8001444:	40023c00 	.word	0x40023c00
 8001448:	40023800 	.word	0x40023800
 800144c:	08002bd8 	.word	0x08002bd8
 8001450:	20000000 	.word	0x20000000
 8001454:	20000008 	.word	0x20000008

08001458 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001458:	4b01      	ldr	r3, [pc, #4]	; (8001460 <HAL_RCC_GetHCLKFreq+0x8>)
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000000 	.word	0x20000000

08001464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001464:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001466:	f7ff fff7 	bl	8001458 <HAL_RCC_GetHCLKFreq>
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <HAL_RCC_GetPCLK1Freq+0x18>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001472:	4a03      	ldr	r2, [pc, #12]	; (8001480 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001474:	5cd3      	ldrb	r3, [r2, r3]
}
 8001476:	40d8      	lsrs	r0, r3
 8001478:	bd08      	pop	{r3, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	08002be8 	.word	0x08002be8

08001484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001484:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001486:	f7ff ffe7 	bl	8001458 <HAL_RCC_GetHCLKFreq>
 800148a:	4b04      	ldr	r3, [pc, #16]	; (800149c <HAL_RCC_GetPCLK2Freq+0x18>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001492:	4a03      	ldr	r2, [pc, #12]	; (80014a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001494:	5cd3      	ldrb	r3, [r2, r3]
}
 8001496:	40d8      	lsrs	r0, r3
 8001498:	bd08      	pop	{r3, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	08002be8 	.word	0x08002be8

080014a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014a4:	b510      	push	{r4, lr}
 80014a6:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014a8:	6883      	ldr	r3, [r0, #8]
 80014aa:	6902      	ldr	r2, [r0, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	6942      	ldr	r2, [r0, #20]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	69c2      	ldr	r2, [r0, #28]
 80014b4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80014b6:	6801      	ldr	r1, [r0, #0]
 80014b8:	6808      	ldr	r0, [r1, #0]
 80014ba:	4a99      	ldr	r2, [pc, #612]	; (8001720 <UART_SetConfig+0x27c>)
 80014bc:	4002      	ands	r2, r0
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014c2:	6822      	ldr	r2, [r4, #0]
 80014c4:	6853      	ldr	r3, [r2, #4]
 80014c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ca:	68e1      	ldr	r1, [r4, #12]
 80014cc:	430b      	orrs	r3, r1
 80014ce:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80014d0:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 80014d2:	6a23      	ldr	r3, [r4, #32]
 80014d4:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80014d6:	6821      	ldr	r1, [r4, #0]
 80014d8:	688b      	ldr	r3, [r1, #8]
 80014da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80014de:	4313      	orrs	r3, r2
 80014e0:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014e2:	6823      	ldr	r3, [r4, #0]
 80014e4:	4a8f      	ldr	r2, [pc, #572]	; (8001724 <UART_SetConfig+0x280>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d018      	beq.n	800151c <UART_SetConfig+0x78>
 80014ea:	4a8f      	ldr	r2, [pc, #572]	; (8001728 <UART_SetConfig+0x284>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d028      	beq.n	8001542 <UART_SetConfig+0x9e>
 80014f0:	4a8e      	ldr	r2, [pc, #568]	; (800172c <UART_SetConfig+0x288>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d03d      	beq.n	8001572 <UART_SetConfig+0xce>
 80014f6:	4a8e      	ldr	r2, [pc, #568]	; (8001730 <UART_SetConfig+0x28c>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d050      	beq.n	800159e <UART_SetConfig+0xfa>
 80014fc:	4a8d      	ldr	r2, [pc, #564]	; (8001734 <UART_SetConfig+0x290>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d062      	beq.n	80015c8 <UART_SetConfig+0x124>
 8001502:	4a8d      	ldr	r2, [pc, #564]	; (8001738 <UART_SetConfig+0x294>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d077      	beq.n	80015f8 <UART_SetConfig+0x154>
 8001508:	4a8c      	ldr	r2, [pc, #560]	; (800173c <UART_SetConfig+0x298>)
 800150a:	4293      	cmp	r3, r2
 800150c:	f000 808c 	beq.w	8001628 <UART_SetConfig+0x184>
 8001510:	4a8b      	ldr	r2, [pc, #556]	; (8001740 <UART_SetConfig+0x29c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	f000 80a0 	beq.w	8001658 <UART_SetConfig+0x1b4>
 8001518:	2310      	movs	r3, #16
 800151a:	e0b6      	b.n	800168a <UART_SetConfig+0x1e6>
 800151c:	4b89      	ldr	r3, [pc, #548]	; (8001744 <UART_SetConfig+0x2a0>)
 800151e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	2b03      	cmp	r3, #3
 8001528:	d809      	bhi.n	800153e <UART_SetConfig+0x9a>
 800152a:	e8df f003 	tbb	[pc, r3]
 800152e:	0402      	.short	0x0402
 8001530:	06ad      	.short	0x06ad
 8001532:	2301      	movs	r3, #1
 8001534:	e0a9      	b.n	800168a <UART_SetConfig+0x1e6>
 8001536:	2304      	movs	r3, #4
 8001538:	e0a7      	b.n	800168a <UART_SetConfig+0x1e6>
 800153a:	2308      	movs	r3, #8
 800153c:	e0a5      	b.n	800168a <UART_SetConfig+0x1e6>
 800153e:	2310      	movs	r3, #16
 8001540:	e0a3      	b.n	800168a <UART_SetConfig+0x1e6>
 8001542:	4b80      	ldr	r3, [pc, #512]	; (8001744 <UART_SetConfig+0x2a0>)
 8001544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	2b0c      	cmp	r3, #12
 800154e:	d80e      	bhi.n	800156e <UART_SetConfig+0xca>
 8001550:	e8df f003 	tbb	[pc, r3]
 8001554:	0d0d0d07 	.word	0x0d0d0d07
 8001558:	0d0d0d09 	.word	0x0d0d0d09
 800155c:	0d0d0da9 	.word	0x0d0d0da9
 8001560:	0b          	.byte	0x0b
 8001561:	00          	.byte	0x00
 8001562:	2300      	movs	r3, #0
 8001564:	e091      	b.n	800168a <UART_SetConfig+0x1e6>
 8001566:	2304      	movs	r3, #4
 8001568:	e08f      	b.n	800168a <UART_SetConfig+0x1e6>
 800156a:	2308      	movs	r3, #8
 800156c:	e08d      	b.n	800168a <UART_SetConfig+0x1e6>
 800156e:	2310      	movs	r3, #16
 8001570:	e08b      	b.n	800168a <UART_SetConfig+0x1e6>
 8001572:	4b74      	ldr	r3, [pc, #464]	; (8001744 <UART_SetConfig+0x2a0>)
 8001574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001578:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800157c:	2b10      	cmp	r3, #16
 800157e:	d00a      	beq.n	8001596 <UART_SetConfig+0xf2>
 8001580:	d906      	bls.n	8001590 <UART_SetConfig+0xec>
 8001582:	2b20      	cmp	r3, #32
 8001584:	f000 8091 	beq.w	80016aa <UART_SetConfig+0x206>
 8001588:	2b30      	cmp	r3, #48	; 0x30
 800158a:	d106      	bne.n	800159a <UART_SetConfig+0xf6>
 800158c:	2308      	movs	r3, #8
 800158e:	e07c      	b.n	800168a <UART_SetConfig+0x1e6>
 8001590:	b91b      	cbnz	r3, 800159a <UART_SetConfig+0xf6>
 8001592:	2300      	movs	r3, #0
 8001594:	e079      	b.n	800168a <UART_SetConfig+0x1e6>
 8001596:	2304      	movs	r3, #4
 8001598:	e077      	b.n	800168a <UART_SetConfig+0x1e6>
 800159a:	2310      	movs	r3, #16
 800159c:	e075      	b.n	800168a <UART_SetConfig+0x1e6>
 800159e:	4b69      	ldr	r3, [pc, #420]	; (8001744 <UART_SetConfig+0x2a0>)
 80015a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80015a8:	2b40      	cmp	r3, #64	; 0x40
 80015aa:	d009      	beq.n	80015c0 <UART_SetConfig+0x11c>
 80015ac:	d905      	bls.n	80015ba <UART_SetConfig+0x116>
 80015ae:	2b80      	cmp	r3, #128	; 0x80
 80015b0:	d07d      	beq.n	80016ae <UART_SetConfig+0x20a>
 80015b2:	2bc0      	cmp	r3, #192	; 0xc0
 80015b4:	d106      	bne.n	80015c4 <UART_SetConfig+0x120>
 80015b6:	2308      	movs	r3, #8
 80015b8:	e067      	b.n	800168a <UART_SetConfig+0x1e6>
 80015ba:	b91b      	cbnz	r3, 80015c4 <UART_SetConfig+0x120>
 80015bc:	2300      	movs	r3, #0
 80015be:	e064      	b.n	800168a <UART_SetConfig+0x1e6>
 80015c0:	2304      	movs	r3, #4
 80015c2:	e062      	b.n	800168a <UART_SetConfig+0x1e6>
 80015c4:	2310      	movs	r3, #16
 80015c6:	e060      	b.n	800168a <UART_SetConfig+0x1e6>
 80015c8:	4b5e      	ldr	r3, [pc, #376]	; (8001744 <UART_SetConfig+0x2a0>)
 80015ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015d6:	d00b      	beq.n	80015f0 <UART_SetConfig+0x14c>
 80015d8:	d907      	bls.n	80015ea <UART_SetConfig+0x146>
 80015da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015de:	d068      	beq.n	80016b2 <UART_SetConfig+0x20e>
 80015e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015e4:	d106      	bne.n	80015f4 <UART_SetConfig+0x150>
 80015e6:	2308      	movs	r3, #8
 80015e8:	e04f      	b.n	800168a <UART_SetConfig+0x1e6>
 80015ea:	b91b      	cbnz	r3, 80015f4 <UART_SetConfig+0x150>
 80015ec:	2300      	movs	r3, #0
 80015ee:	e04c      	b.n	800168a <UART_SetConfig+0x1e6>
 80015f0:	2304      	movs	r3, #4
 80015f2:	e04a      	b.n	800168a <UART_SetConfig+0x1e6>
 80015f4:	2310      	movs	r3, #16
 80015f6:	e048      	b.n	800168a <UART_SetConfig+0x1e6>
 80015f8:	4b52      	ldr	r3, [pc, #328]	; (8001744 <UART_SetConfig+0x2a0>)
 80015fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001606:	d00b      	beq.n	8001620 <UART_SetConfig+0x17c>
 8001608:	d907      	bls.n	800161a <UART_SetConfig+0x176>
 800160a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800160e:	d052      	beq.n	80016b6 <UART_SetConfig+0x212>
 8001610:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001614:	d106      	bne.n	8001624 <UART_SetConfig+0x180>
 8001616:	2308      	movs	r3, #8
 8001618:	e037      	b.n	800168a <UART_SetConfig+0x1e6>
 800161a:	b91b      	cbnz	r3, 8001624 <UART_SetConfig+0x180>
 800161c:	2301      	movs	r3, #1
 800161e:	e034      	b.n	800168a <UART_SetConfig+0x1e6>
 8001620:	2304      	movs	r3, #4
 8001622:	e032      	b.n	800168a <UART_SetConfig+0x1e6>
 8001624:	2310      	movs	r3, #16
 8001626:	e030      	b.n	800168a <UART_SetConfig+0x1e6>
 8001628:	4b46      	ldr	r3, [pc, #280]	; (8001744 <UART_SetConfig+0x2a0>)
 800162a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001636:	d00b      	beq.n	8001650 <UART_SetConfig+0x1ac>
 8001638:	d907      	bls.n	800164a <UART_SetConfig+0x1a6>
 800163a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800163e:	d03c      	beq.n	80016ba <UART_SetConfig+0x216>
 8001640:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001644:	d106      	bne.n	8001654 <UART_SetConfig+0x1b0>
 8001646:	2308      	movs	r3, #8
 8001648:	e01f      	b.n	800168a <UART_SetConfig+0x1e6>
 800164a:	b91b      	cbnz	r3, 8001654 <UART_SetConfig+0x1b0>
 800164c:	2300      	movs	r3, #0
 800164e:	e01c      	b.n	800168a <UART_SetConfig+0x1e6>
 8001650:	2304      	movs	r3, #4
 8001652:	e01a      	b.n	800168a <UART_SetConfig+0x1e6>
 8001654:	2310      	movs	r3, #16
 8001656:	e018      	b.n	800168a <UART_SetConfig+0x1e6>
 8001658:	4b3a      	ldr	r3, [pc, #232]	; (8001744 <UART_SetConfig+0x2a0>)
 800165a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001662:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001666:	d00b      	beq.n	8001680 <UART_SetConfig+0x1dc>
 8001668:	d907      	bls.n	800167a <UART_SetConfig+0x1d6>
 800166a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800166e:	d026      	beq.n	80016be <UART_SetConfig+0x21a>
 8001670:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001674:	d106      	bne.n	8001684 <UART_SetConfig+0x1e0>
 8001676:	2308      	movs	r3, #8
 8001678:	e007      	b.n	800168a <UART_SetConfig+0x1e6>
 800167a:	b91b      	cbnz	r3, 8001684 <UART_SetConfig+0x1e0>
 800167c:	2300      	movs	r3, #0
 800167e:	e004      	b.n	800168a <UART_SetConfig+0x1e6>
 8001680:	2304      	movs	r3, #4
 8001682:	e002      	b.n	800168a <UART_SetConfig+0x1e6>
 8001684:	2310      	movs	r3, #16
 8001686:	e000      	b.n	800168a <UART_SetConfig+0x1e6>
 8001688:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800168a:	69e2      	ldr	r2, [r4, #28]
 800168c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001690:	d017      	beq.n	80016c2 <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001692:	2b08      	cmp	r3, #8
 8001694:	f200 80b3 	bhi.w	80017fe <UART_SetConfig+0x35a>
 8001698:	e8df f003 	tbb	[pc, r3]
 800169c:	b1958b76 	.word	0xb1958b76
 80016a0:	b1b1b19e 	.word	0xb1b1b19e
 80016a4:	a8          	.byte	0xa8
 80016a5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016a6:	2302      	movs	r3, #2
 80016a8:	e7ef      	b.n	800168a <UART_SetConfig+0x1e6>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e7ed      	b.n	800168a <UART_SetConfig+0x1e6>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e7eb      	b.n	800168a <UART_SetConfig+0x1e6>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e7e9      	b.n	800168a <UART_SetConfig+0x1e6>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e7e7      	b.n	800168a <UART_SetConfig+0x1e6>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e7e5      	b.n	800168a <UART_SetConfig+0x1e6>
 80016be:	2302      	movs	r3, #2
 80016c0:	e7e3      	b.n	800168a <UART_SetConfig+0x1e6>
    switch (clocksource)
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d85d      	bhi.n	8001782 <UART_SetConfig+0x2de>
 80016c6:	e8df f003 	tbb	[pc, r3]
 80016ca:	1f05      	.short	0x1f05
 80016cc:	5c485c3f 	.word	0x5c485c3f
 80016d0:	5c5c      	.short	0x5c5c
 80016d2:	53          	.byte	0x53
 80016d3:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80016d4:	f7ff fec6 	bl	8001464 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80016d8:	6862      	ldr	r2, [r4, #4]
 80016da:	0853      	lsrs	r3, r2, #1
 80016dc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80016e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80016e4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016e6:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80016e8:	f1a3 0110 	sub.w	r1, r3, #16
 80016ec:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80016f0:	4291      	cmp	r1, r2
 80016f2:	f200 8087 	bhi.w	8001804 <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80016fc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001700:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8001702:	6822      	ldr	r2, [r4, #0]
 8001704:	60d3      	str	r3, [r2, #12]
 8001706:	e050      	b.n	80017aa <UART_SetConfig+0x306>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001708:	f7ff febc 	bl	8001484 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800170c:	6862      	ldr	r2, [r4, #4]
 800170e:	0853      	lsrs	r3, r2, #1
 8001710:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001714:	fbb3 f3f2 	udiv	r3, r3, r2
 8001718:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800171a:	2000      	movs	r0, #0
        break;
 800171c:	e7e4      	b.n	80016e8 <UART_SetConfig+0x244>
 800171e:	bf00      	nop
 8001720:	efff69f3 	.word	0xefff69f3
 8001724:	40011000 	.word	0x40011000
 8001728:	40004400 	.word	0x40004400
 800172c:	40004800 	.word	0x40004800
 8001730:	40004c00 	.word	0x40004c00
 8001734:	40005000 	.word	0x40005000
 8001738:	40011400 	.word	0x40011400
 800173c:	40007800 	.word	0x40007800
 8001740:	40007c00 	.word	0x40007c00
 8001744:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001748:	6862      	ldr	r2, [r4, #4]
 800174a:	4b30      	ldr	r3, [pc, #192]	; (800180c <UART_SetConfig+0x368>)
 800174c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001750:	fbb3 f3f2 	udiv	r3, r3, r2
 8001754:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001756:	2000      	movs	r0, #0
        break;
 8001758:	e7c6      	b.n	80016e8 <UART_SetConfig+0x244>
        pclk = HAL_RCC_GetSysClockFreq();
 800175a:	f7ff fd75 	bl	8001248 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800175e:	6862      	ldr	r2, [r4, #4]
 8001760:	0853      	lsrs	r3, r2, #1
 8001762:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001766:	fbb3 f3f2 	udiv	r3, r3, r2
 800176a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800176c:	2000      	movs	r0, #0
        break;
 800176e:	e7bb      	b.n	80016e8 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001770:	6862      	ldr	r2, [r4, #4]
 8001772:	0853      	lsrs	r3, r2, #1
 8001774:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001778:	fbb3 f3f2 	udiv	r3, r3, r2
 800177c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800177e:	2000      	movs	r0, #0
        break;
 8001780:	e7b2      	b.n	80016e8 <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 8001782:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001784:	2300      	movs	r3, #0
 8001786:	e7af      	b.n	80016e8 <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001788:	f7ff fe6c 	bl	8001464 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800178c:	6862      	ldr	r2, [r4, #4]
 800178e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001792:	fbb3 f3f2 	udiv	r3, r3, r2
 8001796:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001798:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800179a:	f1a3 0110 	sub.w	r1, r3, #16
 800179e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80017a2:	4291      	cmp	r1, r2
 80017a4:	d830      	bhi.n	8001808 <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 80017a6:	6822      	ldr	r2, [r4, #0]
 80017a8:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80017ae:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80017b0:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80017b2:	f7ff fe67 	bl	8001484 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80017b6:	6862      	ldr	r2, [r4, #4]
 80017b8:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80017bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80017c0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80017c2:	2000      	movs	r0, #0
        break;
 80017c4:	e7e9      	b.n	800179a <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80017c6:	6862      	ldr	r2, [r4, #4]
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <UART_SetConfig+0x36c>)
 80017ca:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80017ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80017d2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80017d4:	2000      	movs	r0, #0
        break;
 80017d6:	e7e0      	b.n	800179a <UART_SetConfig+0x2f6>
        pclk = HAL_RCC_GetSysClockFreq();
 80017d8:	f7ff fd36 	bl	8001248 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80017dc:	6862      	ldr	r2, [r4, #4]
 80017de:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80017e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80017e6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80017e8:	2000      	movs	r0, #0
        break;
 80017ea:	e7d6      	b.n	800179a <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80017ec:	6862      	ldr	r2, [r4, #4]
 80017ee:	0853      	lsrs	r3, r2, #1
 80017f0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80017f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80017f8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80017fa:	2000      	movs	r0, #0
        break;
 80017fc:	e7cd      	b.n	800179a <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 80017fe:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001800:	2300      	movs	r3, #0
 8001802:	e7ca      	b.n	800179a <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 8001804:	2001      	movs	r0, #1
 8001806:	e7d0      	b.n	80017aa <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 8001808:	2001      	movs	r0, #1
 800180a:	e7ce      	b.n	80017aa <UART_SetConfig+0x306>
 800180c:	01e84800 	.word	0x01e84800
 8001810:	00f42400 	.word	0x00f42400

08001814 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001814:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001816:	f013 0f01 	tst.w	r3, #1
 800181a:	d006      	beq.n	800182a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800181c:	6802      	ldr	r2, [r0, #0]
 800181e:	6853      	ldr	r3, [r2, #4]
 8001820:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001824:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001826:	430b      	orrs	r3, r1
 8001828:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800182a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800182c:	f013 0f02 	tst.w	r3, #2
 8001830:	d006      	beq.n	8001840 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001832:	6802      	ldr	r2, [r0, #0]
 8001834:	6853      	ldr	r3, [r2, #4]
 8001836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800183c:	430b      	orrs	r3, r1
 800183e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001840:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001842:	f013 0f04 	tst.w	r3, #4
 8001846:	d006      	beq.n	8001856 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001848:	6802      	ldr	r2, [r0, #0]
 800184a:	6853      	ldr	r3, [r2, #4]
 800184c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001850:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001852:	430b      	orrs	r3, r1
 8001854:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001856:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001858:	f013 0f08 	tst.w	r3, #8
 800185c:	d006      	beq.n	800186c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800185e:	6802      	ldr	r2, [r0, #0]
 8001860:	6853      	ldr	r3, [r2, #4]
 8001862:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001866:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001868:	430b      	orrs	r3, r1
 800186a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800186c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800186e:	f013 0f10 	tst.w	r3, #16
 8001872:	d006      	beq.n	8001882 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001874:	6802      	ldr	r2, [r0, #0]
 8001876:	6893      	ldr	r3, [r2, #8]
 8001878:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800187c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800187e:	430b      	orrs	r3, r1
 8001880:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001882:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001884:	f013 0f20 	tst.w	r3, #32
 8001888:	d006      	beq.n	8001898 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800188a:	6802      	ldr	r2, [r0, #0]
 800188c:	6893      	ldr	r3, [r2, #8]
 800188e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001892:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001894:	430b      	orrs	r3, r1
 8001896:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001898:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800189a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800189e:	d00a      	beq.n	80018b6 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80018a0:	6802      	ldr	r2, [r0, #0]
 80018a2:	6853      	ldr	r3, [r2, #4]
 80018a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80018a8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80018aa:	430b      	orrs	r3, r1
 80018ac:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80018ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018b4:	d00b      	beq.n	80018ce <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80018b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018bc:	d006      	beq.n	80018cc <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80018be:	6802      	ldr	r2, [r0, #0]
 80018c0:	6853      	ldr	r3, [r2, #4]
 80018c2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80018c6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80018c8:	430b      	orrs	r3, r1
 80018ca:	6053      	str	r3, [r2, #4]
  }
}
 80018cc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80018ce:	6802      	ldr	r2, [r0, #0]
 80018d0:	6853      	ldr	r3, [r2, #4]
 80018d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80018d6:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80018d8:	430b      	orrs	r3, r1
 80018da:	6053      	str	r3, [r2, #4]
 80018dc:	e7eb      	b.n	80018b6 <UART_AdvFeatureConfig+0xa2>

080018de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80018de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018e2:	4604      	mov	r4, r0
 80018e4:	460f      	mov	r7, r1
 80018e6:	4616      	mov	r6, r2
 80018e8:	4698      	mov	r8, r3
 80018ea:	9d06      	ldr	r5, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	ea37 0303 	bics.w	r3, r7, r3
 80018f4:	bf0c      	ite	eq
 80018f6:	2301      	moveq	r3, #1
 80018f8:	2300      	movne	r3, #0
 80018fa:	42b3      	cmp	r3, r6
 80018fc:	d13a      	bne.n	8001974 <UART_WaitOnFlagUntilTimeout+0x96>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018fe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001902:	d0f3      	beq.n	80018ec <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001904:	f7ff f8e4 	bl	8000ad0 <HAL_GetTick>
 8001908:	eba0 0008 	sub.w	r0, r0, r8
 800190c:	42a8      	cmp	r0, r5
 800190e:	d81f      	bhi.n	8001950 <UART_WaitOnFlagUntilTimeout+0x72>
 8001910:	b1f5      	cbz	r5, 8001950 <UART_WaitOnFlagUntilTimeout+0x72>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	f012 0f04 	tst.w	r2, #4
 800191a:	d0e7      	beq.n	80018ec <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800191c:	69da      	ldr	r2, [r3, #28]
 800191e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001922:	d0e3      	beq.n	80018ec <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001928:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800192a:	6822      	ldr	r2, [r4, #0]
 800192c:	6813      	ldr	r3, [r2, #0]
 800192e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001932:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001934:	6822      	ldr	r2, [r4, #0]
 8001936:	6893      	ldr	r3, [r2, #8]
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 800193e:	2320      	movs	r3, #32
 8001940:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001942:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001944:	67e3      	str	r3, [r4, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001946:	2300      	movs	r3, #0
 8001948:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800194c:	2003      	movs	r0, #3
 800194e:	e012      	b.n	8001976 <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001950:	6822      	ldr	r2, [r4, #0]
 8001952:	6813      	ldr	r3, [r2, #0]
 8001954:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001958:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800195a:	6822      	ldr	r2, [r4, #0]
 800195c:	6893      	ldr	r3, [r2, #8]
 800195e:	f023 0301 	bic.w	r3, r3, #1
 8001962:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001964:	2320      	movs	r3, #32
 8001966:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001968:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800196a:	2300      	movs	r3, #0
 800196c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        return HAL_TIMEOUT;
 8001970:	2003      	movs	r0, #3
 8001972:	e000      	b.n	8001976 <UART_WaitOnFlagUntilTimeout+0x98>
        }
      }
    }
  }
  return HAL_OK;
 8001974:	2000      	movs	r0, #0
}
 8001976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800197a <HAL_UART_Transmit>:
{
 800197a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001982:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001984:	2b20      	cmp	r3, #32
 8001986:	d159      	bne.n	8001a3c <HAL_UART_Transmit+0xc2>
 8001988:	4604      	mov	r4, r0
 800198a:	460d      	mov	r5, r1
 800198c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800198e:	fab2 f382 	clz	r3, r2
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2900      	cmp	r1, #0
 8001996:	bf08      	it	eq
 8001998:	2301      	moveq	r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d153      	bne.n	8001a46 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 800199e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d051      	beq.n	8001a4a <HAL_UART_Transmit+0xd0>
 80019a6:	2301      	movs	r3, #1
 80019a8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019b0:	2321      	movs	r3, #33	; 0x21
 80019b2:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 80019b4:	f7ff f88c 	bl	8000ad0 <HAL_GetTick>
 80019b8:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80019ba:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80019be:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019c2:	68a3      	ldr	r3, [r4, #8]
 80019c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019c8:	d005      	beq.n	80019d6 <HAL_UART_Transmit+0x5c>
      pdata16bits = NULL;
 80019ca:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80019ce:	2300      	movs	r3, #0
 80019d0:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 80019d4:	e013      	b.n	80019fe <HAL_UART_Transmit+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019d6:	6923      	ldr	r3, [r4, #16]
 80019d8:	b113      	cbz	r3, 80019e0 <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 80019da:	f04f 0800 	mov.w	r8, #0
 80019de:	e7f6      	b.n	80019ce <HAL_UART_Transmit+0x54>
      pdata16bits = (uint16_t *) pData;
 80019e0:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80019e2:	2500      	movs	r5, #0
 80019e4:	e7f3      	b.n	80019ce <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019e6:	f838 3b02 	ldrh.w	r3, [r8], #2
 80019ea:	6822      	ldr	r2, [r4, #0]
 80019ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f0:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80019f2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80019fe:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	b173      	cbz	r3, 8001a24 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a06:	9600      	str	r6, [sp, #0]
 8001a08:	463b      	mov	r3, r7
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2180      	movs	r1, #128	; 0x80
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f7ff ff65 	bl	80018de <UART_WaitOnFlagUntilTimeout>
 8001a14:	b9d8      	cbnz	r0, 8001a4e <HAL_UART_Transmit+0xd4>
      if (pdata8bits == NULL)
 8001a16:	2d00      	cmp	r5, #0
 8001a18:	d0e5      	beq.n	80019e6 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a1a:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
 8001a22:	e7e6      	b.n	80019f2 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a24:	9600      	str	r6, [sp, #0]
 8001a26:	463b      	mov	r3, r7
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2140      	movs	r1, #64	; 0x40
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f7ff ff56 	bl	80018de <UART_WaitOnFlagUntilTimeout>
 8001a32:	4603      	mov	r3, r0
 8001a34:	b968      	cbnz	r0, 8001a52 <HAL_UART_Transmit+0xd8>
    huart->gState = HAL_UART_STATE_READY;
 8001a36:	2220      	movs	r2, #32
 8001a38:	6762      	str	r2, [r4, #116]	; 0x74
    return HAL_OK;
 8001a3a:	e000      	b.n	8001a3e <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 8001a3c:	2302      	movs	r3, #2
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	b002      	add	sp, #8
 8001a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e7f9      	b.n	8001a3e <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e7f7      	b.n	8001a3e <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e7f5      	b.n	8001a3e <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e7f3      	b.n	8001a3e <HAL_UART_Transmit+0xc4>

08001a56 <HAL_UART_Receive>:
{
 8001a56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a5e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001a60:	2b20      	cmp	r3, #32
 8001a62:	d17f      	bne.n	8001b64 <HAL_UART_Receive+0x10e>
 8001a64:	4604      	mov	r4, r0
 8001a66:	460d      	mov	r5, r1
 8001a68:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001a6a:	fab2 f382 	clz	r3, r2
 8001a6e:	095b      	lsrs	r3, r3, #5
 8001a70:	2900      	cmp	r1, #0
 8001a72:	bf08      	it	eq
 8001a74:	2301      	moveq	r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d178      	bne.n	8001b6c <HAL_UART_Receive+0x116>
    __HAL_LOCK(huart);
 8001a7a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d076      	beq.n	8001b70 <HAL_UART_Receive+0x11a>
 8001a82:	2301      	movs	r3, #1
 8001a84:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a8c:	2322      	movs	r3, #34	; 0x22
 8001a8e:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8001a90:	f7ff f81e 	bl	8000ad0 <HAL_GetTick>
 8001a94:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8001a96:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8001a9a:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001a9e:	68a3      	ldr	r3, [r4, #8]
 8001aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa4:	d006      	beq.n	8001ab4 <HAL_UART_Receive+0x5e>
 8001aa6:	b9a3      	cbnz	r3, 8001ad2 <HAL_UART_Receive+0x7c>
 8001aa8:	6922      	ldr	r2, [r4, #16]
 8001aaa:	b972      	cbnz	r2, 8001aca <HAL_UART_Receive+0x74>
 8001aac:	22ff      	movs	r2, #255	; 0xff
 8001aae:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001ab2:	e014      	b.n	8001ade <HAL_UART_Receive+0x88>
 8001ab4:	6922      	ldr	r2, [r4, #16]
 8001ab6:	b922      	cbnz	r2, 8001ac2 <HAL_UART_Receive+0x6c>
 8001ab8:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001abc:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001ac0:	e00d      	b.n	8001ade <HAL_UART_Receive+0x88>
 8001ac2:	22ff      	movs	r2, #255	; 0xff
 8001ac4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001ac8:	e009      	b.n	8001ade <HAL_UART_Receive+0x88>
 8001aca:	227f      	movs	r2, #127	; 0x7f
 8001acc:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001ad0:	e005      	b.n	8001ade <HAL_UART_Receive+0x88>
 8001ad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ad6:	d00d      	beq.n	8001af4 <HAL_UART_Receive+0x9e>
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001ade:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae6:	d00f      	beq.n	8001b08 <HAL_UART_Receive+0xb2>
      pdata16bits = NULL;
 8001ae8:	f04f 0900 	mov.w	r9, #0
    __HAL_UNLOCK(huart);
 8001aec:	2300      	movs	r3, #0
 8001aee:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->RxXferCount > 0U)
 8001af2:	e01d      	b.n	8001b30 <HAL_UART_Receive+0xda>
    UART_MASK_COMPUTATION(huart);
 8001af4:	6922      	ldr	r2, [r4, #16]
 8001af6:	b91a      	cbnz	r2, 8001b00 <HAL_UART_Receive+0xaa>
 8001af8:	227f      	movs	r2, #127	; 0x7f
 8001afa:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001afe:	e7ee      	b.n	8001ade <HAL_UART_Receive+0x88>
 8001b00:	223f      	movs	r2, #63	; 0x3f
 8001b02:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001b06:	e7ea      	b.n	8001ade <HAL_UART_Receive+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b08:	6923      	ldr	r3, [r4, #16]
 8001b0a:	b113      	cbz	r3, 8001b12 <HAL_UART_Receive+0xbc>
      pdata16bits = NULL;
 8001b0c:	f04f 0900 	mov.w	r9, #0
 8001b10:	e7ec      	b.n	8001aec <HAL_UART_Receive+0x96>
      pdata16bits = (uint16_t *) pData;
 8001b12:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8001b14:	2500      	movs	r5, #0
 8001b16:	e7e9      	b.n	8001aec <HAL_UART_Receive+0x96>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	ea08 0303 	and.w	r3, r8, r3
 8001b20:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 8001b24:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8001b30:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	b18b      	cbz	r3, 8001b5c <HAL_UART_Receive+0x106>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001b38:	9600      	str	r6, [sp, #0]
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2120      	movs	r1, #32
 8001b40:	4620      	mov	r0, r4
 8001b42:	f7ff fecc 	bl	80018de <UART_WaitOnFlagUntilTimeout>
 8001b46:	b9a8      	cbnz	r0, 8001b74 <HAL_UART_Receive+0x11e>
      if (pdata8bits == NULL)
 8001b48:	2d00      	cmp	r5, #0
 8001b4a:	d0e5      	beq.n	8001b18 <HAL_UART_Receive+0xc2>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b50:	fa5f f388 	uxtb.w	r3, r8
 8001b54:	4013      	ands	r3, r2
 8001b56:	f805 3b01 	strb.w	r3, [r5], #1
 8001b5a:	e7e3      	b.n	8001b24 <HAL_UART_Receive+0xce>
    huart->RxState = HAL_UART_STATE_READY;
 8001b5c:	2320      	movs	r3, #32
 8001b5e:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8001b60:	2000      	movs	r0, #0
 8001b62:	e000      	b.n	8001b66 <HAL_UART_Receive+0x110>
    return HAL_BUSY;
 8001b64:	2002      	movs	r0, #2
}
 8001b66:	b003      	add	sp, #12
 8001b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	e7fa      	b.n	8001b66 <HAL_UART_Receive+0x110>
    __HAL_LOCK(huart);
 8001b70:	2002      	movs	r0, #2
 8001b72:	e7f8      	b.n	8001b66 <HAL_UART_Receive+0x110>
        return HAL_TIMEOUT;
 8001b74:	2003      	movs	r0, #3
 8001b76:	e7f6      	b.n	8001b66 <HAL_UART_Receive+0x110>

08001b78 <UART_CheckIdleState>:
{
 8001b78:	b530      	push	{r4, r5, lr}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001b82:	f7fe ffa5 	bl	8000ad0 <HAL_GetTick>
 8001b86:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f013 0f08 	tst.w	r3, #8
 8001b90:	d10c      	bne.n	8001bac <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f013 0f04 	tst.w	r3, #4
 8001b9a:	d115      	bne.n	8001bc8 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001ba0:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001ba8:	b003      	add	sp, #12
 8001baa:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001bac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f7ff fe8f 	bl	80018de <UART_WaitOnFlagUntilTimeout>
 8001bc0:	2800      	cmp	r0, #0
 8001bc2:	d0e6      	beq.n	8001b92 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	e7ef      	b.n	8001ba8 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	462b      	mov	r3, r5
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f7ff fe81 	bl	80018de <UART_WaitOnFlagUntilTimeout>
 8001bdc:	2800      	cmp	r0, #0
 8001bde:	d0dd      	beq.n	8001b9c <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8001be0:	2003      	movs	r0, #3
 8001be2:	e7e1      	b.n	8001ba8 <UART_CheckIdleState+0x30>

08001be4 <HAL_UART_Init>:
  if (huart == NULL)
 8001be4:	b368      	cbz	r0, 8001c42 <HAL_UART_Init+0x5e>
{
 8001be6:	b510      	push	{r4, lr}
 8001be8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001bea:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001bec:	b303      	cbz	r3, 8001c30 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001bee:	2324      	movs	r3, #36	; 0x24
 8001bf0:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001bf2:	6822      	ldr	r2, [r4, #0]
 8001bf4:	6813      	ldr	r3, [r2, #0]
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	f7ff fc51 	bl	80014a4 <UART_SetConfig>
 8001c02:	2801      	cmp	r0, #1
 8001c04:	d013      	beq.n	8001c2e <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c08:	b9bb      	cbnz	r3, 8001c3a <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c0a:	6822      	ldr	r2, [r4, #0]
 8001c0c:	6853      	ldr	r3, [r2, #4]
 8001c0e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001c12:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c14:	6822      	ldr	r2, [r4, #0]
 8001c16:	6893      	ldr	r3, [r2, #8]
 8001c18:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001c1c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001c1e:	6822      	ldr	r2, [r4, #0]
 8001c20:	6813      	ldr	r3, [r2, #0]
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f7ff ffa5 	bl	8001b78 <UART_CheckIdleState>
}
 8001c2e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001c30:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001c34:	f7fe fe3a 	bl	80008ac <HAL_UART_MspInit>
 8001c38:	e7d9      	b.n	8001bee <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	f7ff fdea 	bl	8001814 <UART_AdvFeatureConfig>
 8001c40:	e7e3      	b.n	8001c0a <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8001c42:	2001      	movs	r0, #1
}
 8001c44:	4770      	bx	lr
	...

08001c48 <__sflush_r>:
 8001c48:	898a      	ldrh	r2, [r1, #12]
 8001c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c4e:	4605      	mov	r5, r0
 8001c50:	0710      	lsls	r0, r2, #28
 8001c52:	460c      	mov	r4, r1
 8001c54:	d458      	bmi.n	8001d08 <__sflush_r+0xc0>
 8001c56:	684b      	ldr	r3, [r1, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	dc05      	bgt.n	8001c68 <__sflush_r+0x20>
 8001c5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	dc02      	bgt.n	8001c68 <__sflush_r+0x20>
 8001c62:	2000      	movs	r0, #0
 8001c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c6a:	2e00      	cmp	r6, #0
 8001c6c:	d0f9      	beq.n	8001c62 <__sflush_r+0x1a>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c74:	682f      	ldr	r7, [r5, #0]
 8001c76:	6a21      	ldr	r1, [r4, #32]
 8001c78:	602b      	str	r3, [r5, #0]
 8001c7a:	d032      	beq.n	8001ce2 <__sflush_r+0x9a>
 8001c7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c7e:	89a3      	ldrh	r3, [r4, #12]
 8001c80:	075a      	lsls	r2, r3, #29
 8001c82:	d505      	bpl.n	8001c90 <__sflush_r+0x48>
 8001c84:	6863      	ldr	r3, [r4, #4]
 8001c86:	1ac0      	subs	r0, r0, r3
 8001c88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c8a:	b10b      	cbz	r3, 8001c90 <__sflush_r+0x48>
 8001c8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c8e:	1ac0      	subs	r0, r0, r3
 8001c90:	2300      	movs	r3, #0
 8001c92:	4602      	mov	r2, r0
 8001c94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c96:	6a21      	ldr	r1, [r4, #32]
 8001c98:	4628      	mov	r0, r5
 8001c9a:	47b0      	blx	r6
 8001c9c:	1c43      	adds	r3, r0, #1
 8001c9e:	89a3      	ldrh	r3, [r4, #12]
 8001ca0:	d106      	bne.n	8001cb0 <__sflush_r+0x68>
 8001ca2:	6829      	ldr	r1, [r5, #0]
 8001ca4:	291d      	cmp	r1, #29
 8001ca6:	d848      	bhi.n	8001d3a <__sflush_r+0xf2>
 8001ca8:	4a29      	ldr	r2, [pc, #164]	; (8001d50 <__sflush_r+0x108>)
 8001caa:	40ca      	lsrs	r2, r1
 8001cac:	07d6      	lsls	r6, r2, #31
 8001cae:	d544      	bpl.n	8001d3a <__sflush_r+0xf2>
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	6062      	str	r2, [r4, #4]
 8001cb4:	04d9      	lsls	r1, r3, #19
 8001cb6:	6922      	ldr	r2, [r4, #16]
 8001cb8:	6022      	str	r2, [r4, #0]
 8001cba:	d504      	bpl.n	8001cc6 <__sflush_r+0x7e>
 8001cbc:	1c42      	adds	r2, r0, #1
 8001cbe:	d101      	bne.n	8001cc4 <__sflush_r+0x7c>
 8001cc0:	682b      	ldr	r3, [r5, #0]
 8001cc2:	b903      	cbnz	r3, 8001cc6 <__sflush_r+0x7e>
 8001cc4:	6560      	str	r0, [r4, #84]	; 0x54
 8001cc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cc8:	602f      	str	r7, [r5, #0]
 8001cca:	2900      	cmp	r1, #0
 8001ccc:	d0c9      	beq.n	8001c62 <__sflush_r+0x1a>
 8001cce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cd2:	4299      	cmp	r1, r3
 8001cd4:	d002      	beq.n	8001cdc <__sflush_r+0x94>
 8001cd6:	4628      	mov	r0, r5
 8001cd8:	f000 f976 	bl	8001fc8 <_free_r>
 8001cdc:	2000      	movs	r0, #0
 8001cde:	6360      	str	r0, [r4, #52]	; 0x34
 8001ce0:	e7c0      	b.n	8001c64 <__sflush_r+0x1c>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	4628      	mov	r0, r5
 8001ce6:	47b0      	blx	r6
 8001ce8:	1c41      	adds	r1, r0, #1
 8001cea:	d1c8      	bne.n	8001c7e <__sflush_r+0x36>
 8001cec:	682b      	ldr	r3, [r5, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0c5      	beq.n	8001c7e <__sflush_r+0x36>
 8001cf2:	2b1d      	cmp	r3, #29
 8001cf4:	d001      	beq.n	8001cfa <__sflush_r+0xb2>
 8001cf6:	2b16      	cmp	r3, #22
 8001cf8:	d101      	bne.n	8001cfe <__sflush_r+0xb6>
 8001cfa:	602f      	str	r7, [r5, #0]
 8001cfc:	e7b1      	b.n	8001c62 <__sflush_r+0x1a>
 8001cfe:	89a3      	ldrh	r3, [r4, #12]
 8001d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d04:	81a3      	strh	r3, [r4, #12]
 8001d06:	e7ad      	b.n	8001c64 <__sflush_r+0x1c>
 8001d08:	690f      	ldr	r7, [r1, #16]
 8001d0a:	2f00      	cmp	r7, #0
 8001d0c:	d0a9      	beq.n	8001c62 <__sflush_r+0x1a>
 8001d0e:	0793      	lsls	r3, r2, #30
 8001d10:	680e      	ldr	r6, [r1, #0]
 8001d12:	bf08      	it	eq
 8001d14:	694b      	ldreq	r3, [r1, #20]
 8001d16:	600f      	str	r7, [r1, #0]
 8001d18:	bf18      	it	ne
 8001d1a:	2300      	movne	r3, #0
 8001d1c:	eba6 0807 	sub.w	r8, r6, r7
 8001d20:	608b      	str	r3, [r1, #8]
 8001d22:	f1b8 0f00 	cmp.w	r8, #0
 8001d26:	dd9c      	ble.n	8001c62 <__sflush_r+0x1a>
 8001d28:	4643      	mov	r3, r8
 8001d2a:	463a      	mov	r2, r7
 8001d2c:	6a21      	ldr	r1, [r4, #32]
 8001d2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d30:	4628      	mov	r0, r5
 8001d32:	47b0      	blx	r6
 8001d34:	2800      	cmp	r0, #0
 8001d36:	dc06      	bgt.n	8001d46 <__sflush_r+0xfe>
 8001d38:	89a3      	ldrh	r3, [r4, #12]
 8001d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d3e:	81a3      	strh	r3, [r4, #12]
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	e78e      	b.n	8001c64 <__sflush_r+0x1c>
 8001d46:	4407      	add	r7, r0
 8001d48:	eba8 0800 	sub.w	r8, r8, r0
 8001d4c:	e7e9      	b.n	8001d22 <__sflush_r+0xda>
 8001d4e:	bf00      	nop
 8001d50:	20400001 	.word	0x20400001

08001d54 <_fflush_r>:
 8001d54:	b538      	push	{r3, r4, r5, lr}
 8001d56:	690b      	ldr	r3, [r1, #16]
 8001d58:	4605      	mov	r5, r0
 8001d5a:	460c      	mov	r4, r1
 8001d5c:	b1db      	cbz	r3, 8001d96 <_fflush_r+0x42>
 8001d5e:	b118      	cbz	r0, 8001d68 <_fflush_r+0x14>
 8001d60:	6983      	ldr	r3, [r0, #24]
 8001d62:	b90b      	cbnz	r3, 8001d68 <_fflush_r+0x14>
 8001d64:	f000 f872 	bl	8001e4c <__sinit>
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <_fflush_r+0x48>)
 8001d6a:	429c      	cmp	r4, r3
 8001d6c:	d109      	bne.n	8001d82 <_fflush_r+0x2e>
 8001d6e:	686c      	ldr	r4, [r5, #4]
 8001d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d74:	b17b      	cbz	r3, 8001d96 <_fflush_r+0x42>
 8001d76:	4621      	mov	r1, r4
 8001d78:	4628      	mov	r0, r5
 8001d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d7e:	f7ff bf63 	b.w	8001c48 <__sflush_r>
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <_fflush_r+0x4c>)
 8001d84:	429c      	cmp	r4, r3
 8001d86:	d101      	bne.n	8001d8c <_fflush_r+0x38>
 8001d88:	68ac      	ldr	r4, [r5, #8]
 8001d8a:	e7f1      	b.n	8001d70 <_fflush_r+0x1c>
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <_fflush_r+0x50>)
 8001d8e:	429c      	cmp	r4, r3
 8001d90:	bf08      	it	eq
 8001d92:	68ec      	ldreq	r4, [r5, #12]
 8001d94:	e7ec      	b.n	8001d70 <_fflush_r+0x1c>
 8001d96:	2000      	movs	r0, #0
 8001d98:	bd38      	pop	{r3, r4, r5, pc}
 8001d9a:	bf00      	nop
 8001d9c:	08002de0 	.word	0x08002de0
 8001da0:	08002e00 	.word	0x08002e00
 8001da4:	08002dc0 	.word	0x08002dc0

08001da8 <fflush>:
 8001da8:	4601      	mov	r1, r0
 8001daa:	b920      	cbnz	r0, 8001db6 <fflush+0xe>
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <fflush+0x18>)
 8001dae:	4905      	ldr	r1, [pc, #20]	; (8001dc4 <fflush+0x1c>)
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	f000 b8b7 	b.w	8001f24 <_fwalk_reent>
 8001db6:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <fflush+0x20>)
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	f7ff bfcb 	b.w	8001d54 <_fflush_r>
 8001dbe:	bf00      	nop
 8001dc0:	08002e20 	.word	0x08002e20
 8001dc4:	08001d55 	.word	0x08001d55
 8001dc8:	2000000c 	.word	0x2000000c

08001dcc <std>:
 8001dcc:	2300      	movs	r3, #0
 8001dce:	b510      	push	{r4, lr}
 8001dd0:	4604      	mov	r4, r0
 8001dd2:	e9c0 3300 	strd	r3, r3, [r0]
 8001dd6:	6083      	str	r3, [r0, #8]
 8001dd8:	8181      	strh	r1, [r0, #12]
 8001dda:	6643      	str	r3, [r0, #100]	; 0x64
 8001ddc:	81c2      	strh	r2, [r0, #14]
 8001dde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001de2:	6183      	str	r3, [r0, #24]
 8001de4:	4619      	mov	r1, r3
 8001de6:	2208      	movs	r2, #8
 8001de8:	305c      	adds	r0, #92	; 0x5c
 8001dea:	f000 f8e5 	bl	8001fb8 <memset>
 8001dee:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <std+0x38>)
 8001df0:	6263      	str	r3, [r4, #36]	; 0x24
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <std+0x3c>)
 8001df4:	62a3      	str	r3, [r4, #40]	; 0x28
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <std+0x40>)
 8001df8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <std+0x44>)
 8001dfc:	6224      	str	r4, [r4, #32]
 8001dfe:	6323      	str	r3, [r4, #48]	; 0x30
 8001e00:	bd10      	pop	{r4, pc}
 8001e02:	bf00      	nop
 8001e04:	08002231 	.word	0x08002231
 8001e08:	08002253 	.word	0x08002253
 8001e0c:	0800228b 	.word	0x0800228b
 8001e10:	080022af 	.word	0x080022af

08001e14 <_cleanup_r>:
 8001e14:	4901      	ldr	r1, [pc, #4]	; (8001e1c <_cleanup_r+0x8>)
 8001e16:	f000 b885 	b.w	8001f24 <_fwalk_reent>
 8001e1a:	bf00      	nop
 8001e1c:	08001d55 	.word	0x08001d55

08001e20 <__sfmoreglue>:
 8001e20:	b570      	push	{r4, r5, r6, lr}
 8001e22:	1e4a      	subs	r2, r1, #1
 8001e24:	2568      	movs	r5, #104	; 0x68
 8001e26:	4355      	muls	r5, r2
 8001e28:	460e      	mov	r6, r1
 8001e2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e2e:	f000 f919 	bl	8002064 <_malloc_r>
 8001e32:	4604      	mov	r4, r0
 8001e34:	b140      	cbz	r0, 8001e48 <__sfmoreglue+0x28>
 8001e36:	2100      	movs	r1, #0
 8001e38:	e9c0 1600 	strd	r1, r6, [r0]
 8001e3c:	300c      	adds	r0, #12
 8001e3e:	60a0      	str	r0, [r4, #8]
 8001e40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e44:	f000 f8b8 	bl	8001fb8 <memset>
 8001e48:	4620      	mov	r0, r4
 8001e4a:	bd70      	pop	{r4, r5, r6, pc}

08001e4c <__sinit>:
 8001e4c:	6983      	ldr	r3, [r0, #24]
 8001e4e:	b510      	push	{r4, lr}
 8001e50:	4604      	mov	r4, r0
 8001e52:	bb33      	cbnz	r3, 8001ea2 <__sinit+0x56>
 8001e54:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001e58:	6503      	str	r3, [r0, #80]	; 0x50
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <__sinit+0x58>)
 8001e5c:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <__sinit+0x5c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6282      	str	r2, [r0, #40]	; 0x28
 8001e62:	4298      	cmp	r0, r3
 8001e64:	bf04      	itt	eq
 8001e66:	2301      	moveq	r3, #1
 8001e68:	6183      	streq	r3, [r0, #24]
 8001e6a:	f000 f81f 	bl	8001eac <__sfp>
 8001e6e:	6060      	str	r0, [r4, #4]
 8001e70:	4620      	mov	r0, r4
 8001e72:	f000 f81b 	bl	8001eac <__sfp>
 8001e76:	60a0      	str	r0, [r4, #8]
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f000 f817 	bl	8001eac <__sfp>
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60e0      	str	r0, [r4, #12]
 8001e82:	2104      	movs	r1, #4
 8001e84:	6860      	ldr	r0, [r4, #4]
 8001e86:	f7ff ffa1 	bl	8001dcc <std>
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	2109      	movs	r1, #9
 8001e8e:	68a0      	ldr	r0, [r4, #8]
 8001e90:	f7ff ff9c 	bl	8001dcc <std>
 8001e94:	2202      	movs	r2, #2
 8001e96:	2112      	movs	r1, #18
 8001e98:	68e0      	ldr	r0, [r4, #12]
 8001e9a:	f7ff ff97 	bl	8001dcc <std>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	61a3      	str	r3, [r4, #24]
 8001ea2:	bd10      	pop	{r4, pc}
 8001ea4:	08002e20 	.word	0x08002e20
 8001ea8:	08001e15 	.word	0x08001e15

08001eac <__sfp>:
 8001eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eae:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <__sfp+0x70>)
 8001eb0:	681e      	ldr	r6, [r3, #0]
 8001eb2:	69b3      	ldr	r3, [r6, #24]
 8001eb4:	4607      	mov	r7, r0
 8001eb6:	b913      	cbnz	r3, 8001ebe <__sfp+0x12>
 8001eb8:	4630      	mov	r0, r6
 8001eba:	f7ff ffc7 	bl	8001e4c <__sinit>
 8001ebe:	3648      	adds	r6, #72	; 0x48
 8001ec0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	d503      	bpl.n	8001ed0 <__sfp+0x24>
 8001ec8:	6833      	ldr	r3, [r6, #0]
 8001eca:	b133      	cbz	r3, 8001eda <__sfp+0x2e>
 8001ecc:	6836      	ldr	r6, [r6, #0]
 8001ece:	e7f7      	b.n	8001ec0 <__sfp+0x14>
 8001ed0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001ed4:	b16d      	cbz	r5, 8001ef2 <__sfp+0x46>
 8001ed6:	3468      	adds	r4, #104	; 0x68
 8001ed8:	e7f4      	b.n	8001ec4 <__sfp+0x18>
 8001eda:	2104      	movs	r1, #4
 8001edc:	4638      	mov	r0, r7
 8001ede:	f7ff ff9f 	bl	8001e20 <__sfmoreglue>
 8001ee2:	6030      	str	r0, [r6, #0]
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	d1f1      	bne.n	8001ecc <__sfp+0x20>
 8001ee8:	230c      	movs	r3, #12
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	4604      	mov	r4, r0
 8001eee:	4620      	mov	r0, r4
 8001ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <__sfp+0x74>)
 8001ef4:	6665      	str	r5, [r4, #100]	; 0x64
 8001ef6:	e9c4 5500 	strd	r5, r5, [r4]
 8001efa:	60a5      	str	r5, [r4, #8]
 8001efc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001f00:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001f04:	2208      	movs	r2, #8
 8001f06:	4629      	mov	r1, r5
 8001f08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f0c:	f000 f854 	bl	8001fb8 <memset>
 8001f10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001f14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001f18:	e7e9      	b.n	8001eee <__sfp+0x42>
 8001f1a:	bf00      	nop
 8001f1c:	08002e20 	.word	0x08002e20
 8001f20:	ffff0001 	.word	0xffff0001

08001f24 <_fwalk_reent>:
 8001f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f28:	4680      	mov	r8, r0
 8001f2a:	4689      	mov	r9, r1
 8001f2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001f30:	2600      	movs	r6, #0
 8001f32:	b914      	cbnz	r4, 8001f3a <_fwalk_reent+0x16>
 8001f34:	4630      	mov	r0, r6
 8001f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f3a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001f3e:	3f01      	subs	r7, #1
 8001f40:	d501      	bpl.n	8001f46 <_fwalk_reent+0x22>
 8001f42:	6824      	ldr	r4, [r4, #0]
 8001f44:	e7f5      	b.n	8001f32 <_fwalk_reent+0xe>
 8001f46:	89ab      	ldrh	r3, [r5, #12]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d907      	bls.n	8001f5c <_fwalk_reent+0x38>
 8001f4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f50:	3301      	adds	r3, #1
 8001f52:	d003      	beq.n	8001f5c <_fwalk_reent+0x38>
 8001f54:	4629      	mov	r1, r5
 8001f56:	4640      	mov	r0, r8
 8001f58:	47c8      	blx	r9
 8001f5a:	4306      	orrs	r6, r0
 8001f5c:	3568      	adds	r5, #104	; 0x68
 8001f5e:	e7ee      	b.n	8001f3e <_fwalk_reent+0x1a>

08001f60 <__libc_init_array>:
 8001f60:	b570      	push	{r4, r5, r6, lr}
 8001f62:	4e0d      	ldr	r6, [pc, #52]	; (8001f98 <__libc_init_array+0x38>)
 8001f64:	4c0d      	ldr	r4, [pc, #52]	; (8001f9c <__libc_init_array+0x3c>)
 8001f66:	1ba4      	subs	r4, r4, r6
 8001f68:	10a4      	asrs	r4, r4, #2
 8001f6a:	2500      	movs	r5, #0
 8001f6c:	42a5      	cmp	r5, r4
 8001f6e:	d109      	bne.n	8001f84 <__libc_init_array+0x24>
 8001f70:	4e0b      	ldr	r6, [pc, #44]	; (8001fa0 <__libc_init_array+0x40>)
 8001f72:	4c0c      	ldr	r4, [pc, #48]	; (8001fa4 <__libc_init_array+0x44>)
 8001f74:	f000 fe24 	bl	8002bc0 <_init>
 8001f78:	1ba4      	subs	r4, r4, r6
 8001f7a:	10a4      	asrs	r4, r4, #2
 8001f7c:	2500      	movs	r5, #0
 8001f7e:	42a5      	cmp	r5, r4
 8001f80:	d105      	bne.n	8001f8e <__libc_init_array+0x2e>
 8001f82:	bd70      	pop	{r4, r5, r6, pc}
 8001f84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f88:	4798      	blx	r3
 8001f8a:	3501      	adds	r5, #1
 8001f8c:	e7ee      	b.n	8001f6c <__libc_init_array+0xc>
 8001f8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f92:	4798      	blx	r3
 8001f94:	3501      	adds	r5, #1
 8001f96:	e7f2      	b.n	8001f7e <__libc_init_array+0x1e>
 8001f98:	08002e60 	.word	0x08002e60
 8001f9c:	08002e60 	.word	0x08002e60
 8001fa0:	08002e60 	.word	0x08002e60
 8001fa4:	08002e64 	.word	0x08002e64

08001fa8 <malloc>:
 8001fa8:	4b02      	ldr	r3, [pc, #8]	; (8001fb4 <malloc+0xc>)
 8001faa:	4601      	mov	r1, r0
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	f000 b859 	b.w	8002064 <_malloc_r>
 8001fb2:	bf00      	nop
 8001fb4:	2000000c 	.word	0x2000000c

08001fb8 <memset>:
 8001fb8:	4402      	add	r2, r0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d100      	bne.n	8001fc2 <memset+0xa>
 8001fc0:	4770      	bx	lr
 8001fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8001fc6:	e7f9      	b.n	8001fbc <memset+0x4>

08001fc8 <_free_r>:
 8001fc8:	b538      	push	{r3, r4, r5, lr}
 8001fca:	4605      	mov	r5, r0
 8001fcc:	2900      	cmp	r1, #0
 8001fce:	d045      	beq.n	800205c <_free_r+0x94>
 8001fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fd4:	1f0c      	subs	r4, r1, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	bfb8      	it	lt
 8001fda:	18e4      	addlt	r4, r4, r3
 8001fdc:	f000 fac4 	bl	8002568 <__malloc_lock>
 8001fe0:	4a1f      	ldr	r2, [pc, #124]	; (8002060 <_free_r+0x98>)
 8001fe2:	6813      	ldr	r3, [r2, #0]
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	b933      	cbnz	r3, 8001ff6 <_free_r+0x2e>
 8001fe8:	6063      	str	r3, [r4, #4]
 8001fea:	6014      	str	r4, [r2, #0]
 8001fec:	4628      	mov	r0, r5
 8001fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ff2:	f000 baba 	b.w	800256a <__malloc_unlock>
 8001ff6:	42a3      	cmp	r3, r4
 8001ff8:	d90c      	bls.n	8002014 <_free_r+0x4c>
 8001ffa:	6821      	ldr	r1, [r4, #0]
 8001ffc:	1862      	adds	r2, r4, r1
 8001ffe:	4293      	cmp	r3, r2
 8002000:	bf04      	itt	eq
 8002002:	681a      	ldreq	r2, [r3, #0]
 8002004:	685b      	ldreq	r3, [r3, #4]
 8002006:	6063      	str	r3, [r4, #4]
 8002008:	bf04      	itt	eq
 800200a:	1852      	addeq	r2, r2, r1
 800200c:	6022      	streq	r2, [r4, #0]
 800200e:	6004      	str	r4, [r0, #0]
 8002010:	e7ec      	b.n	8001fec <_free_r+0x24>
 8002012:	4613      	mov	r3, r2
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	b10a      	cbz	r2, 800201c <_free_r+0x54>
 8002018:	42a2      	cmp	r2, r4
 800201a:	d9fa      	bls.n	8002012 <_free_r+0x4a>
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	1858      	adds	r0, r3, r1
 8002020:	42a0      	cmp	r0, r4
 8002022:	d10b      	bne.n	800203c <_free_r+0x74>
 8002024:	6820      	ldr	r0, [r4, #0]
 8002026:	4401      	add	r1, r0
 8002028:	1858      	adds	r0, r3, r1
 800202a:	4282      	cmp	r2, r0
 800202c:	6019      	str	r1, [r3, #0]
 800202e:	d1dd      	bne.n	8001fec <_free_r+0x24>
 8002030:	6810      	ldr	r0, [r2, #0]
 8002032:	6852      	ldr	r2, [r2, #4]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	4401      	add	r1, r0
 8002038:	6019      	str	r1, [r3, #0]
 800203a:	e7d7      	b.n	8001fec <_free_r+0x24>
 800203c:	d902      	bls.n	8002044 <_free_r+0x7c>
 800203e:	230c      	movs	r3, #12
 8002040:	602b      	str	r3, [r5, #0]
 8002042:	e7d3      	b.n	8001fec <_free_r+0x24>
 8002044:	6820      	ldr	r0, [r4, #0]
 8002046:	1821      	adds	r1, r4, r0
 8002048:	428a      	cmp	r2, r1
 800204a:	bf04      	itt	eq
 800204c:	6811      	ldreq	r1, [r2, #0]
 800204e:	6852      	ldreq	r2, [r2, #4]
 8002050:	6062      	str	r2, [r4, #4]
 8002052:	bf04      	itt	eq
 8002054:	1809      	addeq	r1, r1, r0
 8002056:	6021      	streq	r1, [r4, #0]
 8002058:	605c      	str	r4, [r3, #4]
 800205a:	e7c7      	b.n	8001fec <_free_r+0x24>
 800205c:	bd38      	pop	{r3, r4, r5, pc}
 800205e:	bf00      	nop
 8002060:	2000008c 	.word	0x2000008c

08002064 <_malloc_r>:
 8002064:	b570      	push	{r4, r5, r6, lr}
 8002066:	1ccd      	adds	r5, r1, #3
 8002068:	f025 0503 	bic.w	r5, r5, #3
 800206c:	3508      	adds	r5, #8
 800206e:	2d0c      	cmp	r5, #12
 8002070:	bf38      	it	cc
 8002072:	250c      	movcc	r5, #12
 8002074:	2d00      	cmp	r5, #0
 8002076:	4606      	mov	r6, r0
 8002078:	db01      	blt.n	800207e <_malloc_r+0x1a>
 800207a:	42a9      	cmp	r1, r5
 800207c:	d903      	bls.n	8002086 <_malloc_r+0x22>
 800207e:	230c      	movs	r3, #12
 8002080:	6033      	str	r3, [r6, #0]
 8002082:	2000      	movs	r0, #0
 8002084:	bd70      	pop	{r4, r5, r6, pc}
 8002086:	f000 fa6f 	bl	8002568 <__malloc_lock>
 800208a:	4a21      	ldr	r2, [pc, #132]	; (8002110 <_malloc_r+0xac>)
 800208c:	6814      	ldr	r4, [r2, #0]
 800208e:	4621      	mov	r1, r4
 8002090:	b991      	cbnz	r1, 80020b8 <_malloc_r+0x54>
 8002092:	4c20      	ldr	r4, [pc, #128]	; (8002114 <_malloc_r+0xb0>)
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	b91b      	cbnz	r3, 80020a0 <_malloc_r+0x3c>
 8002098:	4630      	mov	r0, r6
 800209a:	f000 f8b9 	bl	8002210 <_sbrk_r>
 800209e:	6020      	str	r0, [r4, #0]
 80020a0:	4629      	mov	r1, r5
 80020a2:	4630      	mov	r0, r6
 80020a4:	f000 f8b4 	bl	8002210 <_sbrk_r>
 80020a8:	1c43      	adds	r3, r0, #1
 80020aa:	d124      	bne.n	80020f6 <_malloc_r+0x92>
 80020ac:	230c      	movs	r3, #12
 80020ae:	6033      	str	r3, [r6, #0]
 80020b0:	4630      	mov	r0, r6
 80020b2:	f000 fa5a 	bl	800256a <__malloc_unlock>
 80020b6:	e7e4      	b.n	8002082 <_malloc_r+0x1e>
 80020b8:	680b      	ldr	r3, [r1, #0]
 80020ba:	1b5b      	subs	r3, r3, r5
 80020bc:	d418      	bmi.n	80020f0 <_malloc_r+0x8c>
 80020be:	2b0b      	cmp	r3, #11
 80020c0:	d90f      	bls.n	80020e2 <_malloc_r+0x7e>
 80020c2:	600b      	str	r3, [r1, #0]
 80020c4:	50cd      	str	r5, [r1, r3]
 80020c6:	18cc      	adds	r4, r1, r3
 80020c8:	4630      	mov	r0, r6
 80020ca:	f000 fa4e 	bl	800256a <__malloc_unlock>
 80020ce:	f104 000b 	add.w	r0, r4, #11
 80020d2:	1d23      	adds	r3, r4, #4
 80020d4:	f020 0007 	bic.w	r0, r0, #7
 80020d8:	1ac3      	subs	r3, r0, r3
 80020da:	d0d3      	beq.n	8002084 <_malloc_r+0x20>
 80020dc:	425a      	negs	r2, r3
 80020de:	50e2      	str	r2, [r4, r3]
 80020e0:	e7d0      	b.n	8002084 <_malloc_r+0x20>
 80020e2:	428c      	cmp	r4, r1
 80020e4:	684b      	ldr	r3, [r1, #4]
 80020e6:	bf16      	itet	ne
 80020e8:	6063      	strne	r3, [r4, #4]
 80020ea:	6013      	streq	r3, [r2, #0]
 80020ec:	460c      	movne	r4, r1
 80020ee:	e7eb      	b.n	80020c8 <_malloc_r+0x64>
 80020f0:	460c      	mov	r4, r1
 80020f2:	6849      	ldr	r1, [r1, #4]
 80020f4:	e7cc      	b.n	8002090 <_malloc_r+0x2c>
 80020f6:	1cc4      	adds	r4, r0, #3
 80020f8:	f024 0403 	bic.w	r4, r4, #3
 80020fc:	42a0      	cmp	r0, r4
 80020fe:	d005      	beq.n	800210c <_malloc_r+0xa8>
 8002100:	1a21      	subs	r1, r4, r0
 8002102:	4630      	mov	r0, r6
 8002104:	f000 f884 	bl	8002210 <_sbrk_r>
 8002108:	3001      	adds	r0, #1
 800210a:	d0cf      	beq.n	80020ac <_malloc_r+0x48>
 800210c:	6025      	str	r5, [r4, #0]
 800210e:	e7db      	b.n	80020c8 <_malloc_r+0x64>
 8002110:	2000008c 	.word	0x2000008c
 8002114:	20000090 	.word	0x20000090

08002118 <iprintf>:
 8002118:	b40f      	push	{r0, r1, r2, r3}
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <iprintf+0x2c>)
 800211c:	b513      	push	{r0, r1, r4, lr}
 800211e:	681c      	ldr	r4, [r3, #0]
 8002120:	b124      	cbz	r4, 800212c <iprintf+0x14>
 8002122:	69a3      	ldr	r3, [r4, #24]
 8002124:	b913      	cbnz	r3, 800212c <iprintf+0x14>
 8002126:	4620      	mov	r0, r4
 8002128:	f7ff fe90 	bl	8001e4c <__sinit>
 800212c:	ab05      	add	r3, sp, #20
 800212e:	9a04      	ldr	r2, [sp, #16]
 8002130:	68a1      	ldr	r1, [r4, #8]
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	4620      	mov	r0, r4
 8002136:	f000 fa43 	bl	80025c0 <_vfiprintf_r>
 800213a:	b002      	add	sp, #8
 800213c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002140:	b004      	add	sp, #16
 8002142:	4770      	bx	lr
 8002144:	2000000c 	.word	0x2000000c

08002148 <_puts_r>:
 8002148:	b570      	push	{r4, r5, r6, lr}
 800214a:	460e      	mov	r6, r1
 800214c:	4605      	mov	r5, r0
 800214e:	b118      	cbz	r0, 8002158 <_puts_r+0x10>
 8002150:	6983      	ldr	r3, [r0, #24]
 8002152:	b90b      	cbnz	r3, 8002158 <_puts_r+0x10>
 8002154:	f7ff fe7a 	bl	8001e4c <__sinit>
 8002158:	69ab      	ldr	r3, [r5, #24]
 800215a:	68ac      	ldr	r4, [r5, #8]
 800215c:	b913      	cbnz	r3, 8002164 <_puts_r+0x1c>
 800215e:	4628      	mov	r0, r5
 8002160:	f7ff fe74 	bl	8001e4c <__sinit>
 8002164:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <_puts_r+0xac>)
 8002166:	429c      	cmp	r4, r3
 8002168:	d117      	bne.n	800219a <_puts_r+0x52>
 800216a:	686c      	ldr	r4, [r5, #4]
 800216c:	89a3      	ldrh	r3, [r4, #12]
 800216e:	071b      	lsls	r3, r3, #28
 8002170:	d51d      	bpl.n	80021ae <_puts_r+0x66>
 8002172:	6923      	ldr	r3, [r4, #16]
 8002174:	b1db      	cbz	r3, 80021ae <_puts_r+0x66>
 8002176:	3e01      	subs	r6, #1
 8002178:	68a3      	ldr	r3, [r4, #8]
 800217a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800217e:	3b01      	subs	r3, #1
 8002180:	60a3      	str	r3, [r4, #8]
 8002182:	b9e9      	cbnz	r1, 80021c0 <_puts_r+0x78>
 8002184:	2b00      	cmp	r3, #0
 8002186:	da2e      	bge.n	80021e6 <_puts_r+0x9e>
 8002188:	4622      	mov	r2, r4
 800218a:	210a      	movs	r1, #10
 800218c:	4628      	mov	r0, r5
 800218e:	f000 f893 	bl	80022b8 <__swbuf_r>
 8002192:	3001      	adds	r0, #1
 8002194:	d011      	beq.n	80021ba <_puts_r+0x72>
 8002196:	200a      	movs	r0, #10
 8002198:	e011      	b.n	80021be <_puts_r+0x76>
 800219a:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <_puts_r+0xb0>)
 800219c:	429c      	cmp	r4, r3
 800219e:	d101      	bne.n	80021a4 <_puts_r+0x5c>
 80021a0:	68ac      	ldr	r4, [r5, #8]
 80021a2:	e7e3      	b.n	800216c <_puts_r+0x24>
 80021a4:	4b15      	ldr	r3, [pc, #84]	; (80021fc <_puts_r+0xb4>)
 80021a6:	429c      	cmp	r4, r3
 80021a8:	bf08      	it	eq
 80021aa:	68ec      	ldreq	r4, [r5, #12]
 80021ac:	e7de      	b.n	800216c <_puts_r+0x24>
 80021ae:	4621      	mov	r1, r4
 80021b0:	4628      	mov	r0, r5
 80021b2:	f000 f8e5 	bl	8002380 <__swsetup_r>
 80021b6:	2800      	cmp	r0, #0
 80021b8:	d0dd      	beq.n	8002176 <_puts_r+0x2e>
 80021ba:	f04f 30ff 	mov.w	r0, #4294967295
 80021be:	bd70      	pop	{r4, r5, r6, pc}
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	da04      	bge.n	80021ce <_puts_r+0x86>
 80021c4:	69a2      	ldr	r2, [r4, #24]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	dc06      	bgt.n	80021d8 <_puts_r+0x90>
 80021ca:	290a      	cmp	r1, #10
 80021cc:	d004      	beq.n	80021d8 <_puts_r+0x90>
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	6022      	str	r2, [r4, #0]
 80021d4:	7019      	strb	r1, [r3, #0]
 80021d6:	e7cf      	b.n	8002178 <_puts_r+0x30>
 80021d8:	4622      	mov	r2, r4
 80021da:	4628      	mov	r0, r5
 80021dc:	f000 f86c 	bl	80022b8 <__swbuf_r>
 80021e0:	3001      	adds	r0, #1
 80021e2:	d1c9      	bne.n	8002178 <_puts_r+0x30>
 80021e4:	e7e9      	b.n	80021ba <_puts_r+0x72>
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	200a      	movs	r0, #10
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	6022      	str	r2, [r4, #0]
 80021ee:	7018      	strb	r0, [r3, #0]
 80021f0:	e7e5      	b.n	80021be <_puts_r+0x76>
 80021f2:	bf00      	nop
 80021f4:	08002de0 	.word	0x08002de0
 80021f8:	08002e00 	.word	0x08002e00
 80021fc:	08002dc0 	.word	0x08002dc0

08002200 <puts>:
 8002200:	4b02      	ldr	r3, [pc, #8]	; (800220c <puts+0xc>)
 8002202:	4601      	mov	r1, r0
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	f7ff bf9f 	b.w	8002148 <_puts_r>
 800220a:	bf00      	nop
 800220c:	2000000c 	.word	0x2000000c

08002210 <_sbrk_r>:
 8002210:	b538      	push	{r3, r4, r5, lr}
 8002212:	4c06      	ldr	r4, [pc, #24]	; (800222c <_sbrk_r+0x1c>)
 8002214:	2300      	movs	r3, #0
 8002216:	4605      	mov	r5, r0
 8002218:	4608      	mov	r0, r1
 800221a:	6023      	str	r3, [r4, #0]
 800221c:	f000 fcc2 	bl	8002ba4 <_sbrk>
 8002220:	1c43      	adds	r3, r0, #1
 8002222:	d102      	bne.n	800222a <_sbrk_r+0x1a>
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	b103      	cbz	r3, 800222a <_sbrk_r+0x1a>
 8002228:	602b      	str	r3, [r5, #0]
 800222a:	bd38      	pop	{r3, r4, r5, pc}
 800222c:	2000011c 	.word	0x2000011c

08002230 <__sread>:
 8002230:	b510      	push	{r4, lr}
 8002232:	460c      	mov	r4, r1
 8002234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002238:	f000 fc60 	bl	8002afc <_read_r>
 800223c:	2800      	cmp	r0, #0
 800223e:	bfab      	itete	ge
 8002240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002242:	89a3      	ldrhlt	r3, [r4, #12]
 8002244:	181b      	addge	r3, r3, r0
 8002246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800224a:	bfac      	ite	ge
 800224c:	6563      	strge	r3, [r4, #84]	; 0x54
 800224e:	81a3      	strhlt	r3, [r4, #12]
 8002250:	bd10      	pop	{r4, pc}

08002252 <__swrite>:
 8002252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002256:	461f      	mov	r7, r3
 8002258:	898b      	ldrh	r3, [r1, #12]
 800225a:	05db      	lsls	r3, r3, #23
 800225c:	4605      	mov	r5, r0
 800225e:	460c      	mov	r4, r1
 8002260:	4616      	mov	r6, r2
 8002262:	d505      	bpl.n	8002270 <__swrite+0x1e>
 8002264:	2302      	movs	r3, #2
 8002266:	2200      	movs	r2, #0
 8002268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800226c:	f000 f906 	bl	800247c <_lseek_r>
 8002270:	89a3      	ldrh	r3, [r4, #12]
 8002272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800227a:	81a3      	strh	r3, [r4, #12]
 800227c:	4632      	mov	r2, r6
 800227e:	463b      	mov	r3, r7
 8002280:	4628      	mov	r0, r5
 8002282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002286:	f000 b869 	b.w	800235c <_write_r>

0800228a <__sseek>:
 800228a:	b510      	push	{r4, lr}
 800228c:	460c      	mov	r4, r1
 800228e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002292:	f000 f8f3 	bl	800247c <_lseek_r>
 8002296:	1c43      	adds	r3, r0, #1
 8002298:	89a3      	ldrh	r3, [r4, #12]
 800229a:	bf15      	itete	ne
 800229c:	6560      	strne	r0, [r4, #84]	; 0x54
 800229e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022a6:	81a3      	strheq	r3, [r4, #12]
 80022a8:	bf18      	it	ne
 80022aa:	81a3      	strhne	r3, [r4, #12]
 80022ac:	bd10      	pop	{r4, pc}

080022ae <__sclose>:
 80022ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022b2:	f000 b8d3 	b.w	800245c <_close_r>
	...

080022b8 <__swbuf_r>:
 80022b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ba:	460e      	mov	r6, r1
 80022bc:	4614      	mov	r4, r2
 80022be:	4605      	mov	r5, r0
 80022c0:	b118      	cbz	r0, 80022ca <__swbuf_r+0x12>
 80022c2:	6983      	ldr	r3, [r0, #24]
 80022c4:	b90b      	cbnz	r3, 80022ca <__swbuf_r+0x12>
 80022c6:	f7ff fdc1 	bl	8001e4c <__sinit>
 80022ca:	4b21      	ldr	r3, [pc, #132]	; (8002350 <__swbuf_r+0x98>)
 80022cc:	429c      	cmp	r4, r3
 80022ce:	d12a      	bne.n	8002326 <__swbuf_r+0x6e>
 80022d0:	686c      	ldr	r4, [r5, #4]
 80022d2:	69a3      	ldr	r3, [r4, #24]
 80022d4:	60a3      	str	r3, [r4, #8]
 80022d6:	89a3      	ldrh	r3, [r4, #12]
 80022d8:	071a      	lsls	r2, r3, #28
 80022da:	d52e      	bpl.n	800233a <__swbuf_r+0x82>
 80022dc:	6923      	ldr	r3, [r4, #16]
 80022de:	b363      	cbz	r3, 800233a <__swbuf_r+0x82>
 80022e0:	6923      	ldr	r3, [r4, #16]
 80022e2:	6820      	ldr	r0, [r4, #0]
 80022e4:	1ac0      	subs	r0, r0, r3
 80022e6:	6963      	ldr	r3, [r4, #20]
 80022e8:	b2f6      	uxtb	r6, r6
 80022ea:	4283      	cmp	r3, r0
 80022ec:	4637      	mov	r7, r6
 80022ee:	dc04      	bgt.n	80022fa <__swbuf_r+0x42>
 80022f0:	4621      	mov	r1, r4
 80022f2:	4628      	mov	r0, r5
 80022f4:	f7ff fd2e 	bl	8001d54 <_fflush_r>
 80022f8:	bb28      	cbnz	r0, 8002346 <__swbuf_r+0x8e>
 80022fa:	68a3      	ldr	r3, [r4, #8]
 80022fc:	3b01      	subs	r3, #1
 80022fe:	60a3      	str	r3, [r4, #8]
 8002300:	6823      	ldr	r3, [r4, #0]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	6022      	str	r2, [r4, #0]
 8002306:	701e      	strb	r6, [r3, #0]
 8002308:	6963      	ldr	r3, [r4, #20]
 800230a:	3001      	adds	r0, #1
 800230c:	4283      	cmp	r3, r0
 800230e:	d004      	beq.n	800231a <__swbuf_r+0x62>
 8002310:	89a3      	ldrh	r3, [r4, #12]
 8002312:	07db      	lsls	r3, r3, #31
 8002314:	d519      	bpl.n	800234a <__swbuf_r+0x92>
 8002316:	2e0a      	cmp	r6, #10
 8002318:	d117      	bne.n	800234a <__swbuf_r+0x92>
 800231a:	4621      	mov	r1, r4
 800231c:	4628      	mov	r0, r5
 800231e:	f7ff fd19 	bl	8001d54 <_fflush_r>
 8002322:	b190      	cbz	r0, 800234a <__swbuf_r+0x92>
 8002324:	e00f      	b.n	8002346 <__swbuf_r+0x8e>
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <__swbuf_r+0x9c>)
 8002328:	429c      	cmp	r4, r3
 800232a:	d101      	bne.n	8002330 <__swbuf_r+0x78>
 800232c:	68ac      	ldr	r4, [r5, #8]
 800232e:	e7d0      	b.n	80022d2 <__swbuf_r+0x1a>
 8002330:	4b09      	ldr	r3, [pc, #36]	; (8002358 <__swbuf_r+0xa0>)
 8002332:	429c      	cmp	r4, r3
 8002334:	bf08      	it	eq
 8002336:	68ec      	ldreq	r4, [r5, #12]
 8002338:	e7cb      	b.n	80022d2 <__swbuf_r+0x1a>
 800233a:	4621      	mov	r1, r4
 800233c:	4628      	mov	r0, r5
 800233e:	f000 f81f 	bl	8002380 <__swsetup_r>
 8002342:	2800      	cmp	r0, #0
 8002344:	d0cc      	beq.n	80022e0 <__swbuf_r+0x28>
 8002346:	f04f 37ff 	mov.w	r7, #4294967295
 800234a:	4638      	mov	r0, r7
 800234c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800234e:	bf00      	nop
 8002350:	08002de0 	.word	0x08002de0
 8002354:	08002e00 	.word	0x08002e00
 8002358:	08002dc0 	.word	0x08002dc0

0800235c <_write_r>:
 800235c:	b538      	push	{r3, r4, r5, lr}
 800235e:	4c07      	ldr	r4, [pc, #28]	; (800237c <_write_r+0x20>)
 8002360:	4605      	mov	r5, r0
 8002362:	4608      	mov	r0, r1
 8002364:	4611      	mov	r1, r2
 8002366:	2200      	movs	r2, #0
 8002368:	6022      	str	r2, [r4, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	f7fe fb16 	bl	800099c <_write>
 8002370:	1c43      	adds	r3, r0, #1
 8002372:	d102      	bne.n	800237a <_write_r+0x1e>
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	b103      	cbz	r3, 800237a <_write_r+0x1e>
 8002378:	602b      	str	r3, [r5, #0]
 800237a:	bd38      	pop	{r3, r4, r5, pc}
 800237c:	2000011c 	.word	0x2000011c

08002380 <__swsetup_r>:
 8002380:	4b32      	ldr	r3, [pc, #200]	; (800244c <__swsetup_r+0xcc>)
 8002382:	b570      	push	{r4, r5, r6, lr}
 8002384:	681d      	ldr	r5, [r3, #0]
 8002386:	4606      	mov	r6, r0
 8002388:	460c      	mov	r4, r1
 800238a:	b125      	cbz	r5, 8002396 <__swsetup_r+0x16>
 800238c:	69ab      	ldr	r3, [r5, #24]
 800238e:	b913      	cbnz	r3, 8002396 <__swsetup_r+0x16>
 8002390:	4628      	mov	r0, r5
 8002392:	f7ff fd5b 	bl	8001e4c <__sinit>
 8002396:	4b2e      	ldr	r3, [pc, #184]	; (8002450 <__swsetup_r+0xd0>)
 8002398:	429c      	cmp	r4, r3
 800239a:	d10f      	bne.n	80023bc <__swsetup_r+0x3c>
 800239c:	686c      	ldr	r4, [r5, #4]
 800239e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	0715      	lsls	r5, r2, #28
 80023a6:	d42c      	bmi.n	8002402 <__swsetup_r+0x82>
 80023a8:	06d0      	lsls	r0, r2, #27
 80023aa:	d411      	bmi.n	80023d0 <__swsetup_r+0x50>
 80023ac:	2209      	movs	r2, #9
 80023ae:	6032      	str	r2, [r6, #0]
 80023b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023b4:	81a3      	strh	r3, [r4, #12]
 80023b6:	f04f 30ff 	mov.w	r0, #4294967295
 80023ba:	e03e      	b.n	800243a <__swsetup_r+0xba>
 80023bc:	4b25      	ldr	r3, [pc, #148]	; (8002454 <__swsetup_r+0xd4>)
 80023be:	429c      	cmp	r4, r3
 80023c0:	d101      	bne.n	80023c6 <__swsetup_r+0x46>
 80023c2:	68ac      	ldr	r4, [r5, #8]
 80023c4:	e7eb      	b.n	800239e <__swsetup_r+0x1e>
 80023c6:	4b24      	ldr	r3, [pc, #144]	; (8002458 <__swsetup_r+0xd8>)
 80023c8:	429c      	cmp	r4, r3
 80023ca:	bf08      	it	eq
 80023cc:	68ec      	ldreq	r4, [r5, #12]
 80023ce:	e7e6      	b.n	800239e <__swsetup_r+0x1e>
 80023d0:	0751      	lsls	r1, r2, #29
 80023d2:	d512      	bpl.n	80023fa <__swsetup_r+0x7a>
 80023d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023d6:	b141      	cbz	r1, 80023ea <__swsetup_r+0x6a>
 80023d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023dc:	4299      	cmp	r1, r3
 80023de:	d002      	beq.n	80023e6 <__swsetup_r+0x66>
 80023e0:	4630      	mov	r0, r6
 80023e2:	f7ff fdf1 	bl	8001fc8 <_free_r>
 80023e6:	2300      	movs	r3, #0
 80023e8:	6363      	str	r3, [r4, #52]	; 0x34
 80023ea:	89a3      	ldrh	r3, [r4, #12]
 80023ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80023f0:	81a3      	strh	r3, [r4, #12]
 80023f2:	2300      	movs	r3, #0
 80023f4:	6063      	str	r3, [r4, #4]
 80023f6:	6923      	ldr	r3, [r4, #16]
 80023f8:	6023      	str	r3, [r4, #0]
 80023fa:	89a3      	ldrh	r3, [r4, #12]
 80023fc:	f043 0308 	orr.w	r3, r3, #8
 8002400:	81a3      	strh	r3, [r4, #12]
 8002402:	6923      	ldr	r3, [r4, #16]
 8002404:	b94b      	cbnz	r3, 800241a <__swsetup_r+0x9a>
 8002406:	89a3      	ldrh	r3, [r4, #12]
 8002408:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800240c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002410:	d003      	beq.n	800241a <__swsetup_r+0x9a>
 8002412:	4621      	mov	r1, r4
 8002414:	4630      	mov	r0, r6
 8002416:	f000 f867 	bl	80024e8 <__smakebuf_r>
 800241a:	89a2      	ldrh	r2, [r4, #12]
 800241c:	f012 0301 	ands.w	r3, r2, #1
 8002420:	d00c      	beq.n	800243c <__swsetup_r+0xbc>
 8002422:	2300      	movs	r3, #0
 8002424:	60a3      	str	r3, [r4, #8]
 8002426:	6963      	ldr	r3, [r4, #20]
 8002428:	425b      	negs	r3, r3
 800242a:	61a3      	str	r3, [r4, #24]
 800242c:	6923      	ldr	r3, [r4, #16]
 800242e:	b953      	cbnz	r3, 8002446 <__swsetup_r+0xc6>
 8002430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002434:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002438:	d1ba      	bne.n	80023b0 <__swsetup_r+0x30>
 800243a:	bd70      	pop	{r4, r5, r6, pc}
 800243c:	0792      	lsls	r2, r2, #30
 800243e:	bf58      	it	pl
 8002440:	6963      	ldrpl	r3, [r4, #20]
 8002442:	60a3      	str	r3, [r4, #8]
 8002444:	e7f2      	b.n	800242c <__swsetup_r+0xac>
 8002446:	2000      	movs	r0, #0
 8002448:	e7f7      	b.n	800243a <__swsetup_r+0xba>
 800244a:	bf00      	nop
 800244c:	2000000c 	.word	0x2000000c
 8002450:	08002de0 	.word	0x08002de0
 8002454:	08002e00 	.word	0x08002e00
 8002458:	08002dc0 	.word	0x08002dc0

0800245c <_close_r>:
 800245c:	b538      	push	{r3, r4, r5, lr}
 800245e:	4c06      	ldr	r4, [pc, #24]	; (8002478 <_close_r+0x1c>)
 8002460:	2300      	movs	r3, #0
 8002462:	4605      	mov	r5, r0
 8002464:	4608      	mov	r0, r1
 8002466:	6023      	str	r3, [r4, #0]
 8002468:	f000 fb7c 	bl	8002b64 <_close>
 800246c:	1c43      	adds	r3, r0, #1
 800246e:	d102      	bne.n	8002476 <_close_r+0x1a>
 8002470:	6823      	ldr	r3, [r4, #0]
 8002472:	b103      	cbz	r3, 8002476 <_close_r+0x1a>
 8002474:	602b      	str	r3, [r5, #0]
 8002476:	bd38      	pop	{r3, r4, r5, pc}
 8002478:	2000011c 	.word	0x2000011c

0800247c <_lseek_r>:
 800247c:	b538      	push	{r3, r4, r5, lr}
 800247e:	4c07      	ldr	r4, [pc, #28]	; (800249c <_lseek_r+0x20>)
 8002480:	4605      	mov	r5, r0
 8002482:	4608      	mov	r0, r1
 8002484:	4611      	mov	r1, r2
 8002486:	2200      	movs	r2, #0
 8002488:	6022      	str	r2, [r4, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	f000 fb82 	bl	8002b94 <_lseek>
 8002490:	1c43      	adds	r3, r0, #1
 8002492:	d102      	bne.n	800249a <_lseek_r+0x1e>
 8002494:	6823      	ldr	r3, [r4, #0]
 8002496:	b103      	cbz	r3, 800249a <_lseek_r+0x1e>
 8002498:	602b      	str	r3, [r5, #0]
 800249a:	bd38      	pop	{r3, r4, r5, pc}
 800249c:	2000011c 	.word	0x2000011c

080024a0 <__swhatbuf_r>:
 80024a0:	b570      	push	{r4, r5, r6, lr}
 80024a2:	460e      	mov	r6, r1
 80024a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024a8:	2900      	cmp	r1, #0
 80024aa:	b096      	sub	sp, #88	; 0x58
 80024ac:	4614      	mov	r4, r2
 80024ae:	461d      	mov	r5, r3
 80024b0:	da07      	bge.n	80024c2 <__swhatbuf_r+0x22>
 80024b2:	2300      	movs	r3, #0
 80024b4:	602b      	str	r3, [r5, #0]
 80024b6:	89b3      	ldrh	r3, [r6, #12]
 80024b8:	061a      	lsls	r2, r3, #24
 80024ba:	d410      	bmi.n	80024de <__swhatbuf_r+0x3e>
 80024bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024c0:	e00e      	b.n	80024e0 <__swhatbuf_r+0x40>
 80024c2:	466a      	mov	r2, sp
 80024c4:	f000 fb2c 	bl	8002b20 <_fstat_r>
 80024c8:	2800      	cmp	r0, #0
 80024ca:	dbf2      	blt.n	80024b2 <__swhatbuf_r+0x12>
 80024cc:	9a01      	ldr	r2, [sp, #4]
 80024ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80024d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80024d6:	425a      	negs	r2, r3
 80024d8:	415a      	adcs	r2, r3
 80024da:	602a      	str	r2, [r5, #0]
 80024dc:	e7ee      	b.n	80024bc <__swhatbuf_r+0x1c>
 80024de:	2340      	movs	r3, #64	; 0x40
 80024e0:	2000      	movs	r0, #0
 80024e2:	6023      	str	r3, [r4, #0]
 80024e4:	b016      	add	sp, #88	; 0x58
 80024e6:	bd70      	pop	{r4, r5, r6, pc}

080024e8 <__smakebuf_r>:
 80024e8:	898b      	ldrh	r3, [r1, #12]
 80024ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80024ec:	079d      	lsls	r5, r3, #30
 80024ee:	4606      	mov	r6, r0
 80024f0:	460c      	mov	r4, r1
 80024f2:	d507      	bpl.n	8002504 <__smakebuf_r+0x1c>
 80024f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80024f8:	6023      	str	r3, [r4, #0]
 80024fa:	6123      	str	r3, [r4, #16]
 80024fc:	2301      	movs	r3, #1
 80024fe:	6163      	str	r3, [r4, #20]
 8002500:	b002      	add	sp, #8
 8002502:	bd70      	pop	{r4, r5, r6, pc}
 8002504:	ab01      	add	r3, sp, #4
 8002506:	466a      	mov	r2, sp
 8002508:	f7ff ffca 	bl	80024a0 <__swhatbuf_r>
 800250c:	9900      	ldr	r1, [sp, #0]
 800250e:	4605      	mov	r5, r0
 8002510:	4630      	mov	r0, r6
 8002512:	f7ff fda7 	bl	8002064 <_malloc_r>
 8002516:	b948      	cbnz	r0, 800252c <__smakebuf_r+0x44>
 8002518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800251c:	059a      	lsls	r2, r3, #22
 800251e:	d4ef      	bmi.n	8002500 <__smakebuf_r+0x18>
 8002520:	f023 0303 	bic.w	r3, r3, #3
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	81a3      	strh	r3, [r4, #12]
 800252a:	e7e3      	b.n	80024f4 <__smakebuf_r+0xc>
 800252c:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <__smakebuf_r+0x7c>)
 800252e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002530:	89a3      	ldrh	r3, [r4, #12]
 8002532:	6020      	str	r0, [r4, #0]
 8002534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002538:	81a3      	strh	r3, [r4, #12]
 800253a:	9b00      	ldr	r3, [sp, #0]
 800253c:	6163      	str	r3, [r4, #20]
 800253e:	9b01      	ldr	r3, [sp, #4]
 8002540:	6120      	str	r0, [r4, #16]
 8002542:	b15b      	cbz	r3, 800255c <__smakebuf_r+0x74>
 8002544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002548:	4630      	mov	r0, r6
 800254a:	f000 fafb 	bl	8002b44 <_isatty_r>
 800254e:	b128      	cbz	r0, 800255c <__smakebuf_r+0x74>
 8002550:	89a3      	ldrh	r3, [r4, #12]
 8002552:	f023 0303 	bic.w	r3, r3, #3
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	81a3      	strh	r3, [r4, #12]
 800255c:	89a3      	ldrh	r3, [r4, #12]
 800255e:	431d      	orrs	r5, r3
 8002560:	81a5      	strh	r5, [r4, #12]
 8002562:	e7cd      	b.n	8002500 <__smakebuf_r+0x18>
 8002564:	08001e15 	.word	0x08001e15

08002568 <__malloc_lock>:
 8002568:	4770      	bx	lr

0800256a <__malloc_unlock>:
 800256a:	4770      	bx	lr

0800256c <__sfputc_r>:
 800256c:	6893      	ldr	r3, [r2, #8]
 800256e:	3b01      	subs	r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	b410      	push	{r4}
 8002574:	6093      	str	r3, [r2, #8]
 8002576:	da08      	bge.n	800258a <__sfputc_r+0x1e>
 8002578:	6994      	ldr	r4, [r2, #24]
 800257a:	42a3      	cmp	r3, r4
 800257c:	db01      	blt.n	8002582 <__sfputc_r+0x16>
 800257e:	290a      	cmp	r1, #10
 8002580:	d103      	bne.n	800258a <__sfputc_r+0x1e>
 8002582:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002586:	f7ff be97 	b.w	80022b8 <__swbuf_r>
 800258a:	6813      	ldr	r3, [r2, #0]
 800258c:	1c58      	adds	r0, r3, #1
 800258e:	6010      	str	r0, [r2, #0]
 8002590:	7019      	strb	r1, [r3, #0]
 8002592:	4608      	mov	r0, r1
 8002594:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002598:	4770      	bx	lr

0800259a <__sfputs_r>:
 800259a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259c:	4606      	mov	r6, r0
 800259e:	460f      	mov	r7, r1
 80025a0:	4614      	mov	r4, r2
 80025a2:	18d5      	adds	r5, r2, r3
 80025a4:	42ac      	cmp	r4, r5
 80025a6:	d101      	bne.n	80025ac <__sfputs_r+0x12>
 80025a8:	2000      	movs	r0, #0
 80025aa:	e007      	b.n	80025bc <__sfputs_r+0x22>
 80025ac:	463a      	mov	r2, r7
 80025ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025b2:	4630      	mov	r0, r6
 80025b4:	f7ff ffda 	bl	800256c <__sfputc_r>
 80025b8:	1c43      	adds	r3, r0, #1
 80025ba:	d1f3      	bne.n	80025a4 <__sfputs_r+0xa>
 80025bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025c0 <_vfiprintf_r>:
 80025c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025c4:	460c      	mov	r4, r1
 80025c6:	b09d      	sub	sp, #116	; 0x74
 80025c8:	4617      	mov	r7, r2
 80025ca:	461d      	mov	r5, r3
 80025cc:	4606      	mov	r6, r0
 80025ce:	b118      	cbz	r0, 80025d8 <_vfiprintf_r+0x18>
 80025d0:	6983      	ldr	r3, [r0, #24]
 80025d2:	b90b      	cbnz	r3, 80025d8 <_vfiprintf_r+0x18>
 80025d4:	f7ff fc3a 	bl	8001e4c <__sinit>
 80025d8:	4b7c      	ldr	r3, [pc, #496]	; (80027cc <_vfiprintf_r+0x20c>)
 80025da:	429c      	cmp	r4, r3
 80025dc:	d158      	bne.n	8002690 <_vfiprintf_r+0xd0>
 80025de:	6874      	ldr	r4, [r6, #4]
 80025e0:	89a3      	ldrh	r3, [r4, #12]
 80025e2:	0718      	lsls	r0, r3, #28
 80025e4:	d55e      	bpl.n	80026a4 <_vfiprintf_r+0xe4>
 80025e6:	6923      	ldr	r3, [r4, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d05b      	beq.n	80026a4 <_vfiprintf_r+0xe4>
 80025ec:	2300      	movs	r3, #0
 80025ee:	9309      	str	r3, [sp, #36]	; 0x24
 80025f0:	2320      	movs	r3, #32
 80025f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025f6:	2330      	movs	r3, #48	; 0x30
 80025f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025fc:	9503      	str	r5, [sp, #12]
 80025fe:	f04f 0b01 	mov.w	fp, #1
 8002602:	46b8      	mov	r8, r7
 8002604:	4645      	mov	r5, r8
 8002606:	f815 3b01 	ldrb.w	r3, [r5], #1
 800260a:	b10b      	cbz	r3, 8002610 <_vfiprintf_r+0x50>
 800260c:	2b25      	cmp	r3, #37	; 0x25
 800260e:	d154      	bne.n	80026ba <_vfiprintf_r+0xfa>
 8002610:	ebb8 0a07 	subs.w	sl, r8, r7
 8002614:	d00b      	beq.n	800262e <_vfiprintf_r+0x6e>
 8002616:	4653      	mov	r3, sl
 8002618:	463a      	mov	r2, r7
 800261a:	4621      	mov	r1, r4
 800261c:	4630      	mov	r0, r6
 800261e:	f7ff ffbc 	bl	800259a <__sfputs_r>
 8002622:	3001      	adds	r0, #1
 8002624:	f000 80c2 	beq.w	80027ac <_vfiprintf_r+0x1ec>
 8002628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800262a:	4453      	add	r3, sl
 800262c:	9309      	str	r3, [sp, #36]	; 0x24
 800262e:	f898 3000 	ldrb.w	r3, [r8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80ba 	beq.w	80027ac <_vfiprintf_r+0x1ec>
 8002638:	2300      	movs	r3, #0
 800263a:	f04f 32ff 	mov.w	r2, #4294967295
 800263e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002642:	9304      	str	r3, [sp, #16]
 8002644:	9307      	str	r3, [sp, #28]
 8002646:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800264a:	931a      	str	r3, [sp, #104]	; 0x68
 800264c:	46a8      	mov	r8, r5
 800264e:	2205      	movs	r2, #5
 8002650:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002654:	485e      	ldr	r0, [pc, #376]	; (80027d0 <_vfiprintf_r+0x210>)
 8002656:	f7fd fdf3 	bl	8000240 <memchr>
 800265a:	9b04      	ldr	r3, [sp, #16]
 800265c:	bb78      	cbnz	r0, 80026be <_vfiprintf_r+0xfe>
 800265e:	06d9      	lsls	r1, r3, #27
 8002660:	bf44      	itt	mi
 8002662:	2220      	movmi	r2, #32
 8002664:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002668:	071a      	lsls	r2, r3, #28
 800266a:	bf44      	itt	mi
 800266c:	222b      	movmi	r2, #43	; 0x2b
 800266e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002672:	782a      	ldrb	r2, [r5, #0]
 8002674:	2a2a      	cmp	r2, #42	; 0x2a
 8002676:	d02a      	beq.n	80026ce <_vfiprintf_r+0x10e>
 8002678:	9a07      	ldr	r2, [sp, #28]
 800267a:	46a8      	mov	r8, r5
 800267c:	2000      	movs	r0, #0
 800267e:	250a      	movs	r5, #10
 8002680:	4641      	mov	r1, r8
 8002682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002686:	3b30      	subs	r3, #48	; 0x30
 8002688:	2b09      	cmp	r3, #9
 800268a:	d969      	bls.n	8002760 <_vfiprintf_r+0x1a0>
 800268c:	b360      	cbz	r0, 80026e8 <_vfiprintf_r+0x128>
 800268e:	e024      	b.n	80026da <_vfiprintf_r+0x11a>
 8002690:	4b50      	ldr	r3, [pc, #320]	; (80027d4 <_vfiprintf_r+0x214>)
 8002692:	429c      	cmp	r4, r3
 8002694:	d101      	bne.n	800269a <_vfiprintf_r+0xda>
 8002696:	68b4      	ldr	r4, [r6, #8]
 8002698:	e7a2      	b.n	80025e0 <_vfiprintf_r+0x20>
 800269a:	4b4f      	ldr	r3, [pc, #316]	; (80027d8 <_vfiprintf_r+0x218>)
 800269c:	429c      	cmp	r4, r3
 800269e:	bf08      	it	eq
 80026a0:	68f4      	ldreq	r4, [r6, #12]
 80026a2:	e79d      	b.n	80025e0 <_vfiprintf_r+0x20>
 80026a4:	4621      	mov	r1, r4
 80026a6:	4630      	mov	r0, r6
 80026a8:	f7ff fe6a 	bl	8002380 <__swsetup_r>
 80026ac:	2800      	cmp	r0, #0
 80026ae:	d09d      	beq.n	80025ec <_vfiprintf_r+0x2c>
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	b01d      	add	sp, #116	; 0x74
 80026b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ba:	46a8      	mov	r8, r5
 80026bc:	e7a2      	b.n	8002604 <_vfiprintf_r+0x44>
 80026be:	4a44      	ldr	r2, [pc, #272]	; (80027d0 <_vfiprintf_r+0x210>)
 80026c0:	1a80      	subs	r0, r0, r2
 80026c2:	fa0b f000 	lsl.w	r0, fp, r0
 80026c6:	4318      	orrs	r0, r3
 80026c8:	9004      	str	r0, [sp, #16]
 80026ca:	4645      	mov	r5, r8
 80026cc:	e7be      	b.n	800264c <_vfiprintf_r+0x8c>
 80026ce:	9a03      	ldr	r2, [sp, #12]
 80026d0:	1d11      	adds	r1, r2, #4
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	9103      	str	r1, [sp, #12]
 80026d6:	2a00      	cmp	r2, #0
 80026d8:	db01      	blt.n	80026de <_vfiprintf_r+0x11e>
 80026da:	9207      	str	r2, [sp, #28]
 80026dc:	e004      	b.n	80026e8 <_vfiprintf_r+0x128>
 80026de:	4252      	negs	r2, r2
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	9207      	str	r2, [sp, #28]
 80026e6:	9304      	str	r3, [sp, #16]
 80026e8:	f898 3000 	ldrb.w	r3, [r8]
 80026ec:	2b2e      	cmp	r3, #46	; 0x2e
 80026ee:	d10e      	bne.n	800270e <_vfiprintf_r+0x14e>
 80026f0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80026f4:	2b2a      	cmp	r3, #42	; 0x2a
 80026f6:	d138      	bne.n	800276a <_vfiprintf_r+0x1aa>
 80026f8:	9b03      	ldr	r3, [sp, #12]
 80026fa:	1d1a      	adds	r2, r3, #4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	9203      	str	r2, [sp, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	bfb8      	it	lt
 8002704:	f04f 33ff 	movlt.w	r3, #4294967295
 8002708:	f108 0802 	add.w	r8, r8, #2
 800270c:	9305      	str	r3, [sp, #20]
 800270e:	4d33      	ldr	r5, [pc, #204]	; (80027dc <_vfiprintf_r+0x21c>)
 8002710:	f898 1000 	ldrb.w	r1, [r8]
 8002714:	2203      	movs	r2, #3
 8002716:	4628      	mov	r0, r5
 8002718:	f7fd fd92 	bl	8000240 <memchr>
 800271c:	b140      	cbz	r0, 8002730 <_vfiprintf_r+0x170>
 800271e:	2340      	movs	r3, #64	; 0x40
 8002720:	1b40      	subs	r0, r0, r5
 8002722:	fa03 f000 	lsl.w	r0, r3, r0
 8002726:	9b04      	ldr	r3, [sp, #16]
 8002728:	4303      	orrs	r3, r0
 800272a:	f108 0801 	add.w	r8, r8, #1
 800272e:	9304      	str	r3, [sp, #16]
 8002730:	f898 1000 	ldrb.w	r1, [r8]
 8002734:	482a      	ldr	r0, [pc, #168]	; (80027e0 <_vfiprintf_r+0x220>)
 8002736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800273a:	2206      	movs	r2, #6
 800273c:	f108 0701 	add.w	r7, r8, #1
 8002740:	f7fd fd7e 	bl	8000240 <memchr>
 8002744:	2800      	cmp	r0, #0
 8002746:	d037      	beq.n	80027b8 <_vfiprintf_r+0x1f8>
 8002748:	4b26      	ldr	r3, [pc, #152]	; (80027e4 <_vfiprintf_r+0x224>)
 800274a:	bb1b      	cbnz	r3, 8002794 <_vfiprintf_r+0x1d4>
 800274c:	9b03      	ldr	r3, [sp, #12]
 800274e:	3307      	adds	r3, #7
 8002750:	f023 0307 	bic.w	r3, r3, #7
 8002754:	3308      	adds	r3, #8
 8002756:	9303      	str	r3, [sp, #12]
 8002758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800275a:	444b      	add	r3, r9
 800275c:	9309      	str	r3, [sp, #36]	; 0x24
 800275e:	e750      	b.n	8002602 <_vfiprintf_r+0x42>
 8002760:	fb05 3202 	mla	r2, r5, r2, r3
 8002764:	2001      	movs	r0, #1
 8002766:	4688      	mov	r8, r1
 8002768:	e78a      	b.n	8002680 <_vfiprintf_r+0xc0>
 800276a:	2300      	movs	r3, #0
 800276c:	f108 0801 	add.w	r8, r8, #1
 8002770:	9305      	str	r3, [sp, #20]
 8002772:	4619      	mov	r1, r3
 8002774:	250a      	movs	r5, #10
 8002776:	4640      	mov	r0, r8
 8002778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800277c:	3a30      	subs	r2, #48	; 0x30
 800277e:	2a09      	cmp	r2, #9
 8002780:	d903      	bls.n	800278a <_vfiprintf_r+0x1ca>
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0c3      	beq.n	800270e <_vfiprintf_r+0x14e>
 8002786:	9105      	str	r1, [sp, #20]
 8002788:	e7c1      	b.n	800270e <_vfiprintf_r+0x14e>
 800278a:	fb05 2101 	mla	r1, r5, r1, r2
 800278e:	2301      	movs	r3, #1
 8002790:	4680      	mov	r8, r0
 8002792:	e7f0      	b.n	8002776 <_vfiprintf_r+0x1b6>
 8002794:	ab03      	add	r3, sp, #12
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	4622      	mov	r2, r4
 800279a:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <_vfiprintf_r+0x228>)
 800279c:	a904      	add	r1, sp, #16
 800279e:	4630      	mov	r0, r6
 80027a0:	f3af 8000 	nop.w
 80027a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80027a8:	4681      	mov	r9, r0
 80027aa:	d1d5      	bne.n	8002758 <_vfiprintf_r+0x198>
 80027ac:	89a3      	ldrh	r3, [r4, #12]
 80027ae:	065b      	lsls	r3, r3, #25
 80027b0:	f53f af7e 	bmi.w	80026b0 <_vfiprintf_r+0xf0>
 80027b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027b6:	e77d      	b.n	80026b4 <_vfiprintf_r+0xf4>
 80027b8:	ab03      	add	r3, sp, #12
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	4622      	mov	r2, r4
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <_vfiprintf_r+0x228>)
 80027c0:	a904      	add	r1, sp, #16
 80027c2:	4630      	mov	r0, r6
 80027c4:	f000 f888 	bl	80028d8 <_printf_i>
 80027c8:	e7ec      	b.n	80027a4 <_vfiprintf_r+0x1e4>
 80027ca:	bf00      	nop
 80027cc:	08002de0 	.word	0x08002de0
 80027d0:	08002e24 	.word	0x08002e24
 80027d4:	08002e00 	.word	0x08002e00
 80027d8:	08002dc0 	.word	0x08002dc0
 80027dc:	08002e2a 	.word	0x08002e2a
 80027e0:	08002e2e 	.word	0x08002e2e
 80027e4:	00000000 	.word	0x00000000
 80027e8:	0800259b 	.word	0x0800259b

080027ec <_printf_common>:
 80027ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027f0:	4691      	mov	r9, r2
 80027f2:	461f      	mov	r7, r3
 80027f4:	688a      	ldr	r2, [r1, #8]
 80027f6:	690b      	ldr	r3, [r1, #16]
 80027f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027fc:	4293      	cmp	r3, r2
 80027fe:	bfb8      	it	lt
 8002800:	4613      	movlt	r3, r2
 8002802:	f8c9 3000 	str.w	r3, [r9]
 8002806:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800280a:	4606      	mov	r6, r0
 800280c:	460c      	mov	r4, r1
 800280e:	b112      	cbz	r2, 8002816 <_printf_common+0x2a>
 8002810:	3301      	adds	r3, #1
 8002812:	f8c9 3000 	str.w	r3, [r9]
 8002816:	6823      	ldr	r3, [r4, #0]
 8002818:	0699      	lsls	r1, r3, #26
 800281a:	bf42      	ittt	mi
 800281c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002820:	3302      	addmi	r3, #2
 8002822:	f8c9 3000 	strmi.w	r3, [r9]
 8002826:	6825      	ldr	r5, [r4, #0]
 8002828:	f015 0506 	ands.w	r5, r5, #6
 800282c:	d107      	bne.n	800283e <_printf_common+0x52>
 800282e:	f104 0a19 	add.w	sl, r4, #25
 8002832:	68e3      	ldr	r3, [r4, #12]
 8002834:	f8d9 2000 	ldr.w	r2, [r9]
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	42ab      	cmp	r3, r5
 800283c:	dc28      	bgt.n	8002890 <_printf_common+0xa4>
 800283e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002842:	6822      	ldr	r2, [r4, #0]
 8002844:	3300      	adds	r3, #0
 8002846:	bf18      	it	ne
 8002848:	2301      	movne	r3, #1
 800284a:	0692      	lsls	r2, r2, #26
 800284c:	d42d      	bmi.n	80028aa <_printf_common+0xbe>
 800284e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002852:	4639      	mov	r1, r7
 8002854:	4630      	mov	r0, r6
 8002856:	47c0      	blx	r8
 8002858:	3001      	adds	r0, #1
 800285a:	d020      	beq.n	800289e <_printf_common+0xb2>
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	68e5      	ldr	r5, [r4, #12]
 8002860:	f8d9 2000 	ldr.w	r2, [r9]
 8002864:	f003 0306 	and.w	r3, r3, #6
 8002868:	2b04      	cmp	r3, #4
 800286a:	bf08      	it	eq
 800286c:	1aad      	subeq	r5, r5, r2
 800286e:	68a3      	ldr	r3, [r4, #8]
 8002870:	6922      	ldr	r2, [r4, #16]
 8002872:	bf0c      	ite	eq
 8002874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002878:	2500      	movne	r5, #0
 800287a:	4293      	cmp	r3, r2
 800287c:	bfc4      	itt	gt
 800287e:	1a9b      	subgt	r3, r3, r2
 8002880:	18ed      	addgt	r5, r5, r3
 8002882:	f04f 0900 	mov.w	r9, #0
 8002886:	341a      	adds	r4, #26
 8002888:	454d      	cmp	r5, r9
 800288a:	d11a      	bne.n	80028c2 <_printf_common+0xd6>
 800288c:	2000      	movs	r0, #0
 800288e:	e008      	b.n	80028a2 <_printf_common+0xb6>
 8002890:	2301      	movs	r3, #1
 8002892:	4652      	mov	r2, sl
 8002894:	4639      	mov	r1, r7
 8002896:	4630      	mov	r0, r6
 8002898:	47c0      	blx	r8
 800289a:	3001      	adds	r0, #1
 800289c:	d103      	bne.n	80028a6 <_printf_common+0xba>
 800289e:	f04f 30ff 	mov.w	r0, #4294967295
 80028a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028a6:	3501      	adds	r5, #1
 80028a8:	e7c3      	b.n	8002832 <_printf_common+0x46>
 80028aa:	18e1      	adds	r1, r4, r3
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	2030      	movs	r0, #48	; 0x30
 80028b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028b4:	4422      	add	r2, r4
 80028b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028be:	3302      	adds	r3, #2
 80028c0:	e7c5      	b.n	800284e <_printf_common+0x62>
 80028c2:	2301      	movs	r3, #1
 80028c4:	4622      	mov	r2, r4
 80028c6:	4639      	mov	r1, r7
 80028c8:	4630      	mov	r0, r6
 80028ca:	47c0      	blx	r8
 80028cc:	3001      	adds	r0, #1
 80028ce:	d0e6      	beq.n	800289e <_printf_common+0xb2>
 80028d0:	f109 0901 	add.w	r9, r9, #1
 80028d4:	e7d8      	b.n	8002888 <_printf_common+0x9c>
	...

080028d8 <_printf_i>:
 80028d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80028e0:	460c      	mov	r4, r1
 80028e2:	7e09      	ldrb	r1, [r1, #24]
 80028e4:	b085      	sub	sp, #20
 80028e6:	296e      	cmp	r1, #110	; 0x6e
 80028e8:	4617      	mov	r7, r2
 80028ea:	4606      	mov	r6, r0
 80028ec:	4698      	mov	r8, r3
 80028ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80028f0:	f000 80b3 	beq.w	8002a5a <_printf_i+0x182>
 80028f4:	d822      	bhi.n	800293c <_printf_i+0x64>
 80028f6:	2963      	cmp	r1, #99	; 0x63
 80028f8:	d036      	beq.n	8002968 <_printf_i+0x90>
 80028fa:	d80a      	bhi.n	8002912 <_printf_i+0x3a>
 80028fc:	2900      	cmp	r1, #0
 80028fe:	f000 80b9 	beq.w	8002a74 <_printf_i+0x19c>
 8002902:	2958      	cmp	r1, #88	; 0x58
 8002904:	f000 8083 	beq.w	8002a0e <_printf_i+0x136>
 8002908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800290c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002910:	e032      	b.n	8002978 <_printf_i+0xa0>
 8002912:	2964      	cmp	r1, #100	; 0x64
 8002914:	d001      	beq.n	800291a <_printf_i+0x42>
 8002916:	2969      	cmp	r1, #105	; 0x69
 8002918:	d1f6      	bne.n	8002908 <_printf_i+0x30>
 800291a:	6820      	ldr	r0, [r4, #0]
 800291c:	6813      	ldr	r3, [r2, #0]
 800291e:	0605      	lsls	r5, r0, #24
 8002920:	f103 0104 	add.w	r1, r3, #4
 8002924:	d52a      	bpl.n	800297c <_printf_i+0xa4>
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6011      	str	r1, [r2, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	da03      	bge.n	8002936 <_printf_i+0x5e>
 800292e:	222d      	movs	r2, #45	; 0x2d
 8002930:	425b      	negs	r3, r3
 8002932:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002936:	486f      	ldr	r0, [pc, #444]	; (8002af4 <_printf_i+0x21c>)
 8002938:	220a      	movs	r2, #10
 800293a:	e039      	b.n	80029b0 <_printf_i+0xd8>
 800293c:	2973      	cmp	r1, #115	; 0x73
 800293e:	f000 809d 	beq.w	8002a7c <_printf_i+0x1a4>
 8002942:	d808      	bhi.n	8002956 <_printf_i+0x7e>
 8002944:	296f      	cmp	r1, #111	; 0x6f
 8002946:	d020      	beq.n	800298a <_printf_i+0xb2>
 8002948:	2970      	cmp	r1, #112	; 0x70
 800294a:	d1dd      	bne.n	8002908 <_printf_i+0x30>
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	f043 0320 	orr.w	r3, r3, #32
 8002952:	6023      	str	r3, [r4, #0]
 8002954:	e003      	b.n	800295e <_printf_i+0x86>
 8002956:	2975      	cmp	r1, #117	; 0x75
 8002958:	d017      	beq.n	800298a <_printf_i+0xb2>
 800295a:	2978      	cmp	r1, #120	; 0x78
 800295c:	d1d4      	bne.n	8002908 <_printf_i+0x30>
 800295e:	2378      	movs	r3, #120	; 0x78
 8002960:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002964:	4864      	ldr	r0, [pc, #400]	; (8002af8 <_printf_i+0x220>)
 8002966:	e055      	b.n	8002a14 <_printf_i+0x13c>
 8002968:	6813      	ldr	r3, [r2, #0]
 800296a:	1d19      	adds	r1, r3, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6011      	str	r1, [r2, #0]
 8002970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002978:	2301      	movs	r3, #1
 800297a:	e08c      	b.n	8002a96 <_printf_i+0x1be>
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6011      	str	r1, [r2, #0]
 8002980:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002984:	bf18      	it	ne
 8002986:	b21b      	sxthne	r3, r3
 8002988:	e7cf      	b.n	800292a <_printf_i+0x52>
 800298a:	6813      	ldr	r3, [r2, #0]
 800298c:	6825      	ldr	r5, [r4, #0]
 800298e:	1d18      	adds	r0, r3, #4
 8002990:	6010      	str	r0, [r2, #0]
 8002992:	0628      	lsls	r0, r5, #24
 8002994:	d501      	bpl.n	800299a <_printf_i+0xc2>
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	e002      	b.n	80029a0 <_printf_i+0xc8>
 800299a:	0668      	lsls	r0, r5, #25
 800299c:	d5fb      	bpl.n	8002996 <_printf_i+0xbe>
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	4854      	ldr	r0, [pc, #336]	; (8002af4 <_printf_i+0x21c>)
 80029a2:	296f      	cmp	r1, #111	; 0x6f
 80029a4:	bf14      	ite	ne
 80029a6:	220a      	movne	r2, #10
 80029a8:	2208      	moveq	r2, #8
 80029aa:	2100      	movs	r1, #0
 80029ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029b0:	6865      	ldr	r5, [r4, #4]
 80029b2:	60a5      	str	r5, [r4, #8]
 80029b4:	2d00      	cmp	r5, #0
 80029b6:	f2c0 8095 	blt.w	8002ae4 <_printf_i+0x20c>
 80029ba:	6821      	ldr	r1, [r4, #0]
 80029bc:	f021 0104 	bic.w	r1, r1, #4
 80029c0:	6021      	str	r1, [r4, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d13d      	bne.n	8002a42 <_printf_i+0x16a>
 80029c6:	2d00      	cmp	r5, #0
 80029c8:	f040 808e 	bne.w	8002ae8 <_printf_i+0x210>
 80029cc:	4665      	mov	r5, ip
 80029ce:	2a08      	cmp	r2, #8
 80029d0:	d10b      	bne.n	80029ea <_printf_i+0x112>
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	07db      	lsls	r3, r3, #31
 80029d6:	d508      	bpl.n	80029ea <_printf_i+0x112>
 80029d8:	6923      	ldr	r3, [r4, #16]
 80029da:	6862      	ldr	r2, [r4, #4]
 80029dc:	429a      	cmp	r2, r3
 80029de:	bfde      	ittt	le
 80029e0:	2330      	movle	r3, #48	; 0x30
 80029e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029ea:	ebac 0305 	sub.w	r3, ip, r5
 80029ee:	6123      	str	r3, [r4, #16]
 80029f0:	f8cd 8000 	str.w	r8, [sp]
 80029f4:	463b      	mov	r3, r7
 80029f6:	aa03      	add	r2, sp, #12
 80029f8:	4621      	mov	r1, r4
 80029fa:	4630      	mov	r0, r6
 80029fc:	f7ff fef6 	bl	80027ec <_printf_common>
 8002a00:	3001      	adds	r0, #1
 8002a02:	d14d      	bne.n	8002aa0 <_printf_i+0x1c8>
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	b005      	add	sp, #20
 8002a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a0e:	4839      	ldr	r0, [pc, #228]	; (8002af4 <_printf_i+0x21c>)
 8002a10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002a14:	6813      	ldr	r3, [r2, #0]
 8002a16:	6821      	ldr	r1, [r4, #0]
 8002a18:	1d1d      	adds	r5, r3, #4
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6015      	str	r5, [r2, #0]
 8002a1e:	060a      	lsls	r2, r1, #24
 8002a20:	d50b      	bpl.n	8002a3a <_printf_i+0x162>
 8002a22:	07ca      	lsls	r2, r1, #31
 8002a24:	bf44      	itt	mi
 8002a26:	f041 0120 	orrmi.w	r1, r1, #32
 8002a2a:	6021      	strmi	r1, [r4, #0]
 8002a2c:	b91b      	cbnz	r3, 8002a36 <_printf_i+0x15e>
 8002a2e:	6822      	ldr	r2, [r4, #0]
 8002a30:	f022 0220 	bic.w	r2, r2, #32
 8002a34:	6022      	str	r2, [r4, #0]
 8002a36:	2210      	movs	r2, #16
 8002a38:	e7b7      	b.n	80029aa <_printf_i+0xd2>
 8002a3a:	064d      	lsls	r5, r1, #25
 8002a3c:	bf48      	it	mi
 8002a3e:	b29b      	uxthmi	r3, r3
 8002a40:	e7ef      	b.n	8002a22 <_printf_i+0x14a>
 8002a42:	4665      	mov	r5, ip
 8002a44:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a48:	fb02 3311 	mls	r3, r2, r1, r3
 8002a4c:	5cc3      	ldrb	r3, [r0, r3]
 8002a4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002a52:	460b      	mov	r3, r1
 8002a54:	2900      	cmp	r1, #0
 8002a56:	d1f5      	bne.n	8002a44 <_printf_i+0x16c>
 8002a58:	e7b9      	b.n	80029ce <_printf_i+0xf6>
 8002a5a:	6813      	ldr	r3, [r2, #0]
 8002a5c:	6825      	ldr	r5, [r4, #0]
 8002a5e:	6961      	ldr	r1, [r4, #20]
 8002a60:	1d18      	adds	r0, r3, #4
 8002a62:	6010      	str	r0, [r2, #0]
 8002a64:	0628      	lsls	r0, r5, #24
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	d501      	bpl.n	8002a6e <_printf_i+0x196>
 8002a6a:	6019      	str	r1, [r3, #0]
 8002a6c:	e002      	b.n	8002a74 <_printf_i+0x19c>
 8002a6e:	066a      	lsls	r2, r5, #25
 8002a70:	d5fb      	bpl.n	8002a6a <_printf_i+0x192>
 8002a72:	8019      	strh	r1, [r3, #0]
 8002a74:	2300      	movs	r3, #0
 8002a76:	6123      	str	r3, [r4, #16]
 8002a78:	4665      	mov	r5, ip
 8002a7a:	e7b9      	b.n	80029f0 <_printf_i+0x118>
 8002a7c:	6813      	ldr	r3, [r2, #0]
 8002a7e:	1d19      	adds	r1, r3, #4
 8002a80:	6011      	str	r1, [r2, #0]
 8002a82:	681d      	ldr	r5, [r3, #0]
 8002a84:	6862      	ldr	r2, [r4, #4]
 8002a86:	2100      	movs	r1, #0
 8002a88:	4628      	mov	r0, r5
 8002a8a:	f7fd fbd9 	bl	8000240 <memchr>
 8002a8e:	b108      	cbz	r0, 8002a94 <_printf_i+0x1bc>
 8002a90:	1b40      	subs	r0, r0, r5
 8002a92:	6060      	str	r0, [r4, #4]
 8002a94:	6863      	ldr	r3, [r4, #4]
 8002a96:	6123      	str	r3, [r4, #16]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a9e:	e7a7      	b.n	80029f0 <_printf_i+0x118>
 8002aa0:	6923      	ldr	r3, [r4, #16]
 8002aa2:	462a      	mov	r2, r5
 8002aa4:	4639      	mov	r1, r7
 8002aa6:	4630      	mov	r0, r6
 8002aa8:	47c0      	blx	r8
 8002aaa:	3001      	adds	r0, #1
 8002aac:	d0aa      	beq.n	8002a04 <_printf_i+0x12c>
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	079b      	lsls	r3, r3, #30
 8002ab2:	d413      	bmi.n	8002adc <_printf_i+0x204>
 8002ab4:	68e0      	ldr	r0, [r4, #12]
 8002ab6:	9b03      	ldr	r3, [sp, #12]
 8002ab8:	4298      	cmp	r0, r3
 8002aba:	bfb8      	it	lt
 8002abc:	4618      	movlt	r0, r3
 8002abe:	e7a3      	b.n	8002a08 <_printf_i+0x130>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	464a      	mov	r2, r9
 8002ac4:	4639      	mov	r1, r7
 8002ac6:	4630      	mov	r0, r6
 8002ac8:	47c0      	blx	r8
 8002aca:	3001      	adds	r0, #1
 8002acc:	d09a      	beq.n	8002a04 <_printf_i+0x12c>
 8002ace:	3501      	adds	r5, #1
 8002ad0:	68e3      	ldr	r3, [r4, #12]
 8002ad2:	9a03      	ldr	r2, [sp, #12]
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	42ab      	cmp	r3, r5
 8002ad8:	dcf2      	bgt.n	8002ac0 <_printf_i+0x1e8>
 8002ada:	e7eb      	b.n	8002ab4 <_printf_i+0x1dc>
 8002adc:	2500      	movs	r5, #0
 8002ade:	f104 0919 	add.w	r9, r4, #25
 8002ae2:	e7f5      	b.n	8002ad0 <_printf_i+0x1f8>
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1ac      	bne.n	8002a42 <_printf_i+0x16a>
 8002ae8:	7803      	ldrb	r3, [r0, #0]
 8002aea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002aee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002af2:	e76c      	b.n	80029ce <_printf_i+0xf6>
 8002af4:	08002e35 	.word	0x08002e35
 8002af8:	08002e46 	.word	0x08002e46

08002afc <_read_r>:
 8002afc:	b538      	push	{r3, r4, r5, lr}
 8002afe:	4c07      	ldr	r4, [pc, #28]	; (8002b1c <_read_r+0x20>)
 8002b00:	4605      	mov	r5, r0
 8002b02:	4608      	mov	r0, r1
 8002b04:	4611      	mov	r1, r2
 8002b06:	2200      	movs	r2, #0
 8002b08:	6022      	str	r2, [r4, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f7fd ff52 	bl	80009b4 <_read>
 8002b10:	1c43      	adds	r3, r0, #1
 8002b12:	d102      	bne.n	8002b1a <_read_r+0x1e>
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	b103      	cbz	r3, 8002b1a <_read_r+0x1e>
 8002b18:	602b      	str	r3, [r5, #0]
 8002b1a:	bd38      	pop	{r3, r4, r5, pc}
 8002b1c:	2000011c 	.word	0x2000011c

08002b20 <_fstat_r>:
 8002b20:	b538      	push	{r3, r4, r5, lr}
 8002b22:	4c07      	ldr	r4, [pc, #28]	; (8002b40 <_fstat_r+0x20>)
 8002b24:	2300      	movs	r3, #0
 8002b26:	4605      	mov	r5, r0
 8002b28:	4608      	mov	r0, r1
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	6023      	str	r3, [r4, #0]
 8002b2e:	f000 f821 	bl	8002b74 <_fstat>
 8002b32:	1c43      	adds	r3, r0, #1
 8002b34:	d102      	bne.n	8002b3c <_fstat_r+0x1c>
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	b103      	cbz	r3, 8002b3c <_fstat_r+0x1c>
 8002b3a:	602b      	str	r3, [r5, #0]
 8002b3c:	bd38      	pop	{r3, r4, r5, pc}
 8002b3e:	bf00      	nop
 8002b40:	2000011c 	.word	0x2000011c

08002b44 <_isatty_r>:
 8002b44:	b538      	push	{r3, r4, r5, lr}
 8002b46:	4c06      	ldr	r4, [pc, #24]	; (8002b60 <_isatty_r+0x1c>)
 8002b48:	2300      	movs	r3, #0
 8002b4a:	4605      	mov	r5, r0
 8002b4c:	4608      	mov	r0, r1
 8002b4e:	6023      	str	r3, [r4, #0]
 8002b50:	f000 f818 	bl	8002b84 <_isatty>
 8002b54:	1c43      	adds	r3, r0, #1
 8002b56:	d102      	bne.n	8002b5e <_isatty_r+0x1a>
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	b103      	cbz	r3, 8002b5e <_isatty_r+0x1a>
 8002b5c:	602b      	str	r3, [r5, #0]
 8002b5e:	bd38      	pop	{r3, r4, r5, pc}
 8002b60:	2000011c 	.word	0x2000011c

08002b64 <_close>:
 8002b64:	4b02      	ldr	r3, [pc, #8]	; (8002b70 <_close+0xc>)
 8002b66:	2258      	movs	r2, #88	; 0x58
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b6e:	4770      	bx	lr
 8002b70:	2000011c 	.word	0x2000011c

08002b74 <_fstat>:
 8002b74:	4b02      	ldr	r3, [pc, #8]	; (8002b80 <_fstat+0xc>)
 8002b76:	2258      	movs	r2, #88	; 0x58
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b7e:	4770      	bx	lr
 8002b80:	2000011c 	.word	0x2000011c

08002b84 <_isatty>:
 8002b84:	4b02      	ldr	r3, [pc, #8]	; (8002b90 <_isatty+0xc>)
 8002b86:	2258      	movs	r2, #88	; 0x58
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	2000011c 	.word	0x2000011c

08002b94 <_lseek>:
 8002b94:	4b02      	ldr	r3, [pc, #8]	; (8002ba0 <_lseek+0xc>)
 8002b96:	2258      	movs	r2, #88	; 0x58
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b9e:	4770      	bx	lr
 8002ba0:	2000011c 	.word	0x2000011c

08002ba4 <_sbrk>:
 8002ba4:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <_sbrk+0x14>)
 8002ba6:	6819      	ldr	r1, [r3, #0]
 8002ba8:	4602      	mov	r2, r0
 8002baa:	b909      	cbnz	r1, 8002bb0 <_sbrk+0xc>
 8002bac:	4903      	ldr	r1, [pc, #12]	; (8002bbc <_sbrk+0x18>)
 8002bae:	6019      	str	r1, [r3, #0]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	4402      	add	r2, r0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	4770      	bx	lr
 8002bb8:	20000094 	.word	0x20000094
 8002bbc:	20000120 	.word	0x20000120

08002bc0 <_init>:
 8002bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc2:	bf00      	nop
 8002bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc6:	bc08      	pop	{r3}
 8002bc8:	469e      	mov	lr, r3
 8002bca:	4770      	bx	lr

08002bcc <_fini>:
 8002bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bce:	bf00      	nop
 8002bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bd2:	bc08      	pop	{r3}
 8002bd4:	469e      	mov	lr, r3
 8002bd6:	4770      	bx	lr
