
LAB-01-Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a20  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e68  08002e68  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002e68  08002e68  00012e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e70  08002e70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e70  08002e70  00012e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000070  08002ee8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  200001a0  08002ee8  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fb4  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000167c  00000000  00000000  0002a052  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000638  00000000  00000000  0002b6d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f0  00000000  00000000  0002bd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002be23  00000000  00000000  0002c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000681d  00000000  00000000  0005811b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010a05d  00000000  00000000  0005e938  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00168995  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017f8  00000000  00000000  00168a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00002f94  00000000  00000000  0016a208  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .stab         0000006c  00000000  00000000  0016d19c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000000e3  00000000  00000000  0016d208  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08002c08 	.word	0x08002c08

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08002c08 	.word	0x08002c08

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:

//------------------------------------------------------------------------------------
// MAIN Routine
//------------------------------------------------------------------------------------
int main(void)
{
 80005e0:	b530      	push	{r4, r5, lr}
 80005e2:	b083      	sub	sp, #12
    Sys_Init(); // This always goes at the top of main (defined in init.c)
 80005e4:	f000 f8ba 	bl	800075c <Sys_Init>

    char choice;
	char in[3];
    int size = 3;

    printf("\033[2J\033[;H"); // Erase screen & move cursor to home position
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <main+0x84>)
 80005ea:	f001 fd2f 	bl	800204c <iprintf>
    fflush(stdout); // Need to flush stdout after using printf that doesn't end in \n
 80005ee:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <main+0x88>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	6898      	ldr	r0, [r3, #8]
 80005f4:	f001 fb4c 	bl	8001c90 <fflush>
    //printf("Test of the printf() function.\n\n");

    // Need to enable clock for peripheral bus on GPIO Port J
    __HAL_RCC_GPIOJ_CLK_ENABLE(); 	// Through HAL
 80005f8:	4b1c      	ldr	r3, [pc, #112]	; (800066c <main+0x8c>)
 80005fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000600:	631a      	str	r2, [r3, #48]	; 0x30
 8000602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000604:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000608:	9201      	str	r2, [sp, #4]
 800060a:	9a01      	ldr	r2, [sp, #4]
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOJEN; // or through registers
 800060c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000612:	631a      	str	r2, [r3, #48]	; 0x30
    //// Below two lines are example on how to access a register by knowing it's memory address
    //volatile uint32_t * RCC_AHB1_CLOCK_ENABLE = (uint32_t*) 0x40023830U; // Enable clock for peripheral bus on GPIO Port J
    //*RCC_AHB1_CLOCK_ENABLE |= 512U; // Bitmask for RCC AHB1 initialization: 0x00000200U or 512U in decimal

    GPIOJ->MODER |= 1024U; //Bitmask for GPIO J Pin 5 initialization (set it to Output mode): 0x00000400U or 1024U in decimal
 8000614:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800061e:	601a      	str	r2, [r3, #0]
    GPIOJ->BSRR = (uint16_t)GPIO_PIN_5; // Turn on Green LED (LED2)
 8000620:	2120      	movs	r1, #32
 8000622:	6199      	str	r1, [r3, #24]
    GPIOJ->BSRR = (uint32_t)GPIO_PIN_5 << 16; // Turn off Green LED (LED2)
 8000624:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000628:	619a      	str	r2, [r3, #24]
    GPIOJ->ODR ^= (uint16_t)GPIO_PIN_5; // Toggle LED2
 800062a:	695a      	ldr	r2, [r3, #20]
 800062c:	404a      	eors	r2, r1
 800062e:	615a      	str	r2, [r3, #20]
// It doesn't get lower level than this!
//    volatile uint32_t * GREENLEDMODER = (uint32_t*) 0x40022400U; // Init GPIO J Pin 5 (LED2 with no Alt. func.) to Output
//    *GREENLEDMODER |= 1024U; // Bitmask for GPIO J Pin 5 initialization: 0x00000400U or 1024U in decimal

    volatile uint32_t * GREENLEDBSRR = (uint32_t*) 0x40022418U; // Address of GPIO J Bit Set/Reset Register
    *GREENLEDBSRR = (uint16_t)0x0020U; // Turn on Green LED (LED2)
 8000630:	3318      	adds	r3, #24
 8000632:	6019      	str	r1, [r3, #0]

    HAL_Delay(1000); // Pause for a second
 8000634:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000638:	f000 f9be 	bl	80009b8 <HAL_Delay>
//        printf("( Welcome to Microprocessor Systems )\r\n\n\n");
//        printf("1=repeat, 2=clear, 0=quit.\r\n\n"); // Menu of choices
				// Don't forget to end printf with newline or run fflush(stdout) after it!

//        choice = uart_getchar(&USB_UART, 1);
    	choice = getchar();
 800063c:	f001 fc20 	bl	8001e80 <getchar>
 8000640:	4605      	mov	r5, r0
//    	putchar(choice);
    	printf("\033[2J\033[;H");
 8000642:	4808      	ldr	r0, [pc, #32]	; (8000664 <main+0x84>)
 8000644:	f001 fd02 	bl	800204c <iprintf>
    	fflush(stdout);
 8000648:	4c07      	ldr	r4, [pc, #28]	; (8000668 <main+0x88>)
 800064a:	6823      	ldr	r3, [r4, #0]
 800064c:	6898      	ldr	r0, [r3, #8]
 800064e:	f001 fb1f 	bl	8001c90 <fflush>
    	printf("The keyboard character is %c.", choice);
 8000652:	b2e9      	uxtb	r1, r5
 8000654:	4806      	ldr	r0, [pc, #24]	; (8000670 <main+0x90>)
 8000656:	f001 fcf9 	bl	800204c <iprintf>
    	fflush(stdout);
 800065a:	6823      	ldr	r3, [r4, #0]
 800065c:	6898      	ldr	r0, [r3, #8]
 800065e:	f001 fb17 	bl	8001c90 <fflush>
 8000662:	e7eb      	b.n	800063c <main+0x5c>
 8000664:	08002c38 	.word	0x08002c38
 8000668:	2000000c 	.word	0x2000000c
 800066c:	40023800 	.word	0x40023800
 8000670:	08002c44 	.word	0x08002c44

08000674 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8000674:	b500      	push	{lr}
 8000676:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000680:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800068a:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 800068c:	2219      	movs	r2, #25
 800068e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000690:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000694:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000696:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000698:	2309      	movs	r3, #9
 800069a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 800069c:	2307      	movs	r3, #7
 800069e:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80006a0:	4668      	mov	r0, sp
 80006a2:	f000 fb23 	bl	8000cec <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 80006a6:	b100      	cbz	r0, 80006aa <SystemClock_Config+0x36>
 80006a8:	e7fe      	b.n	80006a8 <SystemClock_Config+0x34>
    while(1) { ; }
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 80006aa:	f000 fae1 	bl	8000c70 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 80006ae:	b100      	cbz	r0, 80006b2 <SystemClock_Config+0x3e>
 80006b0:	e7fe      	b.n	80006b0 <SystemClock_Config+0x3c>
    while(1) { ; }
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80006b2:	230f      	movs	r3, #15
 80006b4:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c8:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80006ca:	2107      	movs	r1, #7
 80006cc:	a80d      	add	r0, sp, #52	; 0x34
 80006ce:	f000 fd83 	bl	80011d8 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 80006d2:	b100      	cbz	r0, 80006d6 <SystemClock_Config+0x62>
 80006d4:	e7fe      	b.n	80006d4 <SystemClock_Config+0x60>
    while(1) { ; }
  }
}
 80006d6:	b013      	add	sp, #76	; 0x4c
 80006d8:	f85d fb04 	ldr.w	pc, [sp], #4

080006dc <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 80006dc:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006e2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <CPU_CACHE_Enable+0x7c>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006f2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006f6:	695a      	ldr	r2, [r3, #20]
 80006f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80006fc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000702:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000706:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800070a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800070e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000712:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8000716:	e00f      	b.n	8000738 <CPU_CACHE_Enable+0x5c>
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000718:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800071a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800071e:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8000722:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000726:	490c      	ldr	r1, [pc, #48]	; (8000758 <CPU_CACHE_Enable+0x7c>)
 8000728:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800072c:	1e53      	subs	r3, r2, #1
 800072e:	2a00      	cmp	r2, #0
 8000730:	d1f2      	bne.n	8000718 <CPU_CACHE_Enable+0x3c>
    } while(sets-- != 0U);
 8000732:	1e43      	subs	r3, r0, #1
 8000734:	b118      	cbz	r0, 800073e <CPU_CACHE_Enable+0x62>
 8000736:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000738:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 800073c:	e7ed      	b.n	800071a <CPU_CACHE_Enable+0x3e>
 800073e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000742:	694b      	ldr	r3, [r1, #20]
 8000744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000748:	614b      	str	r3, [r1, #20]
 800074a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800074e:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000752:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 800075c:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 800075e:	f7ff ffbd 	bl	80006dc <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 8000762:	f000 f901 	bl	8000968 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8000766:	f7ff ff85 	bl	8000674 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 800076a:	4a03      	ldr	r2, [pc, #12]	; (8000778 <Sys_Init+0x1c>)
 800076c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <Sys_Init+0x20>)
 8000772:	f000 f873 	bl	800085c <initUart>
}
 8000776:	bd08      	pop	{r3, pc}
 8000778:	40011000 	.word	0x40011000
 800077c:	20000098 	.word	0x20000098

08000780 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 8000780:	b508      	push	{r3, lr}
  HAL_IncTick();
 8000782:	f000 f907 	bl	8000994 <HAL_IncTick>
}
 8000786:	bd08      	pop	{r3, pc}

08000788 <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000788:	b530      	push	{r4, r5, lr}
 800078a:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 800078c:	6803      	ldr	r3, [r0, #0]
 800078e:	4a2e      	ldr	r2, [pc, #184]	; (8000848 <HAL_UART_MspInit+0xc0>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d004      	beq.n	800079e <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 8000794:	4a2d      	ldr	r2, [pc, #180]	; (800084c <HAL_UART_MspInit+0xc4>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d02c      	beq.n	80007f4 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 800079a:	b00b      	add	sp, #44	; 0x2c
 800079c:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 800079e:	4c2c      	ldr	r4, [pc, #176]	; (8000850 <HAL_UART_MspInit+0xc8>)
 80007a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007a2:	f043 0301 	orr.w	r3, r3, #1
 80007a6:	6323      	str	r3, [r4, #48]	; 0x30
 80007a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80007bc:	2301      	movs	r3, #1
 80007be:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007c4:	2307      	movs	r3, #7
 80007c6:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 80007c8:	4d22      	ldr	r5, [pc, #136]	; (8000854 <HAL_UART_MspInit+0xcc>)
 80007ca:	a905      	add	r1, sp, #20
 80007cc:	4628      	mov	r0, r5
 80007ce:	f000 f961 	bl	8000a94 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d6:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 80007d8:	a905      	add	r1, sp, #20
 80007da:	4628      	mov	r0, r5
 80007dc:	f000 f95a 	bl	8000a94 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 80007e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	6463      	str	r3, [r4, #68]	; 0x44
 80007e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	9b02      	ldr	r3, [sp, #8]
 80007f2:	e7d2      	b.n	800079a <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 80007f4:	4c16      	ldr	r4, [pc, #88]	; (8000850 <HAL_UART_MspInit+0xc8>)
 80007f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6323      	str	r3, [r4, #48]	; 0x30
 80007fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	9303      	str	r3, [sp, #12]
 8000806:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000808:	2340      	movs	r3, #64	; 0x40
 800080a:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000810:	2301      	movs	r3, #1
 8000812:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000814:	2303      	movs	r3, #3
 8000816:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000818:	2308      	movs	r3, #8
 800081a:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 800081c:	4d0e      	ldr	r5, [pc, #56]	; (8000858 <HAL_UART_MspInit+0xd0>)
 800081e:	a905      	add	r1, sp, #20
 8000820:	4628      	mov	r0, r5
 8000822:	f000 f937 	bl	8000a94 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000826:	2380      	movs	r3, #128	; 0x80
 8000828:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 800082a:	a905      	add	r1, sp, #20
 800082c:	4628      	mov	r0, r5
 800082e:	f000 f931 	bl	8000a94 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8000832:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000834:	f043 0320 	orr.w	r3, r3, #32
 8000838:	6463      	str	r3, [r4, #68]	; 0x44
 800083a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800083c:	f003 0320 	and.w	r3, r3, #32
 8000840:	9304      	str	r3, [sp, #16]
 8000842:	9b04      	ldr	r3, [sp, #16]
}
 8000844:	e7a9      	b.n	800079a <HAL_UART_MspInit+0x12>
 8000846:	bf00      	nop
 8000848:	40011000 	.word	0x40011000
 800084c:	40011400 	.word	0x40011400
 8000850:	40023800 	.word	0x40023800
 8000854:	40020000 	.word	0x40020000
 8000858:	40020800 	.word	0x40020800

0800085c <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 800085c:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 800085e:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8000860:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	2200      	movs	r2, #0
 8000864:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8000866:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8000868:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 800086a:	210c      	movs	r1, #12
 800086c:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800086e:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8000870:	f001 f92c 	bl	8001acc <HAL_UART_Init>
}
 8000874:	bd08      	pop	{r3, pc}
	...

08000878 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8000878:	b510      	push	{r4, lr}
 800087a:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 800087c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000880:	b292      	uxth	r2, r2
 8000882:	4802      	ldr	r0, [pc, #8]	; (800088c <_write+0x14>)
 8000884:	f000 ffed 	bl	8001862 <HAL_UART_Transmit>
	return len;
}
 8000888:	4620      	mov	r0, r4
 800088a:	bd10      	pop	{r4, pc}
 800088c:	20000098 	.word	0x20000098

08000890 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000890:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000892:	2200      	movs	r2, #0
 8000894:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	2201      	movs	r2, #1
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <_read+0x18>)
 800089e:	f001 f84e 	bl	800193e <HAL_UART_Receive>
	return len;
}
 80008a2:	2001      	movs	r0, #1
 80008a4:	bd08      	pop	{r3, pc}
 80008a6:	bf00      	nop
 80008a8:	20000098 	.word	0x20000098

080008ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008ac:	480d      	ldr	r0, [pc, #52]	; (80008e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b2:	490e      	ldr	r1, [pc, #56]	; (80008ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b4:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <LoopForever+0xe>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1



  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c8:	4c0b      	ldr	r4, [pc, #44]	; (80008f8 <LoopForever+0x16>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008d6:	f000 f813 	bl	8000900 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80008da:	f001 fae3 	bl	8001ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008de:	f7ff fe7f 	bl	80005e0 <main>

080008e2 <LoopForever>:

LoopForever:
    b LoopForever
 80008e2:	e7fe      	b.n	80008e2 <LoopForever>
  ldr   r0, =_estack
 80008e4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008f0:	08002e78 	.word	0x08002e78
  ldr r2, =_sbss
 80008f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008f8:	200001a0 	.word	0x200001a0

080008fc <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC_IRQHandler>
	...

08000900 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <SystemInit+0x18>)
 8000902:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000906:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800090a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800090e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000912:	609a      	str	r2, [r3, #8]
#endif
}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800091c:	4770      	bx	lr
	...

08000920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b510      	push	{r4, lr}
 8000922:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_InitTick+0x40>)
 8000926:	7818      	ldrb	r0, [r3, #0]
 8000928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000930:	4a0c      	ldr	r2, [pc, #48]	; (8000964 <HAL_InitTick+0x44>)
 8000932:	6810      	ldr	r0, [r2, #0]
 8000934:	fbb0 f0f3 	udiv	r0, r0, r3
 8000938:	f000 f896 	bl	8000a68 <HAL_SYSTICK_Config>
 800093c:	b968      	cbnz	r0, 800095a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093e:	2c0f      	cmp	r4, #15
 8000940:	d901      	bls.n	8000946 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000942:	2001      	movs	r0, #1
 8000944:	e00a      	b.n	800095c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000946:	2200      	movs	r2, #0
 8000948:	4621      	mov	r1, r4
 800094a:	f04f 30ff 	mov.w	r0, #4294967295
 800094e:	f000 f859 	bl	8000a04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000952:	4b03      	ldr	r3, [pc, #12]	; (8000960 <HAL_InitTick+0x40>)
 8000954:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000956:	2000      	movs	r0, #0
 8000958:	e000      	b.n	800095c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800095a:	2001      	movs	r0, #1
}
 800095c:	bd10      	pop	{r4, pc}
 800095e:	bf00      	nop
 8000960:	20000004 	.word	0x20000004
 8000964:	20000000 	.word	0x20000000

08000968 <HAL_Init>:
{
 8000968:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_Init+0x28>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000972:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800097a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097c:	2003      	movs	r0, #3
 800097e:	f000 f82f 	bl	80009e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000982:	200f      	movs	r0, #15
 8000984:	f7ff ffcc 	bl	8000920 <HAL_InitTick>
  HAL_MspInit();
 8000988:	f7ff ffc8 	bl	800091c <HAL_MspInit>
}
 800098c:	2000      	movs	r0, #0
 800098e:	bd08      	pop	{r3, pc}
 8000990:	40023c00 	.word	0x40023c00

08000994 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000994:	4a03      	ldr	r2, [pc, #12]	; (80009a4 <HAL_IncTick+0x10>)
 8000996:	6811      	ldr	r1, [r2, #0]
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <HAL_IncTick+0x14>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	440b      	add	r3, r1
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000198 	.word	0x20000198
 80009a8:	20000004 	.word	0x20000004

080009ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009ac:	4b01      	ldr	r3, [pc, #4]	; (80009b4 <HAL_GetTick+0x8>)
 80009ae:	6818      	ldr	r0, [r3, #0]
}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000198 	.word	0x20000198

080009b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b8:	b538      	push	{r3, r4, r5, lr}
 80009ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80009bc:	f7ff fff6 	bl	80009ac <HAL_GetTick>
 80009c0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80009c6:	d002      	beq.n	80009ce <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <HAL_Delay+0x24>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ce:	f7ff ffed 	bl	80009ac <HAL_GetTick>
 80009d2:	1b40      	subs	r0, r0, r5
 80009d4:	42a0      	cmp	r0, r4
 80009d6:	d3fa      	bcc.n	80009ce <HAL_Delay+0x16>
  {
  }
}
 80009d8:	bd38      	pop	{r3, r4, r5, pc}
 80009da:	bf00      	nop
 80009dc:	20000004 	.word	0x20000004

080009e0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e0:	4906      	ldr	r1, [pc, #24]	; (80009fc <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80009e2:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009e8:	041b      	lsls	r3, r3, #16
 80009ea:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ec:	0200      	lsls	r0, r0, #8
 80009ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80009f4:	4a02      	ldr	r2, [pc, #8]	; (8000a00 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009f6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80009f8:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00
 8000a00:	05fa0000 	.word	0x05fa0000

08000a04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a04:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_NVIC_SetPriority+0x58>)
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a0e:	f1c3 0407 	rsb	r4, r3, #7
 8000a12:	2c04      	cmp	r4, #4
 8000a14:	bf28      	it	cs
 8000a16:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a18:	1d1d      	adds	r5, r3, #4
 8000a1a:	2d06      	cmp	r5, #6
 8000a1c:	d914      	bls.n	8000a48 <HAL_NVIC_SetPriority+0x44>
 8000a1e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a20:	f04f 35ff 	mov.w	r5, #4294967295
 8000a24:	fa05 f404 	lsl.w	r4, r5, r4
 8000a28:	ea21 0104 	bic.w	r1, r1, r4
 8000a2c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a2e:	fa05 f303 	lsl.w	r3, r5, r3
 8000a32:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a36:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	db07      	blt.n	8000a4c <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3c:	0109      	lsls	r1, r1, #4
 8000a3e:	b2c9      	uxtb	r1, r1
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <HAL_NVIC_SetPriority+0x5c>)
 8000a42:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a44:	bc30      	pop	{r4, r5}
 8000a46:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a48:	2300      	movs	r3, #0
 8000a4a:	e7e9      	b.n	8000a20 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	f000 000f 	and.w	r0, r0, #15
 8000a50:	0109      	lsls	r1, r1, #4
 8000a52:	b2c9      	uxtb	r1, r1
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <HAL_NVIC_SetPriority+0x60>)
 8000a56:	5419      	strb	r1, [r3, r0]
 8000a58:	e7f4      	b.n	8000a44 <HAL_NVIC_SetPriority+0x40>
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00
 8000a60:	e000e400 	.word	0xe000e400
 8000a64:	e000ed14 	.word	0xe000ed14

08000a68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a68:	3801      	subs	r0, #1
 8000a6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6e:	d20a      	bcs.n	8000a86 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_SYSTICK_Config+0x24>)
 8000a72:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a74:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <HAL_SYSTICK_Config+0x28>)
 8000a76:	21f0      	movs	r1, #240	; 0xf0
 8000a78:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a80:	2207      	movs	r2, #7
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a86:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e010 	.word	0xe000e010
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	2b0f      	cmp	r3, #15
 8000a98:	f200 80e1 	bhi.w	8000c5e <HAL_GPIO_Init+0x1ca>
{
 8000a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	e039      	b.n	8000b16 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000aa2:	2209      	movs	r2, #9
 8000aa4:	e000      	b.n	8000aa8 <HAL_GPIO_Init+0x14>
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	40b2      	lsls	r2, r6
 8000aaa:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000aac:	3402      	adds	r4, #2
 8000aae:	4e6c      	ldr	r6, [pc, #432]	; (8000c60 <HAL_GPIO_Init+0x1cc>)
 8000ab0:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ab4:	4a6b      	ldr	r2, [pc, #428]	; (8000c64 <HAL_GPIO_Init+0x1d0>)
 8000ab6:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ab8:	43ea      	mvns	r2, r5
 8000aba:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000abe:	684f      	ldr	r7, [r1, #4]
 8000ac0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000ac4:	d001      	beq.n	8000aca <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000ac6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000aca:	4c66      	ldr	r4, [pc, #408]	; (8000c64 <HAL_GPIO_Init+0x1d0>)
 8000acc:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000ace:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000ad0:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad4:	684f      	ldr	r7, [r1, #4]
 8000ad6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000ada:	d001      	beq.n	8000ae0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000adc:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000ae0:	4c60      	ldr	r4, [pc, #384]	; (8000c64 <HAL_GPIO_Init+0x1d0>)
 8000ae2:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ae4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ae6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aea:	684f      	ldr	r7, [r1, #4]
 8000aec:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000af0:	d001      	beq.n	8000af6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000af2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000af6:	4c5b      	ldr	r4, [pc, #364]	; (8000c64 <HAL_GPIO_Init+0x1d0>)
 8000af8:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000afa:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000afc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000afe:	684e      	ldr	r6, [r1, #4]
 8000b00:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000b04:	d001      	beq.n	8000b0a <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000b06:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000b0a:	4c56      	ldr	r4, [pc, #344]	; (8000c64 <HAL_GPIO_Init+0x1d0>)
 8000b0c:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b0e:	3301      	adds	r3, #1
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	f200 80a2 	bhi.w	8000c5a <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8000b16:	2201      	movs	r2, #1
 8000b18:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b1a:	680c      	ldr	r4, [r1, #0]
 8000b1c:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000b20:	42aa      	cmp	r2, r5
 8000b22:	d1f4      	bne.n	8000b0e <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b24:	684c      	ldr	r4, [r1, #4]
 8000b26:	1e66      	subs	r6, r4, #1
 8000b28:	2c11      	cmp	r4, #17
 8000b2a:	bf18      	it	ne
 8000b2c:	2e01      	cmpne	r6, #1
 8000b2e:	d901      	bls.n	8000b34 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b30:	2c12      	cmp	r4, #18
 8000b32:	d112      	bne.n	8000b5a <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8000b34:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b36:	005f      	lsls	r7, r3, #1
 8000b38:	2403      	movs	r4, #3
 8000b3a:	40bc      	lsls	r4, r7
 8000b3c:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b40:	68cc      	ldr	r4, [r1, #12]
 8000b42:	40bc      	lsls	r4, r7
 8000b44:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000b46:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b48:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b4a:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b4e:	684c      	ldr	r4, [r1, #4]
 8000b50:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000b54:	409a      	lsls	r2, r3
 8000b56:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000b58:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b5a:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b5c:	005f      	lsls	r7, r3, #1
 8000b5e:	2603      	movs	r6, #3
 8000b60:	40be      	lsls	r6, r7
 8000b62:	43f6      	mvns	r6, r6
 8000b64:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b66:	688c      	ldr	r4, [r1, #8]
 8000b68:	40bc      	lsls	r4, r7
 8000b6a:	4314      	orrs	r4, r2
      GPIOx->PUPDR = temp;
 8000b6c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b6e:	684a      	ldr	r2, [r1, #4]
 8000b70:	2a12      	cmp	r2, #18
 8000b72:	bf18      	it	ne
 8000b74:	2a02      	cmpne	r2, #2
 8000b76:	d113      	bne.n	8000ba0 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3];
 8000b78:	08dc      	lsrs	r4, r3, #3
 8000b7a:	3408      	adds	r4, #8
 8000b7c:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b80:	f003 0207 	and.w	r2, r3, #7
 8000b84:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8000b88:	220f      	movs	r2, #15
 8000b8a:	fa02 f20c 	lsl.w	r2, r2, ip
 8000b8e:	ea2e 0e02 	bic.w	lr, lr, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b92:	690a      	ldr	r2, [r1, #16]
 8000b94:	fa02 f20c 	lsl.w	r2, r2, ip
 8000b98:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8000b9c:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
      temp = GPIOx->MODER;
 8000ba0:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ba2:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ba4:	684a      	ldr	r2, [r1, #4]
 8000ba6:	f002 0203 	and.w	r2, r2, #3
 8000baa:	40ba      	lsls	r2, r7
 8000bac:	4332      	orrs	r2, r6
      GPIOx->MODER = temp;
 8000bae:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bb0:	684a      	ldr	r2, [r1, #4]
 8000bb2:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000bb6:	d0aa      	beq.n	8000b0e <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb8:	4a2b      	ldr	r2, [pc, #172]	; (8000c68 <HAL_GPIO_Init+0x1d4>)
 8000bba:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000bbc:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000bc0:	6454      	str	r4, [r2, #68]	; 0x44
 8000bc2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000bc4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000bc8:	9201      	str	r2, [sp, #4]
 8000bca:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000bcc:	089c      	lsrs	r4, r3, #2
 8000bce:	1ca6      	adds	r6, r4, #2
 8000bd0:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <HAL_GPIO_Init+0x1cc>)
 8000bd2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bd6:	f003 0203 	and.w	r2, r3, #3
 8000bda:	0096      	lsls	r6, r2, #2
 8000bdc:	220f      	movs	r2, #15
 8000bde:	40b2      	lsls	r2, r6
 8000be0:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000be4:	4a21      	ldr	r2, [pc, #132]	; (8000c6c <HAL_GPIO_Init+0x1d8>)
 8000be6:	4290      	cmp	r0, r2
 8000be8:	f43f af5d 	beq.w	8000aa6 <HAL_GPIO_Init+0x12>
 8000bec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bf0:	4290      	cmp	r0, r2
 8000bf2:	d022      	beq.n	8000c3a <HAL_GPIO_Init+0x1a6>
 8000bf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	d020      	beq.n	8000c3e <HAL_GPIO_Init+0x1aa>
 8000bfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c00:	4290      	cmp	r0, r2
 8000c02:	d01e      	beq.n	8000c42 <HAL_GPIO_Init+0x1ae>
 8000c04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c08:	4290      	cmp	r0, r2
 8000c0a:	d01c      	beq.n	8000c46 <HAL_GPIO_Init+0x1b2>
 8000c0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c10:	4290      	cmp	r0, r2
 8000c12:	d01a      	beq.n	8000c4a <HAL_GPIO_Init+0x1b6>
 8000c14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c18:	4290      	cmp	r0, r2
 8000c1a:	d018      	beq.n	8000c4e <HAL_GPIO_Init+0x1ba>
 8000c1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d016      	beq.n	8000c52 <HAL_GPIO_Init+0x1be>
 8000c24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c28:	4290      	cmp	r0, r2
 8000c2a:	d014      	beq.n	8000c56 <HAL_GPIO_Init+0x1c2>
 8000c2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f43f af36 	beq.w	8000aa2 <HAL_GPIO_Init+0xe>
 8000c36:	220a      	movs	r2, #10
 8000c38:	e736      	b.n	8000aa8 <HAL_GPIO_Init+0x14>
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	e734      	b.n	8000aa8 <HAL_GPIO_Init+0x14>
 8000c3e:	2202      	movs	r2, #2
 8000c40:	e732      	b.n	8000aa8 <HAL_GPIO_Init+0x14>
 8000c42:	2203      	movs	r2, #3
 8000c44:	e730      	b.n	8000aa8 <HAL_GPIO_Init+0x14>
 8000c46:	2204      	movs	r2, #4
 8000c48:	e72e      	b.n	8000aa8 <HAL_GPIO_Init+0x14>
 8000c4a:	2205      	movs	r2, #5
 8000c4c:	e72c      	b.n	8000aa8 <HAL_GPIO_Init+0x14>
 8000c4e:	2206      	movs	r2, #6
 8000c50:	e72a      	b.n	8000aa8 <HAL_GPIO_Init+0x14>
 8000c52:	2207      	movs	r2, #7
 8000c54:	e728      	b.n	8000aa8 <HAL_GPIO_Init+0x14>
 8000c56:	2208      	movs	r2, #8
 8000c58:	e726      	b.n	8000aa8 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000c5a:	b003      	add	sp, #12
 8000c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c5e:	4770      	bx	lr
 8000c60:	40013800 	.word	0x40013800
 8000c64:	40013c00 	.word	0x40013c00
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000

08000c70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000c70:	b510      	push	{r4, lr}
 8000c72:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_PWREx_EnableOverDrive+0x74>)
 8000c76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c7c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c84:	9301      	str	r3, [sp, #4]
 8000c86:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000c88:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000c8a:	6813      	ldr	r3, [r2, #0]
 8000c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c90:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c92:	f7ff fe8b 	bl	80009ac <HAL_GetTick>
 8000c96:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000ca0:	d108      	bne.n	8000cb4 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ca2:	f7ff fe83 	bl	80009ac <HAL_GetTick>
 8000ca6:	1b00      	subs	r0, r0, r4
 8000ca8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000cac:	d9f4      	bls.n	8000c98 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000cae:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000cb0:	b002      	add	sp, #8
 8000cb2:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000cb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ce8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000cb6:	6813      	ldr	r3, [r2, #0]
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbc:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000cbe:	f7ff fe75 	bl	80009ac <HAL_GetTick>
 8000cc2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ccc:	d107      	bne.n	8000cde <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000cce:	f7ff fe6d 	bl	80009ac <HAL_GetTick>
 8000cd2:	1b00      	subs	r0, r0, r4
 8000cd4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000cd8:	d9f4      	bls.n	8000cc4 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8000cda:	2003      	movs	r0, #3
 8000cdc:	e7e8      	b.n	8000cb0 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000cde:	2000      	movs	r0, #0
 8000ce0:	e7e6      	b.n	8000cb0 <HAL_PWREx_EnableOverDrive+0x40>
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40007000 	.word	0x40007000

08000cec <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cec:	2800      	cmp	r0, #0
 8000cee:	f000 8212 	beq.w	8001116 <HAL_RCC_OscConfig+0x42a>
{
 8000cf2:	b570      	push	{r4, r5, r6, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cf8:	6803      	ldr	r3, [r0, #0]
 8000cfa:	f013 0f01 	tst.w	r3, #1
 8000cfe:	d029      	beq.n	8000d54 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d00:	4ba2      	ldr	r3, [pc, #648]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f003 030c 	and.w	r3, r3, #12
 8000d08:	2b04      	cmp	r3, #4
 8000d0a:	d01a      	beq.n	8000d42 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d0c:	4b9f      	ldr	r3, [pc, #636]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f003 030c 	and.w	r3, r3, #12
 8000d14:	2b08      	cmp	r3, #8
 8000d16:	d00f      	beq.n	8000d38 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d18:	6863      	ldr	r3, [r4, #4]
 8000d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d1e:	d040      	beq.n	8000da2 <HAL_RCC_OscConfig+0xb6>
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d154      	bne.n	8000dce <HAL_RCC_OscConfig+0xe2>
 8000d24:	4b99      	ldr	r3, [pc, #612]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	e039      	b.n	8000dac <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d38:	4b94      	ldr	r3, [pc, #592]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000d40:	d0ea      	beq.n	8000d18 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d42:	4b92      	ldr	r3, [pc, #584]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d4a:	d003      	beq.n	8000d54 <HAL_RCC_OscConfig+0x68>
 8000d4c:	6863      	ldr	r3, [r4, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 81e3 	beq.w	800111a <HAL_RCC_OscConfig+0x42e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d54:	6823      	ldr	r3, [r4, #0]
 8000d56:	f013 0f02 	tst.w	r3, #2
 8000d5a:	d075      	beq.n	8000e48 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d5c:	4b8b      	ldr	r3, [pc, #556]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f013 0f0c 	tst.w	r3, #12
 8000d64:	d05e      	beq.n	8000e24 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d66:	4b89      	ldr	r3, [pc, #548]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f003 030c 	and.w	r3, r3, #12
 8000d6e:	2b08      	cmp	r3, #8
 8000d70:	d053      	beq.n	8000e1a <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000d72:	68e3      	ldr	r3, [r4, #12]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 808a 	beq.w	8000e8e <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d7a:	4a84      	ldr	r2, [pc, #528]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000d7c:	6813      	ldr	r3, [r2, #0]
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d84:	f7ff fe12 	bl	80009ac <HAL_GetTick>
 8000d88:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d8a:	4b80      	ldr	r3, [pc, #512]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f013 0f02 	tst.w	r3, #2
 8000d92:	d173      	bne.n	8000e7c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d94:	f7ff fe0a 	bl	80009ac <HAL_GetTick>
 8000d98:	1b40      	subs	r0, r0, r5
 8000d9a:	2802      	cmp	r0, #2
 8000d9c:	d9f5      	bls.n	8000d8a <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000d9e:	2003      	movs	r0, #3
 8000da0:	e1be      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da2:	4a7a      	ldr	r2, [pc, #488]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000da4:	6813      	ldr	r3, [r2, #0]
 8000da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000daa:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dac:	6863      	ldr	r3, [r4, #4]
 8000dae:	b32b      	cbz	r3, 8000dfc <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000db0:	f7ff fdfc 	bl	80009ac <HAL_GetTick>
 8000db4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db6:	4b75      	ldr	r3, [pc, #468]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000dbe:	d1c9      	bne.n	8000d54 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dc0:	f7ff fdf4 	bl	80009ac <HAL_GetTick>
 8000dc4:	1b40      	subs	r0, r0, r5
 8000dc6:	2864      	cmp	r0, #100	; 0x64
 8000dc8:	d9f5      	bls.n	8000db6 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000dca:	2003      	movs	r0, #3
 8000dcc:	e1a8      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dd2:	d009      	beq.n	8000de8 <HAL_RCC_OscConfig+0xfc>
 8000dd4:	4b6d      	ldr	r3, [pc, #436]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	e7e1      	b.n	8000dac <HAL_RCC_OscConfig+0xc0>
 8000de8:	4b68      	ldr	r3, [pc, #416]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	e7d7      	b.n	8000dac <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fdd6 	bl	80009ac <HAL_GetTick>
 8000e00:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e02:	4b62      	ldr	r3, [pc, #392]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e0a:	d0a3      	beq.n	8000d54 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e0c:	f7ff fdce 	bl	80009ac <HAL_GetTick>
 8000e10:	1b40      	subs	r0, r0, r5
 8000e12:	2864      	cmp	r0, #100	; 0x64
 8000e14:	d9f5      	bls.n	8000e02 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000e16:	2003      	movs	r0, #3
 8000e18:	e182      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e1a:	4b5c      	ldr	r3, [pc, #368]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000e22:	d1a6      	bne.n	8000d72 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e24:	4b59      	ldr	r3, [pc, #356]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f013 0f02 	tst.w	r3, #2
 8000e2c:	d004      	beq.n	8000e38 <HAL_RCC_OscConfig+0x14c>
 8000e2e:	68e3      	ldr	r3, [r4, #12]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d001      	beq.n	8000e38 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8000e34:	2001      	movs	r0, #1
 8000e36:	e173      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e38:	4a54      	ldr	r2, [pc, #336]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000e3a:	6813      	ldr	r3, [r2, #0]
 8000e3c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e40:	6921      	ldr	r1, [r4, #16]
 8000e42:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e46:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	f013 0f08 	tst.w	r3, #8
 8000e4e:	d046      	beq.n	8000ede <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e50:	6963      	ldr	r3, [r4, #20]
 8000e52:	b383      	cbz	r3, 8000eb6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e54:	4a4d      	ldr	r2, [pc, #308]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000e56:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e5e:	f7ff fda5 	bl	80009ac <HAL_GetTick>
 8000e62:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e64:	4b49      	ldr	r3, [pc, #292]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e68:	f013 0f02 	tst.w	r3, #2
 8000e6c:	d137      	bne.n	8000ede <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e6e:	f7ff fd9d 	bl	80009ac <HAL_GetTick>
 8000e72:	1b40      	subs	r0, r0, r5
 8000e74:	2802      	cmp	r0, #2
 8000e76:	d9f5      	bls.n	8000e64 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8000e78:	2003      	movs	r0, #3
 8000e7a:	e151      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e7c:	4a43      	ldr	r2, [pc, #268]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000e7e:	6813      	ldr	r3, [r2, #0]
 8000e80:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e84:	6921      	ldr	r1, [r4, #16]
 8000e86:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	e7dc      	b.n	8000e48 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8000e8e:	4a3f      	ldr	r2, [pc, #252]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000e90:	6813      	ldr	r3, [r2, #0]
 8000e92:	f023 0301 	bic.w	r3, r3, #1
 8000e96:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000e98:	f7ff fd88 	bl	80009ac <HAL_GetTick>
 8000e9c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e9e:	4b3b      	ldr	r3, [pc, #236]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f013 0f02 	tst.w	r3, #2
 8000ea6:	d0cf      	beq.n	8000e48 <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ea8:	f7ff fd80 	bl	80009ac <HAL_GetTick>
 8000eac:	1b40      	subs	r0, r0, r5
 8000eae:	2802      	cmp	r0, #2
 8000eb0:	d9f5      	bls.n	8000e9e <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	e134      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eb6:	4a35      	ldr	r2, [pc, #212]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000eb8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000eba:	f023 0301 	bic.w	r3, r3, #1
 8000ebe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ec0:	f7ff fd74 	bl	80009ac <HAL_GetTick>
 8000ec4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec6:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eca:	f013 0f02 	tst.w	r3, #2
 8000ece:	d006      	beq.n	8000ede <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ed0:	f7ff fd6c 	bl	80009ac <HAL_GetTick>
 8000ed4:	1b40      	subs	r0, r0, r5
 8000ed6:	2802      	cmp	r0, #2
 8000ed8:	d9f5      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8000eda:	2003      	movs	r0, #3
 8000edc:	e120      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	f013 0f04 	tst.w	r3, #4
 8000ee4:	d07e      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ee6:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000eee:	d11e      	bne.n	8000f2e <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ef0:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ef4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ef8:	641a      	str	r2, [r3, #64]	; 0x40
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f04:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f06:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <HAL_RCC_OscConfig+0x2a4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f0e:	d010      	beq.n	8000f32 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f10:	68a3      	ldr	r3, [r4, #8]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d021      	beq.n	8000f5a <HAL_RCC_OscConfig+0x26e>
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d13c      	bne.n	8000f94 <HAL_RCC_OscConfig+0x2a8>
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000f1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f1e:	f022 0201 	bic.w	r2, r2, #1
 8000f22:	671a      	str	r2, [r3, #112]	; 0x70
 8000f24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f26:	f022 0204 	bic.w	r2, r2, #4
 8000f2a:	671a      	str	r2, [r3, #112]	; 0x70
 8000f2c:	e01a      	b.n	8000f64 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 8000f2e:	2500      	movs	r5, #0
 8000f30:	e7e9      	b.n	8000f06 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8000f32:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <HAL_RCC_OscConfig+0x2a4>)
 8000f34:	6813      	ldr	r3, [r2, #0]
 8000f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000f3c:	f7ff fd36 	bl	80009ac <HAL_GetTick>
 8000f40:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <HAL_RCC_OscConfig+0x2a4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f4a:	d1e1      	bne.n	8000f10 <HAL_RCC_OscConfig+0x224>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f4c:	f7ff fd2e 	bl	80009ac <HAL_GetTick>
 8000f50:	1b80      	subs	r0, r0, r6
 8000f52:	2864      	cmp	r0, #100	; 0x64
 8000f54:	d9f5      	bls.n	8000f42 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8000f56:	2003      	movs	r0, #3
 8000f58:	e0e2      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f5a:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000f5c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f64:	68a3      	ldr	r3, [r4, #8]
 8000f66:	b35b      	cbz	r3, 8000fc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f68:	f7ff fd20 	bl	80009ac <HAL_GetTick>
 8000f6c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <HAL_RCC_OscConfig+0x2a0>)
 8000f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f72:	f013 0f02 	tst.w	r3, #2
 8000f76:	d134      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f78:	f7ff fd18 	bl	80009ac <HAL_GetTick>
 8000f7c:	1b80      	subs	r0, r0, r6
 8000f7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f82:	4298      	cmp	r0, r3
 8000f84:	d9f3      	bls.n	8000f6e <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000f86:	2003      	movs	r0, #3
 8000f88:	e0ca      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f94:	2b05      	cmp	r3, #5
 8000f96:	d009      	beq.n	8000fac <HAL_RCC_OscConfig+0x2c0>
 8000f98:	4b64      	ldr	r3, [pc, #400]	; (800112c <HAL_RCC_OscConfig+0x440>)
 8000f9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f9c:	f022 0201 	bic.w	r2, r2, #1
 8000fa0:	671a      	str	r2, [r3, #112]	; 0x70
 8000fa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fa4:	f022 0204 	bic.w	r2, r2, #4
 8000fa8:	671a      	str	r2, [r3, #112]	; 0x70
 8000faa:	e7db      	b.n	8000f64 <HAL_RCC_OscConfig+0x278>
 8000fac:	4b5f      	ldr	r3, [pc, #380]	; (800112c <HAL_RCC_OscConfig+0x440>)
 8000fae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fb0:	f042 0204 	orr.w	r2, r2, #4
 8000fb4:	671a      	str	r2, [r3, #112]	; 0x70
 8000fb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fb8:	f042 0201 	orr.w	r2, r2, #1
 8000fbc:	671a      	str	r2, [r3, #112]	; 0x70
 8000fbe:	e7d1      	b.n	8000f64 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fc0:	f7ff fcf4 	bl	80009ac <HAL_GetTick>
 8000fc4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fc6:	4b59      	ldr	r3, [pc, #356]	; (800112c <HAL_RCC_OscConfig+0x440>)
 8000fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fca:	f013 0f02 	tst.w	r3, #2
 8000fce:	d008      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fd0:	f7ff fcec 	bl	80009ac <HAL_GetTick>
 8000fd4:	1b80      	subs	r0, r0, r6
 8000fd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fda:	4298      	cmp	r0, r3
 8000fdc:	d9f3      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8000fde:	2003      	movs	r0, #3
 8000fe0:	e09e      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000fe2:	b9fd      	cbnz	r5, 8001024 <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fe4:	69a3      	ldr	r3, [r4, #24]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 8099 	beq.w	800111e <HAL_RCC_OscConfig+0x432>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fec:	4a4f      	ldr	r2, [pc, #316]	; (800112c <HAL_RCC_OscConfig+0x440>)
 8000fee:	6892      	ldr	r2, [r2, #8]
 8000ff0:	f002 020c 	and.w	r2, r2, #12
 8000ff4:	2a08      	cmp	r2, #8
 8000ff6:	d059      	beq.n	80010ac <HAL_RCC_OscConfig+0x3c0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d019      	beq.n	8001030 <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ffc:	4a4b      	ldr	r2, [pc, #300]	; (800112c <HAL_RCC_OscConfig+0x440>)
 8000ffe:	6813      	ldr	r3, [r2, #0]
 8001000:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001006:	f7ff fcd1 	bl	80009ac <HAL_GetTick>
 800100a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800100c:	4b47      	ldr	r3, [pc, #284]	; (800112c <HAL_RCC_OscConfig+0x440>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001014:	d048      	beq.n	80010a8 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001016:	f7ff fcc9 	bl	80009ac <HAL_GetTick>
 800101a:	1b00      	subs	r0, r0, r4
 800101c:	2802      	cmp	r0, #2
 800101e:	d9f5      	bls.n	800100c <HAL_RCC_OscConfig+0x320>
          {
            return HAL_TIMEOUT;
 8001020:	2003      	movs	r0, #3
 8001022:	e07d      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001024:	4a41      	ldr	r2, [pc, #260]	; (800112c <HAL_RCC_OscConfig+0x440>)
 8001026:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	e7d9      	b.n	8000fe4 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8001030:	4a3e      	ldr	r2, [pc, #248]	; (800112c <HAL_RCC_OscConfig+0x440>)
 8001032:	6813      	ldr	r3, [r2, #0]
 8001034:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001038:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800103a:	f7ff fcb7 	bl	80009ac <HAL_GetTick>
 800103e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001040:	4b3a      	ldr	r3, [pc, #232]	; (800112c <HAL_RCC_OscConfig+0x440>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001048:	d006      	beq.n	8001058 <HAL_RCC_OscConfig+0x36c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800104a:	f7ff fcaf 	bl	80009ac <HAL_GetTick>
 800104e:	1b40      	subs	r0, r0, r5
 8001050:	2802      	cmp	r0, #2
 8001052:	d9f5      	bls.n	8001040 <HAL_RCC_OscConfig+0x354>
            return HAL_TIMEOUT;
 8001054:	2003      	movs	r0, #3
 8001056:	e063      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001058:	69e3      	ldr	r3, [r4, #28]
 800105a:	6a22      	ldr	r2, [r4, #32]
 800105c:	4313      	orrs	r3, r2
 800105e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001060:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001064:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001066:	0852      	lsrs	r2, r2, #1
 8001068:	3a01      	subs	r2, #1
 800106a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800106e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001070:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001074:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001076:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800107a:	4a2c      	ldr	r2, [pc, #176]	; (800112c <HAL_RCC_OscConfig+0x440>)
 800107c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800107e:	6813      	ldr	r3, [r2, #0]
 8001080:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001084:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001086:	f7ff fc91 	bl	80009ac <HAL_GetTick>
 800108a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <HAL_RCC_OscConfig+0x440>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001094:	d106      	bne.n	80010a4 <HAL_RCC_OscConfig+0x3b8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001096:	f7ff fc89 	bl	80009ac <HAL_GetTick>
 800109a:	1b00      	subs	r0, r0, r4
 800109c:	2802      	cmp	r0, #2
 800109e:	d9f5      	bls.n	800108c <HAL_RCC_OscConfig+0x3a0>
            return HAL_TIMEOUT;
 80010a0:	2003      	movs	r0, #3
 80010a2:	e03d      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80010a4:	2000      	movs	r0, #0
 80010a6:	e03b      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
 80010a8:	2000      	movs	r0, #0
 80010aa:	e039      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
      pll_config = RCC->PLLCFGR;
 80010ac:	4a1f      	ldr	r2, [pc, #124]	; (800112c <HAL_RCC_OscConfig+0x440>)
 80010ae:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d037      	beq.n	8001124 <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80010b8:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010ba:	428b      	cmp	r3, r1
 80010bc:	d001      	beq.n	80010c2 <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 80010be:	2001      	movs	r0, #1
 80010c0:	e02e      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010c2:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80010c6:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010c8:	428b      	cmp	r3, r1
 80010ca:	d001      	beq.n	80010d0 <HAL_RCC_OscConfig+0x3e4>
        return HAL_ERROR;
 80010cc:	2001      	movs	r0, #1
 80010ce:	e027      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80010d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010d6:	4013      	ands	r3, r2
 80010d8:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80010dc:	d001      	beq.n	80010e2 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 80010de:	2001      	movs	r0, #1
 80010e0:	e01e      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80010e2:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80010e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010e8:	085b      	lsrs	r3, r3, #1
 80010ea:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80010ec:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80010f0:	d001      	beq.n	80010f6 <HAL_RCC_OscConfig+0x40a>
        return HAL_ERROR;
 80010f2:	2001      	movs	r0, #1
 80010f4:	e014      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80010f6:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 80010fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80010fc:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8001100:	d001      	beq.n	8001106 <HAL_RCC_OscConfig+0x41a>
        return HAL_ERROR;
 8001102:	2001      	movs	r0, #1
 8001104:	e00c      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001106:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800110a:	6b23      	ldr	r3, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800110c:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8001110:	d00a      	beq.n	8001128 <HAL_RCC_OscConfig+0x43c>
        return HAL_ERROR;
 8001112:	2001      	movs	r0, #1
 8001114:	e004      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
    return HAL_ERROR;
 8001116:	2001      	movs	r0, #1
}
 8001118:	4770      	bx	lr
        return HAL_ERROR;
 800111a:	2001      	movs	r0, #1
 800111c:	e000      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
  return HAL_OK;
 800111e:	2000      	movs	r0, #0
}
 8001120:	b002      	add	sp, #8
 8001122:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001124:	2001      	movs	r0, #1
 8001126:	e7fb      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
  return HAL_OK;
 8001128:	2000      	movs	r0, #0
 800112a:	e7f9      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
 800112c:	40023800 	.word	0x40023800

08001130 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 030c 	and.w	r3, r3, #12
 8001138:	2b04      	cmp	r3, #4
 800113a:	d044      	beq.n	80011c6 <HAL_RCC_GetSysClockFreq+0x96>
 800113c:	2b08      	cmp	r3, #8
 800113e:	d001      	beq.n	8001144 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001140:	4823      	ldr	r0, [pc, #140]	; (80011d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001142:	4770      	bx	lr
{
 8001144:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_RCC_GetSysClockFreq+0x9c>)
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001156:	d013      	beq.n	8001180 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_RCC_GetSysClockFreq+0x9c>)
 800115a:	6859      	ldr	r1, [r3, #4]
 800115c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001160:	2300      	movs	r3, #0
 8001162:	481c      	ldr	r0, [pc, #112]	; (80011d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001164:	fba1 0100 	umull	r0, r1, r1, r0
 8001168:	f7ff f8ba 	bl	80002e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_RCC_GetSysClockFreq+0x9c>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001174:	3301      	adds	r3, #1
 8001176:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001178:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800117c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001188:	461e      	mov	r6, r3
 800118a:	2700      	movs	r7, #0
 800118c:	015c      	lsls	r4, r3, #5
 800118e:	2500      	movs	r5, #0
 8001190:	1ae4      	subs	r4, r4, r3
 8001192:	eb65 0507 	sbc.w	r5, r5, r7
 8001196:	01a9      	lsls	r1, r5, #6
 8001198:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800119c:	01a0      	lsls	r0, r4, #6
 800119e:	1b00      	subs	r0, r0, r4
 80011a0:	eb61 0105 	sbc.w	r1, r1, r5
 80011a4:	00cb      	lsls	r3, r1, #3
 80011a6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011aa:	00c4      	lsls	r4, r0, #3
 80011ac:	19a0      	adds	r0, r4, r6
 80011ae:	eb43 0107 	adc.w	r1, r3, r7
 80011b2:	028b      	lsls	r3, r1, #10
 80011b4:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80011b8:	0284      	lsls	r4, r0, #10
 80011ba:	4620      	mov	r0, r4
 80011bc:	4619      	mov	r1, r3
 80011be:	2300      	movs	r3, #0
 80011c0:	f7ff f88e 	bl	80002e0 <__aeabi_uldivmod>
 80011c4:	e7d2      	b.n	800116c <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 80011c6:	4803      	ldr	r0, [pc, #12]	; (80011d4 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	00f42400 	.word	0x00f42400
 80011d4:	017d7840 	.word	0x017d7840

080011d8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80011d8:	2800      	cmp	r0, #0
 80011da:	f000 80a3 	beq.w	8001324 <HAL_RCC_ClockConfig+0x14c>
{
 80011de:	b570      	push	{r4, r5, r6, lr}
 80011e0:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e2:	4b52      	ldr	r3, [pc, #328]	; (800132c <HAL_RCC_ClockConfig+0x154>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	428b      	cmp	r3, r1
 80011ec:	d20c      	bcs.n	8001208 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ee:	4a4f      	ldr	r2, [pc, #316]	; (800132c <HAL_RCC_ClockConfig+0x154>)
 80011f0:	6813      	ldr	r3, [r2, #0]
 80011f2:	f023 030f 	bic.w	r3, r3, #15
 80011f6:	430b      	orrs	r3, r1
 80011f8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	6813      	ldr	r3, [r2, #0]
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	428b      	cmp	r3, r1
 8001202:	d001      	beq.n	8001208 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8001204:	2001      	movs	r0, #1
}
 8001206:	bd70      	pop	{r4, r5, r6, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	f013 0f02 	tst.w	r3, #2
 800120e:	d017      	beq.n	8001240 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001210:	f013 0f04 	tst.w	r3, #4
 8001214:	d004      	beq.n	8001220 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001216:	4a46      	ldr	r2, [pc, #280]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 8001218:	6893      	ldr	r3, [r2, #8]
 800121a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800121e:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	f013 0f08 	tst.w	r3, #8
 8001226:	d004      	beq.n	8001232 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001228:	4a41      	ldr	r2, [pc, #260]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 800122a:	6893      	ldr	r3, [r2, #8]
 800122c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001230:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001232:	4a3f      	ldr	r2, [pc, #252]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 8001234:	6893      	ldr	r3, [r2, #8]
 8001236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800123a:	68a0      	ldr	r0, [r4, #8]
 800123c:	4303      	orrs	r3, r0
 800123e:	6093      	str	r3, [r2, #8]
 8001240:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001242:	6823      	ldr	r3, [r4, #0]
 8001244:	f013 0f01 	tst.w	r3, #1
 8001248:	d031      	beq.n	80012ae <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800124a:	6863      	ldr	r3, [r4, #4]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d020      	beq.n	8001292 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001250:	2b02      	cmp	r3, #2
 8001252:	d025      	beq.n	80012a0 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	4a36      	ldr	r2, [pc, #216]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	f012 0f02 	tst.w	r2, #2
 800125c:	d064      	beq.n	8001328 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800125e:	4934      	ldr	r1, [pc, #208]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 8001260:	688a      	ldr	r2, [r1, #8]
 8001262:	f022 0203 	bic.w	r2, r2, #3
 8001266:	4313      	orrs	r3, r2
 8001268:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800126a:	f7ff fb9f 	bl	80009ac <HAL_GetTick>
 800126e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001270:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	6862      	ldr	r2, [r4, #4]
 800127a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800127e:	d016      	beq.n	80012ae <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001280:	f7ff fb94 	bl	80009ac <HAL_GetTick>
 8001284:	1b80      	subs	r0, r0, r6
 8001286:	f241 3388 	movw	r3, #5000	; 0x1388
 800128a:	4298      	cmp	r0, r3
 800128c:	d9f0      	bls.n	8001270 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 800128e:	2003      	movs	r0, #3
 8001290:	e7b9      	b.n	8001206 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	4a27      	ldr	r2, [pc, #156]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800129a:	d1e0      	bne.n	800125e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800129c:	2001      	movs	r0, #1
 800129e:	e7b2      	b.n	8001206 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012a0:	4a23      	ldr	r2, [pc, #140]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80012a8:	d1d9      	bne.n	800125e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80012aa:	2001      	movs	r0, #1
 80012ac:	e7ab      	b.n	8001206 <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012ae:	4b1f      	ldr	r3, [pc, #124]	; (800132c <HAL_RCC_ClockConfig+0x154>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	42ab      	cmp	r3, r5
 80012b8:	d90c      	bls.n	80012d4 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ba:	4a1c      	ldr	r2, [pc, #112]	; (800132c <HAL_RCC_ClockConfig+0x154>)
 80012bc:	6813      	ldr	r3, [r2, #0]
 80012be:	f023 030f 	bic.w	r3, r3, #15
 80012c2:	432b      	orrs	r3, r5
 80012c4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c6:	6813      	ldr	r3, [r2, #0]
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	42ab      	cmp	r3, r5
 80012ce:	d001      	beq.n	80012d4 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 80012d0:	2001      	movs	r0, #1
 80012d2:	e798      	b.n	8001206 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	f013 0f04 	tst.w	r3, #4
 80012da:	d006      	beq.n	80012ea <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 80012de:	6893      	ldr	r3, [r2, #8]
 80012e0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80012e4:	68e1      	ldr	r1, [r4, #12]
 80012e6:	430b      	orrs	r3, r1
 80012e8:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	f013 0f08 	tst.w	r3, #8
 80012f0:	d007      	beq.n	8001302 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012f2:	4a0f      	ldr	r2, [pc, #60]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 80012f4:	6893      	ldr	r3, [r2, #8]
 80012f6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80012fa:	6921      	ldr	r1, [r4, #16]
 80012fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001300:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001302:	f7ff ff15 	bl	8001130 <HAL_RCC_GetSysClockFreq>
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_RCC_ClockConfig+0x158>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800130e:	4a09      	ldr	r2, [pc, #36]	; (8001334 <HAL_RCC_ClockConfig+0x15c>)
 8001310:	5cd3      	ldrb	r3, [r2, r3]
 8001312:	40d8      	lsrs	r0, r3
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_RCC_ClockConfig+0x160>)
 8001316:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_RCC_ClockConfig+0x164>)
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	f7ff fb00 	bl	8000920 <HAL_InitTick>
  return HAL_OK;
 8001320:	2000      	movs	r0, #0
 8001322:	e770      	b.n	8001206 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001324:	2001      	movs	r0, #1
}
 8001326:	4770      	bx	lr
        return HAL_ERROR;
 8001328:	2001      	movs	r0, #1
 800132a:	e76c      	b.n	8001206 <HAL_RCC_ClockConfig+0x2e>
 800132c:	40023c00 	.word	0x40023c00
 8001330:	40023800 	.word	0x40023800
 8001334:	08002c20 	.word	0x08002c20
 8001338:	20000000 	.word	0x20000000
 800133c:	20000008 	.word	0x20000008

08001340 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001340:	4b01      	ldr	r3, [pc, #4]	; (8001348 <HAL_RCC_GetHCLKFreq+0x8>)
 8001342:	6818      	ldr	r0, [r3, #0]
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000000 	.word	0x20000000

0800134c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800134c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800134e:	f7ff fff7 	bl	8001340 <HAL_RCC_GetHCLKFreq>
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800135a:	4a03      	ldr	r2, [pc, #12]	; (8001368 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800135c:	5cd3      	ldrb	r3, [r2, r3]
}
 800135e:	40d8      	lsrs	r0, r3
 8001360:	bd08      	pop	{r3, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	08002c30 	.word	0x08002c30

0800136c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800136c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800136e:	f7ff ffe7 	bl	8001340 <HAL_RCC_GetHCLKFreq>
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800137a:	4a03      	ldr	r2, [pc, #12]	; (8001388 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800137c:	5cd3      	ldrb	r3, [r2, r3]
}
 800137e:	40d8      	lsrs	r0, r3
 8001380:	bd08      	pop	{r3, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	08002c30 	.word	0x08002c30

0800138c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800138c:	b510      	push	{r4, lr}
 800138e:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001390:	6883      	ldr	r3, [r0, #8]
 8001392:	6902      	ldr	r2, [r0, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	6942      	ldr	r2, [r0, #20]
 8001398:	4313      	orrs	r3, r2
 800139a:	69c2      	ldr	r2, [r0, #28]
 800139c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800139e:	6801      	ldr	r1, [r0, #0]
 80013a0:	6808      	ldr	r0, [r1, #0]
 80013a2:	4a99      	ldr	r2, [pc, #612]	; (8001608 <UART_SetConfig+0x27c>)
 80013a4:	4002      	ands	r2, r0
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013aa:	6822      	ldr	r2, [r4, #0]
 80013ac:	6853      	ldr	r3, [r2, #4]
 80013ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013b2:	68e1      	ldr	r1, [r4, #12]
 80013b4:	430b      	orrs	r3, r1
 80013b6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80013b8:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 80013ba:	6a23      	ldr	r3, [r4, #32]
 80013bc:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80013be:	6821      	ldr	r1, [r4, #0]
 80013c0:	688b      	ldr	r3, [r1, #8]
 80013c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80013c6:	4313      	orrs	r3, r2
 80013c8:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	4a8f      	ldr	r2, [pc, #572]	; (800160c <UART_SetConfig+0x280>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d018      	beq.n	8001404 <UART_SetConfig+0x78>
 80013d2:	4a8f      	ldr	r2, [pc, #572]	; (8001610 <UART_SetConfig+0x284>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d028      	beq.n	800142a <UART_SetConfig+0x9e>
 80013d8:	4a8e      	ldr	r2, [pc, #568]	; (8001614 <UART_SetConfig+0x288>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d03d      	beq.n	800145a <UART_SetConfig+0xce>
 80013de:	4a8e      	ldr	r2, [pc, #568]	; (8001618 <UART_SetConfig+0x28c>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d050      	beq.n	8001486 <UART_SetConfig+0xfa>
 80013e4:	4a8d      	ldr	r2, [pc, #564]	; (800161c <UART_SetConfig+0x290>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d062      	beq.n	80014b0 <UART_SetConfig+0x124>
 80013ea:	4a8d      	ldr	r2, [pc, #564]	; (8001620 <UART_SetConfig+0x294>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d077      	beq.n	80014e0 <UART_SetConfig+0x154>
 80013f0:	4a8c      	ldr	r2, [pc, #560]	; (8001624 <UART_SetConfig+0x298>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	f000 808c 	beq.w	8001510 <UART_SetConfig+0x184>
 80013f8:	4a8b      	ldr	r2, [pc, #556]	; (8001628 <UART_SetConfig+0x29c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	f000 80a0 	beq.w	8001540 <UART_SetConfig+0x1b4>
 8001400:	2310      	movs	r3, #16
 8001402:	e0b6      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001404:	4b89      	ldr	r3, [pc, #548]	; (800162c <UART_SetConfig+0x2a0>)
 8001406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b03      	cmp	r3, #3
 8001410:	d809      	bhi.n	8001426 <UART_SetConfig+0x9a>
 8001412:	e8df f003 	tbb	[pc, r3]
 8001416:	0402      	.short	0x0402
 8001418:	06ad      	.short	0x06ad
 800141a:	2301      	movs	r3, #1
 800141c:	e0a9      	b.n	8001572 <UART_SetConfig+0x1e6>
 800141e:	2304      	movs	r3, #4
 8001420:	e0a7      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001422:	2308      	movs	r3, #8
 8001424:	e0a5      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001426:	2310      	movs	r3, #16
 8001428:	e0a3      	b.n	8001572 <UART_SetConfig+0x1e6>
 800142a:	4b80      	ldr	r3, [pc, #512]	; (800162c <UART_SetConfig+0x2a0>)
 800142c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001430:	f003 030c 	and.w	r3, r3, #12
 8001434:	2b0c      	cmp	r3, #12
 8001436:	d80e      	bhi.n	8001456 <UART_SetConfig+0xca>
 8001438:	e8df f003 	tbb	[pc, r3]
 800143c:	0d0d0d07 	.word	0x0d0d0d07
 8001440:	0d0d0d09 	.word	0x0d0d0d09
 8001444:	0d0d0da9 	.word	0x0d0d0da9
 8001448:	0b          	.byte	0x0b
 8001449:	00          	.byte	0x00
 800144a:	2300      	movs	r3, #0
 800144c:	e091      	b.n	8001572 <UART_SetConfig+0x1e6>
 800144e:	2304      	movs	r3, #4
 8001450:	e08f      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001452:	2308      	movs	r3, #8
 8001454:	e08d      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001456:	2310      	movs	r3, #16
 8001458:	e08b      	b.n	8001572 <UART_SetConfig+0x1e6>
 800145a:	4b74      	ldr	r3, [pc, #464]	; (800162c <UART_SetConfig+0x2a0>)
 800145c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001460:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001464:	2b10      	cmp	r3, #16
 8001466:	d00a      	beq.n	800147e <UART_SetConfig+0xf2>
 8001468:	d906      	bls.n	8001478 <UART_SetConfig+0xec>
 800146a:	2b20      	cmp	r3, #32
 800146c:	f000 8091 	beq.w	8001592 <UART_SetConfig+0x206>
 8001470:	2b30      	cmp	r3, #48	; 0x30
 8001472:	d106      	bne.n	8001482 <UART_SetConfig+0xf6>
 8001474:	2308      	movs	r3, #8
 8001476:	e07c      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001478:	b91b      	cbnz	r3, 8001482 <UART_SetConfig+0xf6>
 800147a:	2300      	movs	r3, #0
 800147c:	e079      	b.n	8001572 <UART_SetConfig+0x1e6>
 800147e:	2304      	movs	r3, #4
 8001480:	e077      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001482:	2310      	movs	r3, #16
 8001484:	e075      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001486:	4b69      	ldr	r3, [pc, #420]	; (800162c <UART_SetConfig+0x2a0>)
 8001488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800148c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001490:	2b40      	cmp	r3, #64	; 0x40
 8001492:	d009      	beq.n	80014a8 <UART_SetConfig+0x11c>
 8001494:	d905      	bls.n	80014a2 <UART_SetConfig+0x116>
 8001496:	2b80      	cmp	r3, #128	; 0x80
 8001498:	d07d      	beq.n	8001596 <UART_SetConfig+0x20a>
 800149a:	2bc0      	cmp	r3, #192	; 0xc0
 800149c:	d106      	bne.n	80014ac <UART_SetConfig+0x120>
 800149e:	2308      	movs	r3, #8
 80014a0:	e067      	b.n	8001572 <UART_SetConfig+0x1e6>
 80014a2:	b91b      	cbnz	r3, 80014ac <UART_SetConfig+0x120>
 80014a4:	2300      	movs	r3, #0
 80014a6:	e064      	b.n	8001572 <UART_SetConfig+0x1e6>
 80014a8:	2304      	movs	r3, #4
 80014aa:	e062      	b.n	8001572 <UART_SetConfig+0x1e6>
 80014ac:	2310      	movs	r3, #16
 80014ae:	e060      	b.n	8001572 <UART_SetConfig+0x1e6>
 80014b0:	4b5e      	ldr	r3, [pc, #376]	; (800162c <UART_SetConfig+0x2a0>)
 80014b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014be:	d00b      	beq.n	80014d8 <UART_SetConfig+0x14c>
 80014c0:	d907      	bls.n	80014d2 <UART_SetConfig+0x146>
 80014c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014c6:	d068      	beq.n	800159a <UART_SetConfig+0x20e>
 80014c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80014cc:	d106      	bne.n	80014dc <UART_SetConfig+0x150>
 80014ce:	2308      	movs	r3, #8
 80014d0:	e04f      	b.n	8001572 <UART_SetConfig+0x1e6>
 80014d2:	b91b      	cbnz	r3, 80014dc <UART_SetConfig+0x150>
 80014d4:	2300      	movs	r3, #0
 80014d6:	e04c      	b.n	8001572 <UART_SetConfig+0x1e6>
 80014d8:	2304      	movs	r3, #4
 80014da:	e04a      	b.n	8001572 <UART_SetConfig+0x1e6>
 80014dc:	2310      	movs	r3, #16
 80014de:	e048      	b.n	8001572 <UART_SetConfig+0x1e6>
 80014e0:	4b52      	ldr	r3, [pc, #328]	; (800162c <UART_SetConfig+0x2a0>)
 80014e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ee:	d00b      	beq.n	8001508 <UART_SetConfig+0x17c>
 80014f0:	d907      	bls.n	8001502 <UART_SetConfig+0x176>
 80014f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014f6:	d052      	beq.n	800159e <UART_SetConfig+0x212>
 80014f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80014fc:	d106      	bne.n	800150c <UART_SetConfig+0x180>
 80014fe:	2308      	movs	r3, #8
 8001500:	e037      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001502:	b91b      	cbnz	r3, 800150c <UART_SetConfig+0x180>
 8001504:	2301      	movs	r3, #1
 8001506:	e034      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001508:	2304      	movs	r3, #4
 800150a:	e032      	b.n	8001572 <UART_SetConfig+0x1e6>
 800150c:	2310      	movs	r3, #16
 800150e:	e030      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001510:	4b46      	ldr	r3, [pc, #280]	; (800162c <UART_SetConfig+0x2a0>)
 8001512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001516:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800151a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800151e:	d00b      	beq.n	8001538 <UART_SetConfig+0x1ac>
 8001520:	d907      	bls.n	8001532 <UART_SetConfig+0x1a6>
 8001522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001526:	d03c      	beq.n	80015a2 <UART_SetConfig+0x216>
 8001528:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800152c:	d106      	bne.n	800153c <UART_SetConfig+0x1b0>
 800152e:	2308      	movs	r3, #8
 8001530:	e01f      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001532:	b91b      	cbnz	r3, 800153c <UART_SetConfig+0x1b0>
 8001534:	2300      	movs	r3, #0
 8001536:	e01c      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001538:	2304      	movs	r3, #4
 800153a:	e01a      	b.n	8001572 <UART_SetConfig+0x1e6>
 800153c:	2310      	movs	r3, #16
 800153e:	e018      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001540:	4b3a      	ldr	r3, [pc, #232]	; (800162c <UART_SetConfig+0x2a0>)
 8001542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001546:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800154a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800154e:	d00b      	beq.n	8001568 <UART_SetConfig+0x1dc>
 8001550:	d907      	bls.n	8001562 <UART_SetConfig+0x1d6>
 8001552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001556:	d026      	beq.n	80015a6 <UART_SetConfig+0x21a>
 8001558:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800155c:	d106      	bne.n	800156c <UART_SetConfig+0x1e0>
 800155e:	2308      	movs	r3, #8
 8001560:	e007      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001562:	b91b      	cbnz	r3, 800156c <UART_SetConfig+0x1e0>
 8001564:	2300      	movs	r3, #0
 8001566:	e004      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001568:	2304      	movs	r3, #4
 800156a:	e002      	b.n	8001572 <UART_SetConfig+0x1e6>
 800156c:	2310      	movs	r3, #16
 800156e:	e000      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001570:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001572:	69e2      	ldr	r2, [r4, #28]
 8001574:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001578:	d017      	beq.n	80015aa <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 800157a:	2b08      	cmp	r3, #8
 800157c:	f200 80b3 	bhi.w	80016e6 <UART_SetConfig+0x35a>
 8001580:	e8df f003 	tbb	[pc, r3]
 8001584:	b1958b76 	.word	0xb1958b76
 8001588:	b1b1b19e 	.word	0xb1b1b19e
 800158c:	a8          	.byte	0xa8
 800158d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800158e:	2302      	movs	r3, #2
 8001590:	e7ef      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001592:	2302      	movs	r3, #2
 8001594:	e7ed      	b.n	8001572 <UART_SetConfig+0x1e6>
 8001596:	2302      	movs	r3, #2
 8001598:	e7eb      	b.n	8001572 <UART_SetConfig+0x1e6>
 800159a:	2302      	movs	r3, #2
 800159c:	e7e9      	b.n	8001572 <UART_SetConfig+0x1e6>
 800159e:	2302      	movs	r3, #2
 80015a0:	e7e7      	b.n	8001572 <UART_SetConfig+0x1e6>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e7e5      	b.n	8001572 <UART_SetConfig+0x1e6>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e7e3      	b.n	8001572 <UART_SetConfig+0x1e6>
    switch (clocksource)
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d85d      	bhi.n	800166a <UART_SetConfig+0x2de>
 80015ae:	e8df f003 	tbb	[pc, r3]
 80015b2:	1f05      	.short	0x1f05
 80015b4:	5c485c3f 	.word	0x5c485c3f
 80015b8:	5c5c      	.short	0x5c5c
 80015ba:	53          	.byte	0x53
 80015bb:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80015bc:	f7ff fec6 	bl	800134c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80015c0:	6862      	ldr	r2, [r4, #4]
 80015c2:	0853      	lsrs	r3, r2, #1
 80015c4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80015c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80015cc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80015ce:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80015d0:	f1a3 0110 	sub.w	r1, r3, #16
 80015d4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80015d8:	4291      	cmp	r1, r2
 80015da:	f200 8087 	bhi.w	80016ec <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80015de:	b29a      	uxth	r2, r3
 80015e0:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80015e4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80015e8:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80015ea:	6822      	ldr	r2, [r4, #0]
 80015ec:	60d3      	str	r3, [r2, #12]
 80015ee:	e050      	b.n	8001692 <UART_SetConfig+0x306>
        pclk = HAL_RCC_GetPCLK2Freq();
 80015f0:	f7ff febc 	bl	800136c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80015f4:	6862      	ldr	r2, [r4, #4]
 80015f6:	0853      	lsrs	r3, r2, #1
 80015f8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80015fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001600:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001602:	2000      	movs	r0, #0
        break;
 8001604:	e7e4      	b.n	80015d0 <UART_SetConfig+0x244>
 8001606:	bf00      	nop
 8001608:	efff69f3 	.word	0xefff69f3
 800160c:	40011000 	.word	0x40011000
 8001610:	40004400 	.word	0x40004400
 8001614:	40004800 	.word	0x40004800
 8001618:	40004c00 	.word	0x40004c00
 800161c:	40005000 	.word	0x40005000
 8001620:	40011400 	.word	0x40011400
 8001624:	40007800 	.word	0x40007800
 8001628:	40007c00 	.word	0x40007c00
 800162c:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001630:	6862      	ldr	r2, [r4, #4]
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <UART_SetConfig+0x368>)
 8001634:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001638:	fbb3 f3f2 	udiv	r3, r3, r2
 800163c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800163e:	2000      	movs	r0, #0
        break;
 8001640:	e7c6      	b.n	80015d0 <UART_SetConfig+0x244>
        pclk = HAL_RCC_GetSysClockFreq();
 8001642:	f7ff fd75 	bl	8001130 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001646:	6862      	ldr	r2, [r4, #4]
 8001648:	0853      	lsrs	r3, r2, #1
 800164a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800164e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001652:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001654:	2000      	movs	r0, #0
        break;
 8001656:	e7bb      	b.n	80015d0 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001658:	6862      	ldr	r2, [r4, #4]
 800165a:	0853      	lsrs	r3, r2, #1
 800165c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001660:	fbb3 f3f2 	udiv	r3, r3, r2
 8001664:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001666:	2000      	movs	r0, #0
        break;
 8001668:	e7b2      	b.n	80015d0 <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 800166a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800166c:	2300      	movs	r3, #0
 800166e:	e7af      	b.n	80015d0 <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001670:	f7ff fe6c 	bl	800134c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001674:	6862      	ldr	r2, [r4, #4]
 8001676:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800167a:	fbb3 f3f2 	udiv	r3, r3, r2
 800167e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001680:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001682:	f1a3 0110 	sub.w	r1, r3, #16
 8001686:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800168a:	4291      	cmp	r1, r2
 800168c:	d830      	bhi.n	80016f0 <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 800168e:	6822      	ldr	r2, [r4, #0]
 8001690:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001692:	2300      	movs	r3, #0
 8001694:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001696:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001698:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800169a:	f7ff fe67 	bl	800136c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800169e:	6862      	ldr	r2, [r4, #4]
 80016a0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80016a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80016a8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016aa:	2000      	movs	r0, #0
        break;
 80016ac:	e7e9      	b.n	8001682 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80016ae:	6862      	ldr	r2, [r4, #4]
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <UART_SetConfig+0x36c>)
 80016b2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80016b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80016ba:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016bc:	2000      	movs	r0, #0
        break;
 80016be:	e7e0      	b.n	8001682 <UART_SetConfig+0x2f6>
        pclk = HAL_RCC_GetSysClockFreq();
 80016c0:	f7ff fd36 	bl	8001130 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80016c4:	6862      	ldr	r2, [r4, #4]
 80016c6:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80016ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80016ce:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016d0:	2000      	movs	r0, #0
        break;
 80016d2:	e7d6      	b.n	8001682 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80016d4:	6862      	ldr	r2, [r4, #4]
 80016d6:	0853      	lsrs	r3, r2, #1
 80016d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80016dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80016e0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016e2:	2000      	movs	r0, #0
        break;
 80016e4:	e7cd      	b.n	8001682 <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 80016e6:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	e7ca      	b.n	8001682 <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 80016ec:	2001      	movs	r0, #1
 80016ee:	e7d0      	b.n	8001692 <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 80016f0:	2001      	movs	r0, #1
 80016f2:	e7ce      	b.n	8001692 <UART_SetConfig+0x306>
 80016f4:	01e84800 	.word	0x01e84800
 80016f8:	00f42400 	.word	0x00f42400

080016fc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80016fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80016fe:	f013 0f01 	tst.w	r3, #1
 8001702:	d006      	beq.n	8001712 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001704:	6802      	ldr	r2, [r0, #0]
 8001706:	6853      	ldr	r3, [r2, #4]
 8001708:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800170c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800170e:	430b      	orrs	r3, r1
 8001710:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001712:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001714:	f013 0f02 	tst.w	r3, #2
 8001718:	d006      	beq.n	8001728 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800171a:	6802      	ldr	r2, [r0, #0]
 800171c:	6853      	ldr	r3, [r2, #4]
 800171e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001722:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001724:	430b      	orrs	r3, r1
 8001726:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001728:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800172a:	f013 0f04 	tst.w	r3, #4
 800172e:	d006      	beq.n	800173e <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001730:	6802      	ldr	r2, [r0, #0]
 8001732:	6853      	ldr	r3, [r2, #4]
 8001734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001738:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800173a:	430b      	orrs	r3, r1
 800173c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800173e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001740:	f013 0f08 	tst.w	r3, #8
 8001744:	d006      	beq.n	8001754 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001746:	6802      	ldr	r2, [r0, #0]
 8001748:	6853      	ldr	r3, [r2, #4]
 800174a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800174e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001750:	430b      	orrs	r3, r1
 8001752:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001754:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001756:	f013 0f10 	tst.w	r3, #16
 800175a:	d006      	beq.n	800176a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800175c:	6802      	ldr	r2, [r0, #0]
 800175e:	6893      	ldr	r3, [r2, #8]
 8001760:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001764:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001766:	430b      	orrs	r3, r1
 8001768:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800176a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800176c:	f013 0f20 	tst.w	r3, #32
 8001770:	d006      	beq.n	8001780 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001772:	6802      	ldr	r2, [r0, #0]
 8001774:	6893      	ldr	r3, [r2, #8]
 8001776:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800177a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800177c:	430b      	orrs	r3, r1
 800177e:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001780:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001782:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001786:	d00a      	beq.n	800179e <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001788:	6802      	ldr	r2, [r0, #0]
 800178a:	6853      	ldr	r3, [r2, #4]
 800178c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001790:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001792:	430b      	orrs	r3, r1
 8001794:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001796:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800179c:	d00b      	beq.n	80017b6 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800179e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017a4:	d006      	beq.n	80017b4 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80017a6:	6802      	ldr	r2, [r0, #0]
 80017a8:	6853      	ldr	r3, [r2, #4]
 80017aa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80017ae:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80017b0:	430b      	orrs	r3, r1
 80017b2:	6053      	str	r3, [r2, #4]
  }
}
 80017b4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80017b6:	6802      	ldr	r2, [r0, #0]
 80017b8:	6853      	ldr	r3, [r2, #4]
 80017ba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80017be:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80017c0:	430b      	orrs	r3, r1
 80017c2:	6053      	str	r3, [r2, #4]
 80017c4:	e7eb      	b.n	800179e <UART_AdvFeatureConfig+0xa2>

080017c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80017c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017ca:	4604      	mov	r4, r0
 80017cc:	460f      	mov	r7, r1
 80017ce:	4616      	mov	r6, r2
 80017d0:	4698      	mov	r8, r3
 80017d2:	9d06      	ldr	r5, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017d4:	6823      	ldr	r3, [r4, #0]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	ea37 0303 	bics.w	r3, r7, r3
 80017dc:	bf0c      	ite	eq
 80017de:	2301      	moveq	r3, #1
 80017e0:	2300      	movne	r3, #0
 80017e2:	42b3      	cmp	r3, r6
 80017e4:	d13a      	bne.n	800185c <UART_WaitOnFlagUntilTimeout+0x96>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017e6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80017ea:	d0f3      	beq.n	80017d4 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ec:	f7ff f8de 	bl	80009ac <HAL_GetTick>
 80017f0:	eba0 0008 	sub.w	r0, r0, r8
 80017f4:	42a8      	cmp	r0, r5
 80017f6:	d81f      	bhi.n	8001838 <UART_WaitOnFlagUntilTimeout+0x72>
 80017f8:	b1f5      	cbz	r5, 8001838 <UART_WaitOnFlagUntilTimeout+0x72>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	f012 0f04 	tst.w	r2, #4
 8001802:	d0e7      	beq.n	80017d4 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800180a:	d0e3      	beq.n	80017d4 <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800180c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001810:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001812:	6822      	ldr	r2, [r4, #0]
 8001814:	6813      	ldr	r3, [r2, #0]
 8001816:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800181a:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800181c:	6822      	ldr	r2, [r4, #0]
 800181e:	6893      	ldr	r3, [r2, #8]
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001826:	2320      	movs	r3, #32
 8001828:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800182a:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800182c:	67e3      	str	r3, [r4, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800182e:	2300      	movs	r3, #0
 8001830:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8001834:	2003      	movs	r0, #3
 8001836:	e012      	b.n	800185e <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001838:	6822      	ldr	r2, [r4, #0]
 800183a:	6813      	ldr	r3, [r2, #0]
 800183c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001840:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001842:	6822      	ldr	r2, [r4, #0]
 8001844:	6893      	ldr	r3, [r2, #8]
 8001846:	f023 0301 	bic.w	r3, r3, #1
 800184a:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800184c:	2320      	movs	r3, #32
 800184e:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001850:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001852:	2300      	movs	r3, #0
 8001854:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        return HAL_TIMEOUT;
 8001858:	2003      	movs	r0, #3
 800185a:	e000      	b.n	800185e <UART_WaitOnFlagUntilTimeout+0x98>
        }
      }
    }
  }
  return HAL_OK;
 800185c:	2000      	movs	r0, #0
}
 800185e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001862 <HAL_UART_Transmit>:
{
 8001862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800186a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800186c:	2b20      	cmp	r3, #32
 800186e:	d159      	bne.n	8001924 <HAL_UART_Transmit+0xc2>
 8001870:	4604      	mov	r4, r0
 8001872:	460d      	mov	r5, r1
 8001874:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001876:	fab2 f382 	clz	r3, r2
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	2900      	cmp	r1, #0
 800187e:	bf08      	it	eq
 8001880:	2301      	moveq	r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d153      	bne.n	800192e <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8001886:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800188a:	2b01      	cmp	r3, #1
 800188c:	d051      	beq.n	8001932 <HAL_UART_Transmit+0xd0>
 800188e:	2301      	movs	r3, #1
 8001890:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001894:	2300      	movs	r3, #0
 8001896:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001898:	2321      	movs	r3, #33	; 0x21
 800189a:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800189c:	f7ff f886 	bl	80009ac <HAL_GetTick>
 80018a0:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80018a2:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80018a6:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018aa:	68a3      	ldr	r3, [r4, #8]
 80018ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018b0:	d005      	beq.n	80018be <HAL_UART_Transmit+0x5c>
      pdata16bits = NULL;
 80018b2:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80018b6:	2300      	movs	r3, #0
 80018b8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 80018bc:	e013      	b.n	80018e6 <HAL_UART_Transmit+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018be:	6923      	ldr	r3, [r4, #16]
 80018c0:	b113      	cbz	r3, 80018c8 <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 80018c2:	f04f 0800 	mov.w	r8, #0
 80018c6:	e7f6      	b.n	80018b6 <HAL_UART_Transmit+0x54>
      pdata16bits = (uint16_t *) pData;
 80018c8:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80018ca:	2500      	movs	r5, #0
 80018cc:	e7f3      	b.n	80018b6 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018ce:	f838 3b02 	ldrh.w	r3, [r8], #2
 80018d2:	6822      	ldr	r2, [r4, #0]
 80018d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018d8:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80018da:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80018e6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	b173      	cbz	r3, 800190c <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018ee:	9600      	str	r6, [sp, #0]
 80018f0:	463b      	mov	r3, r7
 80018f2:	2200      	movs	r2, #0
 80018f4:	2180      	movs	r1, #128	; 0x80
 80018f6:	4620      	mov	r0, r4
 80018f8:	f7ff ff65 	bl	80017c6 <UART_WaitOnFlagUntilTimeout>
 80018fc:	b9d8      	cbnz	r0, 8001936 <HAL_UART_Transmit+0xd4>
      if (pdata8bits == NULL)
 80018fe:	2d00      	cmp	r5, #0
 8001900:	d0e5      	beq.n	80018ce <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001902:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	629a      	str	r2, [r3, #40]	; 0x28
 800190a:	e7e6      	b.n	80018da <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800190c:	9600      	str	r6, [sp, #0]
 800190e:	463b      	mov	r3, r7
 8001910:	2200      	movs	r2, #0
 8001912:	2140      	movs	r1, #64	; 0x40
 8001914:	4620      	mov	r0, r4
 8001916:	f7ff ff56 	bl	80017c6 <UART_WaitOnFlagUntilTimeout>
 800191a:	4603      	mov	r3, r0
 800191c:	b968      	cbnz	r0, 800193a <HAL_UART_Transmit+0xd8>
    huart->gState = HAL_UART_STATE_READY;
 800191e:	2220      	movs	r2, #32
 8001920:	6762      	str	r2, [r4, #116]	; 0x74
    return HAL_OK;
 8001922:	e000      	b.n	8001926 <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 8001924:	2302      	movs	r3, #2
}
 8001926:	4618      	mov	r0, r3
 8001928:	b002      	add	sp, #8
 800192a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e7f9      	b.n	8001926 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8001932:	2302      	movs	r3, #2
 8001934:	e7f7      	b.n	8001926 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e7f5      	b.n	8001926 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e7f3      	b.n	8001926 <HAL_UART_Transmit+0xc4>

0800193e <HAL_UART_Receive>:
{
 800193e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001942:	b083      	sub	sp, #12
 8001944:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001946:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001948:	2b20      	cmp	r3, #32
 800194a:	d17f      	bne.n	8001a4c <HAL_UART_Receive+0x10e>
 800194c:	4604      	mov	r4, r0
 800194e:	460d      	mov	r5, r1
 8001950:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001952:	fab2 f382 	clz	r3, r2
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	2900      	cmp	r1, #0
 800195a:	bf08      	it	eq
 800195c:	2301      	moveq	r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d178      	bne.n	8001a54 <HAL_UART_Receive+0x116>
    __HAL_LOCK(huart);
 8001962:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001966:	2b01      	cmp	r3, #1
 8001968:	d076      	beq.n	8001a58 <HAL_UART_Receive+0x11a>
 800196a:	2301      	movs	r3, #1
 800196c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001970:	2300      	movs	r3, #0
 8001972:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001974:	2322      	movs	r3, #34	; 0x22
 8001976:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8001978:	f7ff f818 	bl	80009ac <HAL_GetTick>
 800197c:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 800197e:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8001982:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001986:	68a3      	ldr	r3, [r4, #8]
 8001988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800198c:	d006      	beq.n	800199c <HAL_UART_Receive+0x5e>
 800198e:	b9a3      	cbnz	r3, 80019ba <HAL_UART_Receive+0x7c>
 8001990:	6922      	ldr	r2, [r4, #16]
 8001992:	b972      	cbnz	r2, 80019b2 <HAL_UART_Receive+0x74>
 8001994:	22ff      	movs	r2, #255	; 0xff
 8001996:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800199a:	e014      	b.n	80019c6 <HAL_UART_Receive+0x88>
 800199c:	6922      	ldr	r2, [r4, #16]
 800199e:	b922      	cbnz	r2, 80019aa <HAL_UART_Receive+0x6c>
 80019a0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80019a4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019a8:	e00d      	b.n	80019c6 <HAL_UART_Receive+0x88>
 80019aa:	22ff      	movs	r2, #255	; 0xff
 80019ac:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019b0:	e009      	b.n	80019c6 <HAL_UART_Receive+0x88>
 80019b2:	227f      	movs	r2, #127	; 0x7f
 80019b4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019b8:	e005      	b.n	80019c6 <HAL_UART_Receive+0x88>
 80019ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019be:	d00d      	beq.n	80019dc <HAL_UART_Receive+0x9e>
 80019c0:	2200      	movs	r2, #0
 80019c2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 80019c6:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019ce:	d00f      	beq.n	80019f0 <HAL_UART_Receive+0xb2>
      pdata16bits = NULL;
 80019d0:	f04f 0900 	mov.w	r9, #0
    __HAL_UNLOCK(huart);
 80019d4:	2300      	movs	r3, #0
 80019d6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->RxXferCount > 0U)
 80019da:	e01d      	b.n	8001a18 <HAL_UART_Receive+0xda>
    UART_MASK_COMPUTATION(huart);
 80019dc:	6922      	ldr	r2, [r4, #16]
 80019de:	b91a      	cbnz	r2, 80019e8 <HAL_UART_Receive+0xaa>
 80019e0:	227f      	movs	r2, #127	; 0x7f
 80019e2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019e6:	e7ee      	b.n	80019c6 <HAL_UART_Receive+0x88>
 80019e8:	223f      	movs	r2, #63	; 0x3f
 80019ea:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80019ee:	e7ea      	b.n	80019c6 <HAL_UART_Receive+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019f0:	6923      	ldr	r3, [r4, #16]
 80019f2:	b113      	cbz	r3, 80019fa <HAL_UART_Receive+0xbc>
      pdata16bits = NULL;
 80019f4:	f04f 0900 	mov.w	r9, #0
 80019f8:	e7ec      	b.n	80019d4 <HAL_UART_Receive+0x96>
      pdata16bits = (uint16_t *) pData;
 80019fa:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 80019fc:	2500      	movs	r5, #0
 80019fe:	e7e9      	b.n	80019d4 <HAL_UART_Receive+0x96>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	ea08 0303 	and.w	r3, r8, r3
 8001a08:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 8001a0c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8001a18:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	b18b      	cbz	r3, 8001a44 <HAL_UART_Receive+0x106>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a20:	9600      	str	r6, [sp, #0]
 8001a22:	463b      	mov	r3, r7
 8001a24:	2200      	movs	r2, #0
 8001a26:	2120      	movs	r1, #32
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f7ff fecc 	bl	80017c6 <UART_WaitOnFlagUntilTimeout>
 8001a2e:	b9a8      	cbnz	r0, 8001a5c <HAL_UART_Receive+0x11e>
      if (pdata8bits == NULL)
 8001a30:	2d00      	cmp	r5, #0
 8001a32:	d0e5      	beq.n	8001a00 <HAL_UART_Receive+0xc2>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a38:	fa5f f388 	uxtb.w	r3, r8
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	f805 3b01 	strb.w	r3, [r5], #1
 8001a42:	e7e3      	b.n	8001a0c <HAL_UART_Receive+0xce>
    huart->RxState = HAL_UART_STATE_READY;
 8001a44:	2320      	movs	r3, #32
 8001a46:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8001a48:	2000      	movs	r0, #0
 8001a4a:	e000      	b.n	8001a4e <HAL_UART_Receive+0x110>
    return HAL_BUSY;
 8001a4c:	2002      	movs	r0, #2
}
 8001a4e:	b003      	add	sp, #12
 8001a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001a54:	2001      	movs	r0, #1
 8001a56:	e7fa      	b.n	8001a4e <HAL_UART_Receive+0x110>
    __HAL_LOCK(huart);
 8001a58:	2002      	movs	r0, #2
 8001a5a:	e7f8      	b.n	8001a4e <HAL_UART_Receive+0x110>
        return HAL_TIMEOUT;
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	e7f6      	b.n	8001a4e <HAL_UART_Receive+0x110>

08001a60 <UART_CheckIdleState>:
{
 8001a60:	b530      	push	{r4, r5, lr}
 8001a62:	b083      	sub	sp, #12
 8001a64:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001a6a:	f7fe ff9f 	bl	80009ac <HAL_GetTick>
 8001a6e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a70:	6823      	ldr	r3, [r4, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f013 0f08 	tst.w	r3, #8
 8001a78:	d10c      	bne.n	8001a94 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f013 0f04 	tst.w	r3, #4
 8001a82:	d115      	bne.n	8001ab0 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8001a84:	2320      	movs	r3, #32
 8001a86:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001a88:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001a90:	b003      	add	sp, #12
 8001a92:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f7ff fe8f 	bl	80017c6 <UART_WaitOnFlagUntilTimeout>
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d0e6      	beq.n	8001a7a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8001aac:	2003      	movs	r0, #3
 8001aae:	e7ef      	b.n	8001a90 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ab0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	462b      	mov	r3, r5
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001abe:	4620      	mov	r0, r4
 8001ac0:	f7ff fe81 	bl	80017c6 <UART_WaitOnFlagUntilTimeout>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d0dd      	beq.n	8001a84 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8001ac8:	2003      	movs	r0, #3
 8001aca:	e7e1      	b.n	8001a90 <UART_CheckIdleState+0x30>

08001acc <HAL_UART_Init>:
  if (huart == NULL)
 8001acc:	b368      	cbz	r0, 8001b2a <HAL_UART_Init+0x5e>
{
 8001ace:	b510      	push	{r4, lr}
 8001ad0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001ad2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001ad4:	b303      	cbz	r3, 8001b18 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001ad6:	2324      	movs	r3, #36	; 0x24
 8001ad8:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001ada:	6822      	ldr	r2, [r4, #0]
 8001adc:	6813      	ldr	r3, [r2, #0]
 8001ade:	f023 0301 	bic.w	r3, r3, #1
 8001ae2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f7ff fc51 	bl	800138c <UART_SetConfig>
 8001aea:	2801      	cmp	r0, #1
 8001aec:	d013      	beq.n	8001b16 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001af0:	b9bb      	cbnz	r3, 8001b22 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001af2:	6822      	ldr	r2, [r4, #0]
 8001af4:	6853      	ldr	r3, [r2, #4]
 8001af6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001afa:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001afc:	6822      	ldr	r2, [r4, #0]
 8001afe:	6893      	ldr	r3, [r2, #8]
 8001b00:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001b04:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001b06:	6822      	ldr	r2, [r4, #0]
 8001b08:	6813      	ldr	r3, [r2, #0]
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001b10:	4620      	mov	r0, r4
 8001b12:	f7ff ffa5 	bl	8001a60 <UART_CheckIdleState>
}
 8001b16:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001b18:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001b1c:	f7fe fe34 	bl	8000788 <HAL_UART_MspInit>
 8001b20:	e7d9      	b.n	8001ad6 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8001b22:	4620      	mov	r0, r4
 8001b24:	f7ff fdea 	bl	80016fc <UART_AdvFeatureConfig>
 8001b28:	e7e3      	b.n	8001af2 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8001b2a:	2001      	movs	r0, #1
}
 8001b2c:	4770      	bx	lr
	...

08001b30 <__sflush_r>:
 8001b30:	898a      	ldrh	r2, [r1, #12]
 8001b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b36:	4605      	mov	r5, r0
 8001b38:	0710      	lsls	r0, r2, #28
 8001b3a:	460c      	mov	r4, r1
 8001b3c:	d458      	bmi.n	8001bf0 <__sflush_r+0xc0>
 8001b3e:	684b      	ldr	r3, [r1, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	dc05      	bgt.n	8001b50 <__sflush_r+0x20>
 8001b44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	dc02      	bgt.n	8001b50 <__sflush_r+0x20>
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b52:	2e00      	cmp	r6, #0
 8001b54:	d0f9      	beq.n	8001b4a <__sflush_r+0x1a>
 8001b56:	2300      	movs	r3, #0
 8001b58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001b5c:	682f      	ldr	r7, [r5, #0]
 8001b5e:	6a21      	ldr	r1, [r4, #32]
 8001b60:	602b      	str	r3, [r5, #0]
 8001b62:	d032      	beq.n	8001bca <__sflush_r+0x9a>
 8001b64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001b66:	89a3      	ldrh	r3, [r4, #12]
 8001b68:	075a      	lsls	r2, r3, #29
 8001b6a:	d505      	bpl.n	8001b78 <__sflush_r+0x48>
 8001b6c:	6863      	ldr	r3, [r4, #4]
 8001b6e:	1ac0      	subs	r0, r0, r3
 8001b70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b72:	b10b      	cbz	r3, 8001b78 <__sflush_r+0x48>
 8001b74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b76:	1ac0      	subs	r0, r0, r3
 8001b78:	2300      	movs	r3, #0
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b7e:	6a21      	ldr	r1, [r4, #32]
 8001b80:	4628      	mov	r0, r5
 8001b82:	47b0      	blx	r6
 8001b84:	1c43      	adds	r3, r0, #1
 8001b86:	89a3      	ldrh	r3, [r4, #12]
 8001b88:	d106      	bne.n	8001b98 <__sflush_r+0x68>
 8001b8a:	6829      	ldr	r1, [r5, #0]
 8001b8c:	291d      	cmp	r1, #29
 8001b8e:	d848      	bhi.n	8001c22 <__sflush_r+0xf2>
 8001b90:	4a29      	ldr	r2, [pc, #164]	; (8001c38 <__sflush_r+0x108>)
 8001b92:	40ca      	lsrs	r2, r1
 8001b94:	07d6      	lsls	r6, r2, #31
 8001b96:	d544      	bpl.n	8001c22 <__sflush_r+0xf2>
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6062      	str	r2, [r4, #4]
 8001b9c:	04d9      	lsls	r1, r3, #19
 8001b9e:	6922      	ldr	r2, [r4, #16]
 8001ba0:	6022      	str	r2, [r4, #0]
 8001ba2:	d504      	bpl.n	8001bae <__sflush_r+0x7e>
 8001ba4:	1c42      	adds	r2, r0, #1
 8001ba6:	d101      	bne.n	8001bac <__sflush_r+0x7c>
 8001ba8:	682b      	ldr	r3, [r5, #0]
 8001baa:	b903      	cbnz	r3, 8001bae <__sflush_r+0x7e>
 8001bac:	6560      	str	r0, [r4, #84]	; 0x54
 8001bae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bb0:	602f      	str	r7, [r5, #0]
 8001bb2:	2900      	cmp	r1, #0
 8001bb4:	d0c9      	beq.n	8001b4a <__sflush_r+0x1a>
 8001bb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bba:	4299      	cmp	r1, r3
 8001bbc:	d002      	beq.n	8001bc4 <__sflush_r+0x94>
 8001bbe:	4628      	mov	r0, r5
 8001bc0:	f000 f99c 	bl	8001efc <_free_r>
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	6360      	str	r0, [r4, #52]	; 0x34
 8001bc8:	e7c0      	b.n	8001b4c <__sflush_r+0x1c>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	4628      	mov	r0, r5
 8001bce:	47b0      	blx	r6
 8001bd0:	1c41      	adds	r1, r0, #1
 8001bd2:	d1c8      	bne.n	8001b66 <__sflush_r+0x36>
 8001bd4:	682b      	ldr	r3, [r5, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0c5      	beq.n	8001b66 <__sflush_r+0x36>
 8001bda:	2b1d      	cmp	r3, #29
 8001bdc:	d001      	beq.n	8001be2 <__sflush_r+0xb2>
 8001bde:	2b16      	cmp	r3, #22
 8001be0:	d101      	bne.n	8001be6 <__sflush_r+0xb6>
 8001be2:	602f      	str	r7, [r5, #0]
 8001be4:	e7b1      	b.n	8001b4a <__sflush_r+0x1a>
 8001be6:	89a3      	ldrh	r3, [r4, #12]
 8001be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bec:	81a3      	strh	r3, [r4, #12]
 8001bee:	e7ad      	b.n	8001b4c <__sflush_r+0x1c>
 8001bf0:	690f      	ldr	r7, [r1, #16]
 8001bf2:	2f00      	cmp	r7, #0
 8001bf4:	d0a9      	beq.n	8001b4a <__sflush_r+0x1a>
 8001bf6:	0793      	lsls	r3, r2, #30
 8001bf8:	680e      	ldr	r6, [r1, #0]
 8001bfa:	bf08      	it	eq
 8001bfc:	694b      	ldreq	r3, [r1, #20]
 8001bfe:	600f      	str	r7, [r1, #0]
 8001c00:	bf18      	it	ne
 8001c02:	2300      	movne	r3, #0
 8001c04:	eba6 0807 	sub.w	r8, r6, r7
 8001c08:	608b      	str	r3, [r1, #8]
 8001c0a:	f1b8 0f00 	cmp.w	r8, #0
 8001c0e:	dd9c      	ble.n	8001b4a <__sflush_r+0x1a>
 8001c10:	4643      	mov	r3, r8
 8001c12:	463a      	mov	r2, r7
 8001c14:	6a21      	ldr	r1, [r4, #32]
 8001c16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001c18:	4628      	mov	r0, r5
 8001c1a:	47b0      	blx	r6
 8001c1c:	2800      	cmp	r0, #0
 8001c1e:	dc06      	bgt.n	8001c2e <__sflush_r+0xfe>
 8001c20:	89a3      	ldrh	r3, [r4, #12]
 8001c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c26:	81a3      	strh	r3, [r4, #12]
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	e78e      	b.n	8001b4c <__sflush_r+0x1c>
 8001c2e:	4407      	add	r7, r0
 8001c30:	eba8 0800 	sub.w	r8, r8, r0
 8001c34:	e7e9      	b.n	8001c0a <__sflush_r+0xda>
 8001c36:	bf00      	nop
 8001c38:	20400001 	.word	0x20400001

08001c3c <_fflush_r>:
 8001c3c:	b538      	push	{r3, r4, r5, lr}
 8001c3e:	690b      	ldr	r3, [r1, #16]
 8001c40:	4605      	mov	r5, r0
 8001c42:	460c      	mov	r4, r1
 8001c44:	b1db      	cbz	r3, 8001c7e <_fflush_r+0x42>
 8001c46:	b118      	cbz	r0, 8001c50 <_fflush_r+0x14>
 8001c48:	6983      	ldr	r3, [r0, #24]
 8001c4a:	b90b      	cbnz	r3, 8001c50 <_fflush_r+0x14>
 8001c4c:	f000 f872 	bl	8001d34 <__sinit>
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <_fflush_r+0x48>)
 8001c52:	429c      	cmp	r4, r3
 8001c54:	d109      	bne.n	8001c6a <_fflush_r+0x2e>
 8001c56:	686c      	ldr	r4, [r5, #4]
 8001c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c5c:	b17b      	cbz	r3, 8001c7e <_fflush_r+0x42>
 8001c5e:	4621      	mov	r1, r4
 8001c60:	4628      	mov	r0, r5
 8001c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c66:	f7ff bf63 	b.w	8001b30 <__sflush_r>
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <_fflush_r+0x4c>)
 8001c6c:	429c      	cmp	r4, r3
 8001c6e:	d101      	bne.n	8001c74 <_fflush_r+0x38>
 8001c70:	68ac      	ldr	r4, [r5, #8]
 8001c72:	e7f1      	b.n	8001c58 <_fflush_r+0x1c>
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <_fflush_r+0x50>)
 8001c76:	429c      	cmp	r4, r3
 8001c78:	bf08      	it	eq
 8001c7a:	68ec      	ldreq	r4, [r5, #12]
 8001c7c:	e7ec      	b.n	8001c58 <_fflush_r+0x1c>
 8001c7e:	2000      	movs	r0, #0
 8001c80:	bd38      	pop	{r3, r4, r5, pc}
 8001c82:	bf00      	nop
 8001c84:	08002df0 	.word	0x08002df0
 8001c88:	08002e10 	.word	0x08002e10
 8001c8c:	08002dd0 	.word	0x08002dd0

08001c90 <fflush>:
 8001c90:	4601      	mov	r1, r0
 8001c92:	b920      	cbnz	r0, 8001c9e <fflush+0xe>
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <fflush+0x18>)
 8001c96:	4905      	ldr	r1, [pc, #20]	; (8001cac <fflush+0x1c>)
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	f000 b8d3 	b.w	8001e44 <_fwalk_reent>
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <fflush+0x20>)
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	f7ff bfcb 	b.w	8001c3c <_fflush_r>
 8001ca6:	bf00      	nop
 8001ca8:	08002e30 	.word	0x08002e30
 8001cac:	08001c3d 	.word	0x08001c3d
 8001cb0:	2000000c 	.word	0x2000000c

08001cb4 <std>:
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	b510      	push	{r4, lr}
 8001cb8:	4604      	mov	r4, r0
 8001cba:	e9c0 3300 	strd	r3, r3, [r0]
 8001cbe:	6083      	str	r3, [r0, #8]
 8001cc0:	8181      	strh	r1, [r0, #12]
 8001cc2:	6643      	str	r3, [r0, #100]	; 0x64
 8001cc4:	81c2      	strh	r2, [r0, #14]
 8001cc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001cca:	6183      	str	r3, [r0, #24]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	2208      	movs	r2, #8
 8001cd0:	305c      	adds	r0, #92	; 0x5c
 8001cd2:	f000 f90b 	bl	8001eec <memset>
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <std+0x38>)
 8001cd8:	6263      	str	r3, [r4, #36]	; 0x24
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <std+0x3c>)
 8001cdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <std+0x40>)
 8001ce0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <std+0x44>)
 8001ce4:	6224      	str	r4, [r4, #32]
 8001ce6:	6323      	str	r3, [r4, #48]	; 0x30
 8001ce8:	bd10      	pop	{r4, pc}
 8001cea:	bf00      	nop
 8001cec:	0800209d 	.word	0x0800209d
 8001cf0:	080020bf 	.word	0x080020bf
 8001cf4:	080020f7 	.word	0x080020f7
 8001cf8:	0800211b 	.word	0x0800211b

08001cfc <_cleanup_r>:
 8001cfc:	4901      	ldr	r1, [pc, #4]	; (8001d04 <_cleanup_r+0x8>)
 8001cfe:	f000 b8a1 	b.w	8001e44 <_fwalk_reent>
 8001d02:	bf00      	nop
 8001d04:	08001c3d 	.word	0x08001c3d

08001d08 <__sfmoreglue>:
 8001d08:	b570      	push	{r4, r5, r6, lr}
 8001d0a:	1e4a      	subs	r2, r1, #1
 8001d0c:	2568      	movs	r5, #104	; 0x68
 8001d0e:	4355      	muls	r5, r2
 8001d10:	460e      	mov	r6, r1
 8001d12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001d16:	f000 f93f 	bl	8001f98 <_malloc_r>
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	b140      	cbz	r0, 8001d30 <__sfmoreglue+0x28>
 8001d1e:	2100      	movs	r1, #0
 8001d20:	e9c0 1600 	strd	r1, r6, [r0]
 8001d24:	300c      	adds	r0, #12
 8001d26:	60a0      	str	r0, [r4, #8]
 8001d28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001d2c:	f000 f8de 	bl	8001eec <memset>
 8001d30:	4620      	mov	r0, r4
 8001d32:	bd70      	pop	{r4, r5, r6, pc}

08001d34 <__sinit>:
 8001d34:	6983      	ldr	r3, [r0, #24]
 8001d36:	b510      	push	{r4, lr}
 8001d38:	4604      	mov	r4, r0
 8001d3a:	bb33      	cbnz	r3, 8001d8a <__sinit+0x56>
 8001d3c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001d40:	6503      	str	r3, [r0, #80]	; 0x50
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <__sinit+0x58>)
 8001d44:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <__sinit+0x5c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6282      	str	r2, [r0, #40]	; 0x28
 8001d4a:	4298      	cmp	r0, r3
 8001d4c:	bf04      	itt	eq
 8001d4e:	2301      	moveq	r3, #1
 8001d50:	6183      	streq	r3, [r0, #24]
 8001d52:	f000 f81f 	bl	8001d94 <__sfp>
 8001d56:	6060      	str	r0, [r4, #4]
 8001d58:	4620      	mov	r0, r4
 8001d5a:	f000 f81b 	bl	8001d94 <__sfp>
 8001d5e:	60a0      	str	r0, [r4, #8]
 8001d60:	4620      	mov	r0, r4
 8001d62:	f000 f817 	bl	8001d94 <__sfp>
 8001d66:	2200      	movs	r2, #0
 8001d68:	60e0      	str	r0, [r4, #12]
 8001d6a:	2104      	movs	r1, #4
 8001d6c:	6860      	ldr	r0, [r4, #4]
 8001d6e:	f7ff ffa1 	bl	8001cb4 <std>
 8001d72:	2201      	movs	r2, #1
 8001d74:	2109      	movs	r1, #9
 8001d76:	68a0      	ldr	r0, [r4, #8]
 8001d78:	f7ff ff9c 	bl	8001cb4 <std>
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	2112      	movs	r1, #18
 8001d80:	68e0      	ldr	r0, [r4, #12]
 8001d82:	f7ff ff97 	bl	8001cb4 <std>
 8001d86:	2301      	movs	r3, #1
 8001d88:	61a3      	str	r3, [r4, #24]
 8001d8a:	bd10      	pop	{r4, pc}
 8001d8c:	08002e30 	.word	0x08002e30
 8001d90:	08001cfd 	.word	0x08001cfd

08001d94 <__sfp>:
 8001d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d96:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <__sfp+0x70>)
 8001d98:	681e      	ldr	r6, [r3, #0]
 8001d9a:	69b3      	ldr	r3, [r6, #24]
 8001d9c:	4607      	mov	r7, r0
 8001d9e:	b913      	cbnz	r3, 8001da6 <__sfp+0x12>
 8001da0:	4630      	mov	r0, r6
 8001da2:	f7ff ffc7 	bl	8001d34 <__sinit>
 8001da6:	3648      	adds	r6, #72	; 0x48
 8001da8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	d503      	bpl.n	8001db8 <__sfp+0x24>
 8001db0:	6833      	ldr	r3, [r6, #0]
 8001db2:	b133      	cbz	r3, 8001dc2 <__sfp+0x2e>
 8001db4:	6836      	ldr	r6, [r6, #0]
 8001db6:	e7f7      	b.n	8001da8 <__sfp+0x14>
 8001db8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001dbc:	b16d      	cbz	r5, 8001dda <__sfp+0x46>
 8001dbe:	3468      	adds	r4, #104	; 0x68
 8001dc0:	e7f4      	b.n	8001dac <__sfp+0x18>
 8001dc2:	2104      	movs	r1, #4
 8001dc4:	4638      	mov	r0, r7
 8001dc6:	f7ff ff9f 	bl	8001d08 <__sfmoreglue>
 8001dca:	6030      	str	r0, [r6, #0]
 8001dcc:	2800      	cmp	r0, #0
 8001dce:	d1f1      	bne.n	8001db4 <__sfp+0x20>
 8001dd0:	230c      	movs	r3, #12
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	4604      	mov	r4, r0
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <__sfp+0x74>)
 8001ddc:	6665      	str	r5, [r4, #100]	; 0x64
 8001dde:	e9c4 5500 	strd	r5, r5, [r4]
 8001de2:	60a5      	str	r5, [r4, #8]
 8001de4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001de8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001dec:	2208      	movs	r2, #8
 8001dee:	4629      	mov	r1, r5
 8001df0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001df4:	f000 f87a 	bl	8001eec <memset>
 8001df8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001dfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001e00:	e7e9      	b.n	8001dd6 <__sfp+0x42>
 8001e02:	bf00      	nop
 8001e04:	08002e30 	.word	0x08002e30
 8001e08:	ffff0001 	.word	0xffff0001

08001e0c <_fwalk>:
 8001e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e10:	4688      	mov	r8, r1
 8001e12:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001e16:	2600      	movs	r6, #0
 8001e18:	b914      	cbnz	r4, 8001e20 <_fwalk+0x14>
 8001e1a:	4630      	mov	r0, r6
 8001e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e20:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001e24:	3f01      	subs	r7, #1
 8001e26:	d501      	bpl.n	8001e2c <_fwalk+0x20>
 8001e28:	6824      	ldr	r4, [r4, #0]
 8001e2a:	e7f5      	b.n	8001e18 <_fwalk+0xc>
 8001e2c:	89ab      	ldrh	r3, [r5, #12]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d906      	bls.n	8001e40 <_fwalk+0x34>
 8001e32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e36:	3301      	adds	r3, #1
 8001e38:	d002      	beq.n	8001e40 <_fwalk+0x34>
 8001e3a:	4628      	mov	r0, r5
 8001e3c:	47c0      	blx	r8
 8001e3e:	4306      	orrs	r6, r0
 8001e40:	3568      	adds	r5, #104	; 0x68
 8001e42:	e7ef      	b.n	8001e24 <_fwalk+0x18>

08001e44 <_fwalk_reent>:
 8001e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e48:	4680      	mov	r8, r0
 8001e4a:	4689      	mov	r9, r1
 8001e4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001e50:	2600      	movs	r6, #0
 8001e52:	b914      	cbnz	r4, 8001e5a <_fwalk_reent+0x16>
 8001e54:	4630      	mov	r0, r6
 8001e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e5a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001e5e:	3f01      	subs	r7, #1
 8001e60:	d501      	bpl.n	8001e66 <_fwalk_reent+0x22>
 8001e62:	6824      	ldr	r4, [r4, #0]
 8001e64:	e7f5      	b.n	8001e52 <_fwalk_reent+0xe>
 8001e66:	89ab      	ldrh	r3, [r5, #12]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d907      	bls.n	8001e7c <_fwalk_reent+0x38>
 8001e6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e70:	3301      	adds	r3, #1
 8001e72:	d003      	beq.n	8001e7c <_fwalk_reent+0x38>
 8001e74:	4629      	mov	r1, r5
 8001e76:	4640      	mov	r0, r8
 8001e78:	47c8      	blx	r9
 8001e7a:	4306      	orrs	r6, r0
 8001e7c:	3568      	adds	r5, #104	; 0x68
 8001e7e:	e7ee      	b.n	8001e5e <_fwalk_reent+0x1a>

08001e80 <getchar>:
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <getchar+0x20>)
 8001e82:	b510      	push	{r4, lr}
 8001e84:	681c      	ldr	r4, [r3, #0]
 8001e86:	b124      	cbz	r4, 8001e92 <getchar+0x12>
 8001e88:	69a3      	ldr	r3, [r4, #24]
 8001e8a:	b913      	cbnz	r3, 8001e92 <getchar+0x12>
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f7ff ff51 	bl	8001d34 <__sinit>
 8001e92:	6861      	ldr	r1, [r4, #4]
 8001e94:	4620      	mov	r0, r4
 8001e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e9a:	f000 ba25 	b.w	80022e8 <_getc_r>
 8001e9e:	bf00      	nop
 8001ea0:	2000000c 	.word	0x2000000c

08001ea4 <__libc_init_array>:
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	4e0d      	ldr	r6, [pc, #52]	; (8001edc <__libc_init_array+0x38>)
 8001ea8:	4c0d      	ldr	r4, [pc, #52]	; (8001ee0 <__libc_init_array+0x3c>)
 8001eaa:	1ba4      	subs	r4, r4, r6
 8001eac:	10a4      	asrs	r4, r4, #2
 8001eae:	2500      	movs	r5, #0
 8001eb0:	42a5      	cmp	r5, r4
 8001eb2:	d109      	bne.n	8001ec8 <__libc_init_array+0x24>
 8001eb4:	4e0b      	ldr	r6, [pc, #44]	; (8001ee4 <__libc_init_array+0x40>)
 8001eb6:	4c0c      	ldr	r4, [pc, #48]	; (8001ee8 <__libc_init_array+0x44>)
 8001eb8:	f000 fea6 	bl	8002c08 <_init>
 8001ebc:	1ba4      	subs	r4, r4, r6
 8001ebe:	10a4      	asrs	r4, r4, #2
 8001ec0:	2500      	movs	r5, #0
 8001ec2:	42a5      	cmp	r5, r4
 8001ec4:	d105      	bne.n	8001ed2 <__libc_init_array+0x2e>
 8001ec6:	bd70      	pop	{r4, r5, r6, pc}
 8001ec8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ecc:	4798      	blx	r3
 8001ece:	3501      	adds	r5, #1
 8001ed0:	e7ee      	b.n	8001eb0 <__libc_init_array+0xc>
 8001ed2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ed6:	4798      	blx	r3
 8001ed8:	3501      	adds	r5, #1
 8001eda:	e7f2      	b.n	8001ec2 <__libc_init_array+0x1e>
 8001edc:	08002e70 	.word	0x08002e70
 8001ee0:	08002e70 	.word	0x08002e70
 8001ee4:	08002e70 	.word	0x08002e70
 8001ee8:	08002e74 	.word	0x08002e74

08001eec <memset>:
 8001eec:	4402      	add	r2, r0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d100      	bne.n	8001ef6 <memset+0xa>
 8001ef4:	4770      	bx	lr
 8001ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8001efa:	e7f9      	b.n	8001ef0 <memset+0x4>

08001efc <_free_r>:
 8001efc:	b538      	push	{r3, r4, r5, lr}
 8001efe:	4605      	mov	r5, r0
 8001f00:	2900      	cmp	r1, #0
 8001f02:	d045      	beq.n	8001f90 <_free_r+0x94>
 8001f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f08:	1f0c      	subs	r4, r1, #4
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	bfb8      	it	lt
 8001f0e:	18e4      	addlt	r4, r4, r3
 8001f10:	f000 fa8c 	bl	800242c <__malloc_lock>
 8001f14:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <_free_r+0x98>)
 8001f16:	6813      	ldr	r3, [r2, #0]
 8001f18:	4610      	mov	r0, r2
 8001f1a:	b933      	cbnz	r3, 8001f2a <_free_r+0x2e>
 8001f1c:	6063      	str	r3, [r4, #4]
 8001f1e:	6014      	str	r4, [r2, #0]
 8001f20:	4628      	mov	r0, r5
 8001f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f26:	f000 ba82 	b.w	800242e <__malloc_unlock>
 8001f2a:	42a3      	cmp	r3, r4
 8001f2c:	d90c      	bls.n	8001f48 <_free_r+0x4c>
 8001f2e:	6821      	ldr	r1, [r4, #0]
 8001f30:	1862      	adds	r2, r4, r1
 8001f32:	4293      	cmp	r3, r2
 8001f34:	bf04      	itt	eq
 8001f36:	681a      	ldreq	r2, [r3, #0]
 8001f38:	685b      	ldreq	r3, [r3, #4]
 8001f3a:	6063      	str	r3, [r4, #4]
 8001f3c:	bf04      	itt	eq
 8001f3e:	1852      	addeq	r2, r2, r1
 8001f40:	6022      	streq	r2, [r4, #0]
 8001f42:	6004      	str	r4, [r0, #0]
 8001f44:	e7ec      	b.n	8001f20 <_free_r+0x24>
 8001f46:	4613      	mov	r3, r2
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	b10a      	cbz	r2, 8001f50 <_free_r+0x54>
 8001f4c:	42a2      	cmp	r2, r4
 8001f4e:	d9fa      	bls.n	8001f46 <_free_r+0x4a>
 8001f50:	6819      	ldr	r1, [r3, #0]
 8001f52:	1858      	adds	r0, r3, r1
 8001f54:	42a0      	cmp	r0, r4
 8001f56:	d10b      	bne.n	8001f70 <_free_r+0x74>
 8001f58:	6820      	ldr	r0, [r4, #0]
 8001f5a:	4401      	add	r1, r0
 8001f5c:	1858      	adds	r0, r3, r1
 8001f5e:	4282      	cmp	r2, r0
 8001f60:	6019      	str	r1, [r3, #0]
 8001f62:	d1dd      	bne.n	8001f20 <_free_r+0x24>
 8001f64:	6810      	ldr	r0, [r2, #0]
 8001f66:	6852      	ldr	r2, [r2, #4]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	4401      	add	r1, r0
 8001f6c:	6019      	str	r1, [r3, #0]
 8001f6e:	e7d7      	b.n	8001f20 <_free_r+0x24>
 8001f70:	d902      	bls.n	8001f78 <_free_r+0x7c>
 8001f72:	230c      	movs	r3, #12
 8001f74:	602b      	str	r3, [r5, #0]
 8001f76:	e7d3      	b.n	8001f20 <_free_r+0x24>
 8001f78:	6820      	ldr	r0, [r4, #0]
 8001f7a:	1821      	adds	r1, r4, r0
 8001f7c:	428a      	cmp	r2, r1
 8001f7e:	bf04      	itt	eq
 8001f80:	6811      	ldreq	r1, [r2, #0]
 8001f82:	6852      	ldreq	r2, [r2, #4]
 8001f84:	6062      	str	r2, [r4, #4]
 8001f86:	bf04      	itt	eq
 8001f88:	1809      	addeq	r1, r1, r0
 8001f8a:	6021      	streq	r1, [r4, #0]
 8001f8c:	605c      	str	r4, [r3, #4]
 8001f8e:	e7c7      	b.n	8001f20 <_free_r+0x24>
 8001f90:	bd38      	pop	{r3, r4, r5, pc}
 8001f92:	bf00      	nop
 8001f94:	2000008c 	.word	0x2000008c

08001f98 <_malloc_r>:
 8001f98:	b570      	push	{r4, r5, r6, lr}
 8001f9a:	1ccd      	adds	r5, r1, #3
 8001f9c:	f025 0503 	bic.w	r5, r5, #3
 8001fa0:	3508      	adds	r5, #8
 8001fa2:	2d0c      	cmp	r5, #12
 8001fa4:	bf38      	it	cc
 8001fa6:	250c      	movcc	r5, #12
 8001fa8:	2d00      	cmp	r5, #0
 8001faa:	4606      	mov	r6, r0
 8001fac:	db01      	blt.n	8001fb2 <_malloc_r+0x1a>
 8001fae:	42a9      	cmp	r1, r5
 8001fb0:	d903      	bls.n	8001fba <_malloc_r+0x22>
 8001fb2:	230c      	movs	r3, #12
 8001fb4:	6033      	str	r3, [r6, #0]
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	bd70      	pop	{r4, r5, r6, pc}
 8001fba:	f000 fa37 	bl	800242c <__malloc_lock>
 8001fbe:	4a21      	ldr	r2, [pc, #132]	; (8002044 <_malloc_r+0xac>)
 8001fc0:	6814      	ldr	r4, [r2, #0]
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	b991      	cbnz	r1, 8001fec <_malloc_r+0x54>
 8001fc6:	4c20      	ldr	r4, [pc, #128]	; (8002048 <_malloc_r+0xb0>)
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	b91b      	cbnz	r3, 8001fd4 <_malloc_r+0x3c>
 8001fcc:	4630      	mov	r0, r6
 8001fce:	f000 f855 	bl	800207c <_sbrk_r>
 8001fd2:	6020      	str	r0, [r4, #0]
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	4630      	mov	r0, r6
 8001fd8:	f000 f850 	bl	800207c <_sbrk_r>
 8001fdc:	1c43      	adds	r3, r0, #1
 8001fde:	d124      	bne.n	800202a <_malloc_r+0x92>
 8001fe0:	230c      	movs	r3, #12
 8001fe2:	6033      	str	r3, [r6, #0]
 8001fe4:	4630      	mov	r0, r6
 8001fe6:	f000 fa22 	bl	800242e <__malloc_unlock>
 8001fea:	e7e4      	b.n	8001fb6 <_malloc_r+0x1e>
 8001fec:	680b      	ldr	r3, [r1, #0]
 8001fee:	1b5b      	subs	r3, r3, r5
 8001ff0:	d418      	bmi.n	8002024 <_malloc_r+0x8c>
 8001ff2:	2b0b      	cmp	r3, #11
 8001ff4:	d90f      	bls.n	8002016 <_malloc_r+0x7e>
 8001ff6:	600b      	str	r3, [r1, #0]
 8001ff8:	50cd      	str	r5, [r1, r3]
 8001ffa:	18cc      	adds	r4, r1, r3
 8001ffc:	4630      	mov	r0, r6
 8001ffe:	f000 fa16 	bl	800242e <__malloc_unlock>
 8002002:	f104 000b 	add.w	r0, r4, #11
 8002006:	1d23      	adds	r3, r4, #4
 8002008:	f020 0007 	bic.w	r0, r0, #7
 800200c:	1ac3      	subs	r3, r0, r3
 800200e:	d0d3      	beq.n	8001fb8 <_malloc_r+0x20>
 8002010:	425a      	negs	r2, r3
 8002012:	50e2      	str	r2, [r4, r3]
 8002014:	e7d0      	b.n	8001fb8 <_malloc_r+0x20>
 8002016:	428c      	cmp	r4, r1
 8002018:	684b      	ldr	r3, [r1, #4]
 800201a:	bf16      	itet	ne
 800201c:	6063      	strne	r3, [r4, #4]
 800201e:	6013      	streq	r3, [r2, #0]
 8002020:	460c      	movne	r4, r1
 8002022:	e7eb      	b.n	8001ffc <_malloc_r+0x64>
 8002024:	460c      	mov	r4, r1
 8002026:	6849      	ldr	r1, [r1, #4]
 8002028:	e7cc      	b.n	8001fc4 <_malloc_r+0x2c>
 800202a:	1cc4      	adds	r4, r0, #3
 800202c:	f024 0403 	bic.w	r4, r4, #3
 8002030:	42a0      	cmp	r0, r4
 8002032:	d005      	beq.n	8002040 <_malloc_r+0xa8>
 8002034:	1a21      	subs	r1, r4, r0
 8002036:	4630      	mov	r0, r6
 8002038:	f000 f820 	bl	800207c <_sbrk_r>
 800203c:	3001      	adds	r0, #1
 800203e:	d0cf      	beq.n	8001fe0 <_malloc_r+0x48>
 8002040:	6025      	str	r5, [r4, #0]
 8002042:	e7db      	b.n	8001ffc <_malloc_r+0x64>
 8002044:	2000008c 	.word	0x2000008c
 8002048:	20000090 	.word	0x20000090

0800204c <iprintf>:
 800204c:	b40f      	push	{r0, r1, r2, r3}
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <iprintf+0x2c>)
 8002050:	b513      	push	{r0, r1, r4, lr}
 8002052:	681c      	ldr	r4, [r3, #0]
 8002054:	b124      	cbz	r4, 8002060 <iprintf+0x14>
 8002056:	69a3      	ldr	r3, [r4, #24]
 8002058:	b913      	cbnz	r3, 8002060 <iprintf+0x14>
 800205a:	4620      	mov	r0, r4
 800205c:	f7ff fe6a 	bl	8001d34 <__sinit>
 8002060:	ab05      	add	r3, sp, #20
 8002062:	9a04      	ldr	r2, [sp, #16]
 8002064:	68a1      	ldr	r1, [r4, #8]
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	4620      	mov	r0, r4
 800206a:	f000 fa0b 	bl	8002484 <_vfiprintf_r>
 800206e:	b002      	add	sp, #8
 8002070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002074:	b004      	add	sp, #16
 8002076:	4770      	bx	lr
 8002078:	2000000c 	.word	0x2000000c

0800207c <_sbrk_r>:
 800207c:	b538      	push	{r3, r4, r5, lr}
 800207e:	4c06      	ldr	r4, [pc, #24]	; (8002098 <_sbrk_r+0x1c>)
 8002080:	2300      	movs	r3, #0
 8002082:	4605      	mov	r5, r0
 8002084:	4608      	mov	r0, r1
 8002086:	6023      	str	r3, [r4, #0]
 8002088:	f000 fdb0 	bl	8002bec <_sbrk>
 800208c:	1c43      	adds	r3, r0, #1
 800208e:	d102      	bne.n	8002096 <_sbrk_r+0x1a>
 8002090:	6823      	ldr	r3, [r4, #0]
 8002092:	b103      	cbz	r3, 8002096 <_sbrk_r+0x1a>
 8002094:	602b      	str	r3, [r5, #0]
 8002096:	bd38      	pop	{r3, r4, r5, pc}
 8002098:	2000019c 	.word	0x2000019c

0800209c <__sread>:
 800209c:	b510      	push	{r4, lr}
 800209e:	460c      	mov	r4, r1
 80020a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020a4:	f000 fc8c 	bl	80029c0 <_read_r>
 80020a8:	2800      	cmp	r0, #0
 80020aa:	bfab      	itete	ge
 80020ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80020ae:	89a3      	ldrhlt	r3, [r4, #12]
 80020b0:	181b      	addge	r3, r3, r0
 80020b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80020b6:	bfac      	ite	ge
 80020b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80020ba:	81a3      	strhlt	r3, [r4, #12]
 80020bc:	bd10      	pop	{r4, pc}

080020be <__swrite>:
 80020be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020c2:	461f      	mov	r7, r3
 80020c4:	898b      	ldrh	r3, [r1, #12]
 80020c6:	05db      	lsls	r3, r3, #23
 80020c8:	4605      	mov	r5, r0
 80020ca:	460c      	mov	r4, r1
 80020cc:	4616      	mov	r6, r2
 80020ce:	d505      	bpl.n	80020dc <__swrite+0x1e>
 80020d0:	2302      	movs	r3, #2
 80020d2:	2200      	movs	r2, #0
 80020d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020d8:	f000 f932 	bl	8002340 <_lseek_r>
 80020dc:	89a3      	ldrh	r3, [r4, #12]
 80020de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020e6:	81a3      	strh	r3, [r4, #12]
 80020e8:	4632      	mov	r2, r6
 80020ea:	463b      	mov	r3, r7
 80020ec:	4628      	mov	r0, r5
 80020ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020f2:	f000 b869 	b.w	80021c8 <_write_r>

080020f6 <__sseek>:
 80020f6:	b510      	push	{r4, lr}
 80020f8:	460c      	mov	r4, r1
 80020fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020fe:	f000 f91f 	bl	8002340 <_lseek_r>
 8002102:	1c43      	adds	r3, r0, #1
 8002104:	89a3      	ldrh	r3, [r4, #12]
 8002106:	bf15      	itete	ne
 8002108:	6560      	strne	r0, [r4, #84]	; 0x54
 800210a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800210e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002112:	81a3      	strheq	r3, [r4, #12]
 8002114:	bf18      	it	ne
 8002116:	81a3      	strhne	r3, [r4, #12]
 8002118:	bd10      	pop	{r4, pc}

0800211a <__sclose>:
 800211a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800211e:	f000 b8d3 	b.w	80022c8 <_close_r>
	...

08002124 <__swbuf_r>:
 8002124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002126:	460e      	mov	r6, r1
 8002128:	4614      	mov	r4, r2
 800212a:	4605      	mov	r5, r0
 800212c:	b118      	cbz	r0, 8002136 <__swbuf_r+0x12>
 800212e:	6983      	ldr	r3, [r0, #24]
 8002130:	b90b      	cbnz	r3, 8002136 <__swbuf_r+0x12>
 8002132:	f7ff fdff 	bl	8001d34 <__sinit>
 8002136:	4b21      	ldr	r3, [pc, #132]	; (80021bc <__swbuf_r+0x98>)
 8002138:	429c      	cmp	r4, r3
 800213a:	d12a      	bne.n	8002192 <__swbuf_r+0x6e>
 800213c:	686c      	ldr	r4, [r5, #4]
 800213e:	69a3      	ldr	r3, [r4, #24]
 8002140:	60a3      	str	r3, [r4, #8]
 8002142:	89a3      	ldrh	r3, [r4, #12]
 8002144:	071a      	lsls	r2, r3, #28
 8002146:	d52e      	bpl.n	80021a6 <__swbuf_r+0x82>
 8002148:	6923      	ldr	r3, [r4, #16]
 800214a:	b363      	cbz	r3, 80021a6 <__swbuf_r+0x82>
 800214c:	6923      	ldr	r3, [r4, #16]
 800214e:	6820      	ldr	r0, [r4, #0]
 8002150:	1ac0      	subs	r0, r0, r3
 8002152:	6963      	ldr	r3, [r4, #20]
 8002154:	b2f6      	uxtb	r6, r6
 8002156:	4283      	cmp	r3, r0
 8002158:	4637      	mov	r7, r6
 800215a:	dc04      	bgt.n	8002166 <__swbuf_r+0x42>
 800215c:	4621      	mov	r1, r4
 800215e:	4628      	mov	r0, r5
 8002160:	f7ff fd6c 	bl	8001c3c <_fflush_r>
 8002164:	bb28      	cbnz	r0, 80021b2 <__swbuf_r+0x8e>
 8002166:	68a3      	ldr	r3, [r4, #8]
 8002168:	3b01      	subs	r3, #1
 800216a:	60a3      	str	r3, [r4, #8]
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	6022      	str	r2, [r4, #0]
 8002172:	701e      	strb	r6, [r3, #0]
 8002174:	6963      	ldr	r3, [r4, #20]
 8002176:	3001      	adds	r0, #1
 8002178:	4283      	cmp	r3, r0
 800217a:	d004      	beq.n	8002186 <__swbuf_r+0x62>
 800217c:	89a3      	ldrh	r3, [r4, #12]
 800217e:	07db      	lsls	r3, r3, #31
 8002180:	d519      	bpl.n	80021b6 <__swbuf_r+0x92>
 8002182:	2e0a      	cmp	r6, #10
 8002184:	d117      	bne.n	80021b6 <__swbuf_r+0x92>
 8002186:	4621      	mov	r1, r4
 8002188:	4628      	mov	r0, r5
 800218a:	f7ff fd57 	bl	8001c3c <_fflush_r>
 800218e:	b190      	cbz	r0, 80021b6 <__swbuf_r+0x92>
 8002190:	e00f      	b.n	80021b2 <__swbuf_r+0x8e>
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <__swbuf_r+0x9c>)
 8002194:	429c      	cmp	r4, r3
 8002196:	d101      	bne.n	800219c <__swbuf_r+0x78>
 8002198:	68ac      	ldr	r4, [r5, #8]
 800219a:	e7d0      	b.n	800213e <__swbuf_r+0x1a>
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <__swbuf_r+0xa0>)
 800219e:	429c      	cmp	r4, r3
 80021a0:	bf08      	it	eq
 80021a2:	68ec      	ldreq	r4, [r5, #12]
 80021a4:	e7cb      	b.n	800213e <__swbuf_r+0x1a>
 80021a6:	4621      	mov	r1, r4
 80021a8:	4628      	mov	r0, r5
 80021aa:	f000 f81f 	bl	80021ec <__swsetup_r>
 80021ae:	2800      	cmp	r0, #0
 80021b0:	d0cc      	beq.n	800214c <__swbuf_r+0x28>
 80021b2:	f04f 37ff 	mov.w	r7, #4294967295
 80021b6:	4638      	mov	r0, r7
 80021b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021ba:	bf00      	nop
 80021bc:	08002df0 	.word	0x08002df0
 80021c0:	08002e10 	.word	0x08002e10
 80021c4:	08002dd0 	.word	0x08002dd0

080021c8 <_write_r>:
 80021c8:	b538      	push	{r3, r4, r5, lr}
 80021ca:	4c07      	ldr	r4, [pc, #28]	; (80021e8 <_write_r+0x20>)
 80021cc:	4605      	mov	r5, r0
 80021ce:	4608      	mov	r0, r1
 80021d0:	4611      	mov	r1, r2
 80021d2:	2200      	movs	r2, #0
 80021d4:	6022      	str	r2, [r4, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	f7fe fb4e 	bl	8000878 <_write>
 80021dc:	1c43      	adds	r3, r0, #1
 80021de:	d102      	bne.n	80021e6 <_write_r+0x1e>
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	b103      	cbz	r3, 80021e6 <_write_r+0x1e>
 80021e4:	602b      	str	r3, [r5, #0]
 80021e6:	bd38      	pop	{r3, r4, r5, pc}
 80021e8:	2000019c 	.word	0x2000019c

080021ec <__swsetup_r>:
 80021ec:	4b32      	ldr	r3, [pc, #200]	; (80022b8 <__swsetup_r+0xcc>)
 80021ee:	b570      	push	{r4, r5, r6, lr}
 80021f0:	681d      	ldr	r5, [r3, #0]
 80021f2:	4606      	mov	r6, r0
 80021f4:	460c      	mov	r4, r1
 80021f6:	b125      	cbz	r5, 8002202 <__swsetup_r+0x16>
 80021f8:	69ab      	ldr	r3, [r5, #24]
 80021fa:	b913      	cbnz	r3, 8002202 <__swsetup_r+0x16>
 80021fc:	4628      	mov	r0, r5
 80021fe:	f7ff fd99 	bl	8001d34 <__sinit>
 8002202:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <__swsetup_r+0xd0>)
 8002204:	429c      	cmp	r4, r3
 8002206:	d10f      	bne.n	8002228 <__swsetup_r+0x3c>
 8002208:	686c      	ldr	r4, [r5, #4]
 800220a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800220e:	b29a      	uxth	r2, r3
 8002210:	0715      	lsls	r5, r2, #28
 8002212:	d42c      	bmi.n	800226e <__swsetup_r+0x82>
 8002214:	06d0      	lsls	r0, r2, #27
 8002216:	d411      	bmi.n	800223c <__swsetup_r+0x50>
 8002218:	2209      	movs	r2, #9
 800221a:	6032      	str	r2, [r6, #0]
 800221c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002220:	81a3      	strh	r3, [r4, #12]
 8002222:	f04f 30ff 	mov.w	r0, #4294967295
 8002226:	e03e      	b.n	80022a6 <__swsetup_r+0xba>
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <__swsetup_r+0xd4>)
 800222a:	429c      	cmp	r4, r3
 800222c:	d101      	bne.n	8002232 <__swsetup_r+0x46>
 800222e:	68ac      	ldr	r4, [r5, #8]
 8002230:	e7eb      	b.n	800220a <__swsetup_r+0x1e>
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <__swsetup_r+0xd8>)
 8002234:	429c      	cmp	r4, r3
 8002236:	bf08      	it	eq
 8002238:	68ec      	ldreq	r4, [r5, #12]
 800223a:	e7e6      	b.n	800220a <__swsetup_r+0x1e>
 800223c:	0751      	lsls	r1, r2, #29
 800223e:	d512      	bpl.n	8002266 <__swsetup_r+0x7a>
 8002240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002242:	b141      	cbz	r1, 8002256 <__swsetup_r+0x6a>
 8002244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002248:	4299      	cmp	r1, r3
 800224a:	d002      	beq.n	8002252 <__swsetup_r+0x66>
 800224c:	4630      	mov	r0, r6
 800224e:	f7ff fe55 	bl	8001efc <_free_r>
 8002252:	2300      	movs	r3, #0
 8002254:	6363      	str	r3, [r4, #52]	; 0x34
 8002256:	89a3      	ldrh	r3, [r4, #12]
 8002258:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800225c:	81a3      	strh	r3, [r4, #12]
 800225e:	2300      	movs	r3, #0
 8002260:	6063      	str	r3, [r4, #4]
 8002262:	6923      	ldr	r3, [r4, #16]
 8002264:	6023      	str	r3, [r4, #0]
 8002266:	89a3      	ldrh	r3, [r4, #12]
 8002268:	f043 0308 	orr.w	r3, r3, #8
 800226c:	81a3      	strh	r3, [r4, #12]
 800226e:	6923      	ldr	r3, [r4, #16]
 8002270:	b94b      	cbnz	r3, 8002286 <__swsetup_r+0x9a>
 8002272:	89a3      	ldrh	r3, [r4, #12]
 8002274:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800227c:	d003      	beq.n	8002286 <__swsetup_r+0x9a>
 800227e:	4621      	mov	r1, r4
 8002280:	4630      	mov	r0, r6
 8002282:	f000 f893 	bl	80023ac <__smakebuf_r>
 8002286:	89a2      	ldrh	r2, [r4, #12]
 8002288:	f012 0301 	ands.w	r3, r2, #1
 800228c:	d00c      	beq.n	80022a8 <__swsetup_r+0xbc>
 800228e:	2300      	movs	r3, #0
 8002290:	60a3      	str	r3, [r4, #8]
 8002292:	6963      	ldr	r3, [r4, #20]
 8002294:	425b      	negs	r3, r3
 8002296:	61a3      	str	r3, [r4, #24]
 8002298:	6923      	ldr	r3, [r4, #16]
 800229a:	b953      	cbnz	r3, 80022b2 <__swsetup_r+0xc6>
 800229c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80022a4:	d1ba      	bne.n	800221c <__swsetup_r+0x30>
 80022a6:	bd70      	pop	{r4, r5, r6, pc}
 80022a8:	0792      	lsls	r2, r2, #30
 80022aa:	bf58      	it	pl
 80022ac:	6963      	ldrpl	r3, [r4, #20]
 80022ae:	60a3      	str	r3, [r4, #8]
 80022b0:	e7f2      	b.n	8002298 <__swsetup_r+0xac>
 80022b2:	2000      	movs	r0, #0
 80022b4:	e7f7      	b.n	80022a6 <__swsetup_r+0xba>
 80022b6:	bf00      	nop
 80022b8:	2000000c 	.word	0x2000000c
 80022bc:	08002df0 	.word	0x08002df0
 80022c0:	08002e10 	.word	0x08002e10
 80022c4:	08002dd0 	.word	0x08002dd0

080022c8 <_close_r>:
 80022c8:	b538      	push	{r3, r4, r5, lr}
 80022ca:	4c06      	ldr	r4, [pc, #24]	; (80022e4 <_close_r+0x1c>)
 80022cc:	2300      	movs	r3, #0
 80022ce:	4605      	mov	r5, r0
 80022d0:	4608      	mov	r0, r1
 80022d2:	6023      	str	r3, [r4, #0]
 80022d4:	f000 fc6a 	bl	8002bac <_close>
 80022d8:	1c43      	adds	r3, r0, #1
 80022da:	d102      	bne.n	80022e2 <_close_r+0x1a>
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	b103      	cbz	r3, 80022e2 <_close_r+0x1a>
 80022e0:	602b      	str	r3, [r5, #0]
 80022e2:	bd38      	pop	{r3, r4, r5, pc}
 80022e4:	2000019c 	.word	0x2000019c

080022e8 <_getc_r>:
 80022e8:	b538      	push	{r3, r4, r5, lr}
 80022ea:	460c      	mov	r4, r1
 80022ec:	4605      	mov	r5, r0
 80022ee:	b118      	cbz	r0, 80022f8 <_getc_r+0x10>
 80022f0:	6983      	ldr	r3, [r0, #24]
 80022f2:	b90b      	cbnz	r3, 80022f8 <_getc_r+0x10>
 80022f4:	f7ff fd1e 	bl	8001d34 <__sinit>
 80022f8:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <_getc_r+0x4c>)
 80022fa:	429c      	cmp	r4, r3
 80022fc:	d10b      	bne.n	8002316 <_getc_r+0x2e>
 80022fe:	686c      	ldr	r4, [r5, #4]
 8002300:	6863      	ldr	r3, [r4, #4]
 8002302:	3b01      	subs	r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	6063      	str	r3, [r4, #4]
 8002308:	da0f      	bge.n	800232a <_getc_r+0x42>
 800230a:	4621      	mov	r1, r4
 800230c:	4628      	mov	r0, r5
 800230e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002312:	f000 bb67 	b.w	80029e4 <__srget_r>
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <_getc_r+0x50>)
 8002318:	429c      	cmp	r4, r3
 800231a:	d101      	bne.n	8002320 <_getc_r+0x38>
 800231c:	68ac      	ldr	r4, [r5, #8]
 800231e:	e7ef      	b.n	8002300 <_getc_r+0x18>
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <_getc_r+0x54>)
 8002322:	429c      	cmp	r4, r3
 8002324:	bf08      	it	eq
 8002326:	68ec      	ldreq	r4, [r5, #12]
 8002328:	e7ea      	b.n	8002300 <_getc_r+0x18>
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	6022      	str	r2, [r4, #0]
 8002330:	7818      	ldrb	r0, [r3, #0]
 8002332:	bd38      	pop	{r3, r4, r5, pc}
 8002334:	08002df0 	.word	0x08002df0
 8002338:	08002e10 	.word	0x08002e10
 800233c:	08002dd0 	.word	0x08002dd0

08002340 <_lseek_r>:
 8002340:	b538      	push	{r3, r4, r5, lr}
 8002342:	4c07      	ldr	r4, [pc, #28]	; (8002360 <_lseek_r+0x20>)
 8002344:	4605      	mov	r5, r0
 8002346:	4608      	mov	r0, r1
 8002348:	4611      	mov	r1, r2
 800234a:	2200      	movs	r2, #0
 800234c:	6022      	str	r2, [r4, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	f000 fc44 	bl	8002bdc <_lseek>
 8002354:	1c43      	adds	r3, r0, #1
 8002356:	d102      	bne.n	800235e <_lseek_r+0x1e>
 8002358:	6823      	ldr	r3, [r4, #0]
 800235a:	b103      	cbz	r3, 800235e <_lseek_r+0x1e>
 800235c:	602b      	str	r3, [r5, #0]
 800235e:	bd38      	pop	{r3, r4, r5, pc}
 8002360:	2000019c 	.word	0x2000019c

08002364 <__swhatbuf_r>:
 8002364:	b570      	push	{r4, r5, r6, lr}
 8002366:	460e      	mov	r6, r1
 8002368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800236c:	2900      	cmp	r1, #0
 800236e:	b096      	sub	sp, #88	; 0x58
 8002370:	4614      	mov	r4, r2
 8002372:	461d      	mov	r5, r3
 8002374:	da07      	bge.n	8002386 <__swhatbuf_r+0x22>
 8002376:	2300      	movs	r3, #0
 8002378:	602b      	str	r3, [r5, #0]
 800237a:	89b3      	ldrh	r3, [r6, #12]
 800237c:	061a      	lsls	r2, r3, #24
 800237e:	d410      	bmi.n	80023a2 <__swhatbuf_r+0x3e>
 8002380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002384:	e00e      	b.n	80023a4 <__swhatbuf_r+0x40>
 8002386:	466a      	mov	r2, sp
 8002388:	f000 fb58 	bl	8002a3c <_fstat_r>
 800238c:	2800      	cmp	r0, #0
 800238e:	dbf2      	blt.n	8002376 <__swhatbuf_r+0x12>
 8002390:	9a01      	ldr	r2, [sp, #4]
 8002392:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002396:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800239a:	425a      	negs	r2, r3
 800239c:	415a      	adcs	r2, r3
 800239e:	602a      	str	r2, [r5, #0]
 80023a0:	e7ee      	b.n	8002380 <__swhatbuf_r+0x1c>
 80023a2:	2340      	movs	r3, #64	; 0x40
 80023a4:	2000      	movs	r0, #0
 80023a6:	6023      	str	r3, [r4, #0]
 80023a8:	b016      	add	sp, #88	; 0x58
 80023aa:	bd70      	pop	{r4, r5, r6, pc}

080023ac <__smakebuf_r>:
 80023ac:	898b      	ldrh	r3, [r1, #12]
 80023ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80023b0:	079d      	lsls	r5, r3, #30
 80023b2:	4606      	mov	r6, r0
 80023b4:	460c      	mov	r4, r1
 80023b6:	d507      	bpl.n	80023c8 <__smakebuf_r+0x1c>
 80023b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80023bc:	6023      	str	r3, [r4, #0]
 80023be:	6123      	str	r3, [r4, #16]
 80023c0:	2301      	movs	r3, #1
 80023c2:	6163      	str	r3, [r4, #20]
 80023c4:	b002      	add	sp, #8
 80023c6:	bd70      	pop	{r4, r5, r6, pc}
 80023c8:	ab01      	add	r3, sp, #4
 80023ca:	466a      	mov	r2, sp
 80023cc:	f7ff ffca 	bl	8002364 <__swhatbuf_r>
 80023d0:	9900      	ldr	r1, [sp, #0]
 80023d2:	4605      	mov	r5, r0
 80023d4:	4630      	mov	r0, r6
 80023d6:	f7ff fddf 	bl	8001f98 <_malloc_r>
 80023da:	b948      	cbnz	r0, 80023f0 <__smakebuf_r+0x44>
 80023dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023e0:	059a      	lsls	r2, r3, #22
 80023e2:	d4ef      	bmi.n	80023c4 <__smakebuf_r+0x18>
 80023e4:	f023 0303 	bic.w	r3, r3, #3
 80023e8:	f043 0302 	orr.w	r3, r3, #2
 80023ec:	81a3      	strh	r3, [r4, #12]
 80023ee:	e7e3      	b.n	80023b8 <__smakebuf_r+0xc>
 80023f0:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <__smakebuf_r+0x7c>)
 80023f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80023f4:	89a3      	ldrh	r3, [r4, #12]
 80023f6:	6020      	str	r0, [r4, #0]
 80023f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023fc:	81a3      	strh	r3, [r4, #12]
 80023fe:	9b00      	ldr	r3, [sp, #0]
 8002400:	6163      	str	r3, [r4, #20]
 8002402:	9b01      	ldr	r3, [sp, #4]
 8002404:	6120      	str	r0, [r4, #16]
 8002406:	b15b      	cbz	r3, 8002420 <__smakebuf_r+0x74>
 8002408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800240c:	4630      	mov	r0, r6
 800240e:	f000 fb27 	bl	8002a60 <_isatty_r>
 8002412:	b128      	cbz	r0, 8002420 <__smakebuf_r+0x74>
 8002414:	89a3      	ldrh	r3, [r4, #12]
 8002416:	f023 0303 	bic.w	r3, r3, #3
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	81a3      	strh	r3, [r4, #12]
 8002420:	89a3      	ldrh	r3, [r4, #12]
 8002422:	431d      	orrs	r5, r3
 8002424:	81a5      	strh	r5, [r4, #12]
 8002426:	e7cd      	b.n	80023c4 <__smakebuf_r+0x18>
 8002428:	08001cfd 	.word	0x08001cfd

0800242c <__malloc_lock>:
 800242c:	4770      	bx	lr

0800242e <__malloc_unlock>:
 800242e:	4770      	bx	lr

08002430 <__sfputc_r>:
 8002430:	6893      	ldr	r3, [r2, #8]
 8002432:	3b01      	subs	r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	b410      	push	{r4}
 8002438:	6093      	str	r3, [r2, #8]
 800243a:	da08      	bge.n	800244e <__sfputc_r+0x1e>
 800243c:	6994      	ldr	r4, [r2, #24]
 800243e:	42a3      	cmp	r3, r4
 8002440:	db01      	blt.n	8002446 <__sfputc_r+0x16>
 8002442:	290a      	cmp	r1, #10
 8002444:	d103      	bne.n	800244e <__sfputc_r+0x1e>
 8002446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800244a:	f7ff be6b 	b.w	8002124 <__swbuf_r>
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	1c58      	adds	r0, r3, #1
 8002452:	6010      	str	r0, [r2, #0]
 8002454:	7019      	strb	r1, [r3, #0]
 8002456:	4608      	mov	r0, r1
 8002458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800245c:	4770      	bx	lr

0800245e <__sfputs_r>:
 800245e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002460:	4606      	mov	r6, r0
 8002462:	460f      	mov	r7, r1
 8002464:	4614      	mov	r4, r2
 8002466:	18d5      	adds	r5, r2, r3
 8002468:	42ac      	cmp	r4, r5
 800246a:	d101      	bne.n	8002470 <__sfputs_r+0x12>
 800246c:	2000      	movs	r0, #0
 800246e:	e007      	b.n	8002480 <__sfputs_r+0x22>
 8002470:	463a      	mov	r2, r7
 8002472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002476:	4630      	mov	r0, r6
 8002478:	f7ff ffda 	bl	8002430 <__sfputc_r>
 800247c:	1c43      	adds	r3, r0, #1
 800247e:	d1f3      	bne.n	8002468 <__sfputs_r+0xa>
 8002480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002484 <_vfiprintf_r>:
 8002484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002488:	460c      	mov	r4, r1
 800248a:	b09d      	sub	sp, #116	; 0x74
 800248c:	4617      	mov	r7, r2
 800248e:	461d      	mov	r5, r3
 8002490:	4606      	mov	r6, r0
 8002492:	b118      	cbz	r0, 800249c <_vfiprintf_r+0x18>
 8002494:	6983      	ldr	r3, [r0, #24]
 8002496:	b90b      	cbnz	r3, 800249c <_vfiprintf_r+0x18>
 8002498:	f7ff fc4c 	bl	8001d34 <__sinit>
 800249c:	4b7c      	ldr	r3, [pc, #496]	; (8002690 <_vfiprintf_r+0x20c>)
 800249e:	429c      	cmp	r4, r3
 80024a0:	d158      	bne.n	8002554 <_vfiprintf_r+0xd0>
 80024a2:	6874      	ldr	r4, [r6, #4]
 80024a4:	89a3      	ldrh	r3, [r4, #12]
 80024a6:	0718      	lsls	r0, r3, #28
 80024a8:	d55e      	bpl.n	8002568 <_vfiprintf_r+0xe4>
 80024aa:	6923      	ldr	r3, [r4, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d05b      	beq.n	8002568 <_vfiprintf_r+0xe4>
 80024b0:	2300      	movs	r3, #0
 80024b2:	9309      	str	r3, [sp, #36]	; 0x24
 80024b4:	2320      	movs	r3, #32
 80024b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80024ba:	2330      	movs	r3, #48	; 0x30
 80024bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80024c0:	9503      	str	r5, [sp, #12]
 80024c2:	f04f 0b01 	mov.w	fp, #1
 80024c6:	46b8      	mov	r8, r7
 80024c8:	4645      	mov	r5, r8
 80024ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80024ce:	b10b      	cbz	r3, 80024d4 <_vfiprintf_r+0x50>
 80024d0:	2b25      	cmp	r3, #37	; 0x25
 80024d2:	d154      	bne.n	800257e <_vfiprintf_r+0xfa>
 80024d4:	ebb8 0a07 	subs.w	sl, r8, r7
 80024d8:	d00b      	beq.n	80024f2 <_vfiprintf_r+0x6e>
 80024da:	4653      	mov	r3, sl
 80024dc:	463a      	mov	r2, r7
 80024de:	4621      	mov	r1, r4
 80024e0:	4630      	mov	r0, r6
 80024e2:	f7ff ffbc 	bl	800245e <__sfputs_r>
 80024e6:	3001      	adds	r0, #1
 80024e8:	f000 80c2 	beq.w	8002670 <_vfiprintf_r+0x1ec>
 80024ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024ee:	4453      	add	r3, sl
 80024f0:	9309      	str	r3, [sp, #36]	; 0x24
 80024f2:	f898 3000 	ldrb.w	r3, [r8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80ba 	beq.w	8002670 <_vfiprintf_r+0x1ec>
 80024fc:	2300      	movs	r3, #0
 80024fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002506:	9304      	str	r3, [sp, #16]
 8002508:	9307      	str	r3, [sp, #28]
 800250a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800250e:	931a      	str	r3, [sp, #104]	; 0x68
 8002510:	46a8      	mov	r8, r5
 8002512:	2205      	movs	r2, #5
 8002514:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002518:	485e      	ldr	r0, [pc, #376]	; (8002694 <_vfiprintf_r+0x210>)
 800251a:	f7fd fe91 	bl	8000240 <memchr>
 800251e:	9b04      	ldr	r3, [sp, #16]
 8002520:	bb78      	cbnz	r0, 8002582 <_vfiprintf_r+0xfe>
 8002522:	06d9      	lsls	r1, r3, #27
 8002524:	bf44      	itt	mi
 8002526:	2220      	movmi	r2, #32
 8002528:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800252c:	071a      	lsls	r2, r3, #28
 800252e:	bf44      	itt	mi
 8002530:	222b      	movmi	r2, #43	; 0x2b
 8002532:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002536:	782a      	ldrb	r2, [r5, #0]
 8002538:	2a2a      	cmp	r2, #42	; 0x2a
 800253a:	d02a      	beq.n	8002592 <_vfiprintf_r+0x10e>
 800253c:	9a07      	ldr	r2, [sp, #28]
 800253e:	46a8      	mov	r8, r5
 8002540:	2000      	movs	r0, #0
 8002542:	250a      	movs	r5, #10
 8002544:	4641      	mov	r1, r8
 8002546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800254a:	3b30      	subs	r3, #48	; 0x30
 800254c:	2b09      	cmp	r3, #9
 800254e:	d969      	bls.n	8002624 <_vfiprintf_r+0x1a0>
 8002550:	b360      	cbz	r0, 80025ac <_vfiprintf_r+0x128>
 8002552:	e024      	b.n	800259e <_vfiprintf_r+0x11a>
 8002554:	4b50      	ldr	r3, [pc, #320]	; (8002698 <_vfiprintf_r+0x214>)
 8002556:	429c      	cmp	r4, r3
 8002558:	d101      	bne.n	800255e <_vfiprintf_r+0xda>
 800255a:	68b4      	ldr	r4, [r6, #8]
 800255c:	e7a2      	b.n	80024a4 <_vfiprintf_r+0x20>
 800255e:	4b4f      	ldr	r3, [pc, #316]	; (800269c <_vfiprintf_r+0x218>)
 8002560:	429c      	cmp	r4, r3
 8002562:	bf08      	it	eq
 8002564:	68f4      	ldreq	r4, [r6, #12]
 8002566:	e79d      	b.n	80024a4 <_vfiprintf_r+0x20>
 8002568:	4621      	mov	r1, r4
 800256a:	4630      	mov	r0, r6
 800256c:	f7ff fe3e 	bl	80021ec <__swsetup_r>
 8002570:	2800      	cmp	r0, #0
 8002572:	d09d      	beq.n	80024b0 <_vfiprintf_r+0x2c>
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	b01d      	add	sp, #116	; 0x74
 800257a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800257e:	46a8      	mov	r8, r5
 8002580:	e7a2      	b.n	80024c8 <_vfiprintf_r+0x44>
 8002582:	4a44      	ldr	r2, [pc, #272]	; (8002694 <_vfiprintf_r+0x210>)
 8002584:	1a80      	subs	r0, r0, r2
 8002586:	fa0b f000 	lsl.w	r0, fp, r0
 800258a:	4318      	orrs	r0, r3
 800258c:	9004      	str	r0, [sp, #16]
 800258e:	4645      	mov	r5, r8
 8002590:	e7be      	b.n	8002510 <_vfiprintf_r+0x8c>
 8002592:	9a03      	ldr	r2, [sp, #12]
 8002594:	1d11      	adds	r1, r2, #4
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	9103      	str	r1, [sp, #12]
 800259a:	2a00      	cmp	r2, #0
 800259c:	db01      	blt.n	80025a2 <_vfiprintf_r+0x11e>
 800259e:	9207      	str	r2, [sp, #28]
 80025a0:	e004      	b.n	80025ac <_vfiprintf_r+0x128>
 80025a2:	4252      	negs	r2, r2
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	9207      	str	r2, [sp, #28]
 80025aa:	9304      	str	r3, [sp, #16]
 80025ac:	f898 3000 	ldrb.w	r3, [r8]
 80025b0:	2b2e      	cmp	r3, #46	; 0x2e
 80025b2:	d10e      	bne.n	80025d2 <_vfiprintf_r+0x14e>
 80025b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80025b8:	2b2a      	cmp	r3, #42	; 0x2a
 80025ba:	d138      	bne.n	800262e <_vfiprintf_r+0x1aa>
 80025bc:	9b03      	ldr	r3, [sp, #12]
 80025be:	1d1a      	adds	r2, r3, #4
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	9203      	str	r2, [sp, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	bfb8      	it	lt
 80025c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80025cc:	f108 0802 	add.w	r8, r8, #2
 80025d0:	9305      	str	r3, [sp, #20]
 80025d2:	4d33      	ldr	r5, [pc, #204]	; (80026a0 <_vfiprintf_r+0x21c>)
 80025d4:	f898 1000 	ldrb.w	r1, [r8]
 80025d8:	2203      	movs	r2, #3
 80025da:	4628      	mov	r0, r5
 80025dc:	f7fd fe30 	bl	8000240 <memchr>
 80025e0:	b140      	cbz	r0, 80025f4 <_vfiprintf_r+0x170>
 80025e2:	2340      	movs	r3, #64	; 0x40
 80025e4:	1b40      	subs	r0, r0, r5
 80025e6:	fa03 f000 	lsl.w	r0, r3, r0
 80025ea:	9b04      	ldr	r3, [sp, #16]
 80025ec:	4303      	orrs	r3, r0
 80025ee:	f108 0801 	add.w	r8, r8, #1
 80025f2:	9304      	str	r3, [sp, #16]
 80025f4:	f898 1000 	ldrb.w	r1, [r8]
 80025f8:	482a      	ldr	r0, [pc, #168]	; (80026a4 <_vfiprintf_r+0x220>)
 80025fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80025fe:	2206      	movs	r2, #6
 8002600:	f108 0701 	add.w	r7, r8, #1
 8002604:	f7fd fe1c 	bl	8000240 <memchr>
 8002608:	2800      	cmp	r0, #0
 800260a:	d037      	beq.n	800267c <_vfiprintf_r+0x1f8>
 800260c:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <_vfiprintf_r+0x224>)
 800260e:	bb1b      	cbnz	r3, 8002658 <_vfiprintf_r+0x1d4>
 8002610:	9b03      	ldr	r3, [sp, #12]
 8002612:	3307      	adds	r3, #7
 8002614:	f023 0307 	bic.w	r3, r3, #7
 8002618:	3308      	adds	r3, #8
 800261a:	9303      	str	r3, [sp, #12]
 800261c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800261e:	444b      	add	r3, r9
 8002620:	9309      	str	r3, [sp, #36]	; 0x24
 8002622:	e750      	b.n	80024c6 <_vfiprintf_r+0x42>
 8002624:	fb05 3202 	mla	r2, r5, r2, r3
 8002628:	2001      	movs	r0, #1
 800262a:	4688      	mov	r8, r1
 800262c:	e78a      	b.n	8002544 <_vfiprintf_r+0xc0>
 800262e:	2300      	movs	r3, #0
 8002630:	f108 0801 	add.w	r8, r8, #1
 8002634:	9305      	str	r3, [sp, #20]
 8002636:	4619      	mov	r1, r3
 8002638:	250a      	movs	r5, #10
 800263a:	4640      	mov	r0, r8
 800263c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002640:	3a30      	subs	r2, #48	; 0x30
 8002642:	2a09      	cmp	r2, #9
 8002644:	d903      	bls.n	800264e <_vfiprintf_r+0x1ca>
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0c3      	beq.n	80025d2 <_vfiprintf_r+0x14e>
 800264a:	9105      	str	r1, [sp, #20]
 800264c:	e7c1      	b.n	80025d2 <_vfiprintf_r+0x14e>
 800264e:	fb05 2101 	mla	r1, r5, r1, r2
 8002652:	2301      	movs	r3, #1
 8002654:	4680      	mov	r8, r0
 8002656:	e7f0      	b.n	800263a <_vfiprintf_r+0x1b6>
 8002658:	ab03      	add	r3, sp, #12
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	4622      	mov	r2, r4
 800265e:	4b13      	ldr	r3, [pc, #76]	; (80026ac <_vfiprintf_r+0x228>)
 8002660:	a904      	add	r1, sp, #16
 8002662:	4630      	mov	r0, r6
 8002664:	f3af 8000 	nop.w
 8002668:	f1b0 3fff 	cmp.w	r0, #4294967295
 800266c:	4681      	mov	r9, r0
 800266e:	d1d5      	bne.n	800261c <_vfiprintf_r+0x198>
 8002670:	89a3      	ldrh	r3, [r4, #12]
 8002672:	065b      	lsls	r3, r3, #25
 8002674:	f53f af7e 	bmi.w	8002574 <_vfiprintf_r+0xf0>
 8002678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800267a:	e77d      	b.n	8002578 <_vfiprintf_r+0xf4>
 800267c:	ab03      	add	r3, sp, #12
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	4622      	mov	r2, r4
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <_vfiprintf_r+0x228>)
 8002684:	a904      	add	r1, sp, #16
 8002686:	4630      	mov	r0, r6
 8002688:	f000 f888 	bl	800279c <_printf_i>
 800268c:	e7ec      	b.n	8002668 <_vfiprintf_r+0x1e4>
 800268e:	bf00      	nop
 8002690:	08002df0 	.word	0x08002df0
 8002694:	08002e34 	.word	0x08002e34
 8002698:	08002e10 	.word	0x08002e10
 800269c:	08002dd0 	.word	0x08002dd0
 80026a0:	08002e3a 	.word	0x08002e3a
 80026a4:	08002e3e 	.word	0x08002e3e
 80026a8:	00000000 	.word	0x00000000
 80026ac:	0800245f 	.word	0x0800245f

080026b0 <_printf_common>:
 80026b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026b4:	4691      	mov	r9, r2
 80026b6:	461f      	mov	r7, r3
 80026b8:	688a      	ldr	r2, [r1, #8]
 80026ba:	690b      	ldr	r3, [r1, #16]
 80026bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026c0:	4293      	cmp	r3, r2
 80026c2:	bfb8      	it	lt
 80026c4:	4613      	movlt	r3, r2
 80026c6:	f8c9 3000 	str.w	r3, [r9]
 80026ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026ce:	4606      	mov	r6, r0
 80026d0:	460c      	mov	r4, r1
 80026d2:	b112      	cbz	r2, 80026da <_printf_common+0x2a>
 80026d4:	3301      	adds	r3, #1
 80026d6:	f8c9 3000 	str.w	r3, [r9]
 80026da:	6823      	ldr	r3, [r4, #0]
 80026dc:	0699      	lsls	r1, r3, #26
 80026de:	bf42      	ittt	mi
 80026e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80026e4:	3302      	addmi	r3, #2
 80026e6:	f8c9 3000 	strmi.w	r3, [r9]
 80026ea:	6825      	ldr	r5, [r4, #0]
 80026ec:	f015 0506 	ands.w	r5, r5, #6
 80026f0:	d107      	bne.n	8002702 <_printf_common+0x52>
 80026f2:	f104 0a19 	add.w	sl, r4, #25
 80026f6:	68e3      	ldr	r3, [r4, #12]
 80026f8:	f8d9 2000 	ldr.w	r2, [r9]
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	42ab      	cmp	r3, r5
 8002700:	dc28      	bgt.n	8002754 <_printf_common+0xa4>
 8002702:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002706:	6822      	ldr	r2, [r4, #0]
 8002708:	3300      	adds	r3, #0
 800270a:	bf18      	it	ne
 800270c:	2301      	movne	r3, #1
 800270e:	0692      	lsls	r2, r2, #26
 8002710:	d42d      	bmi.n	800276e <_printf_common+0xbe>
 8002712:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002716:	4639      	mov	r1, r7
 8002718:	4630      	mov	r0, r6
 800271a:	47c0      	blx	r8
 800271c:	3001      	adds	r0, #1
 800271e:	d020      	beq.n	8002762 <_printf_common+0xb2>
 8002720:	6823      	ldr	r3, [r4, #0]
 8002722:	68e5      	ldr	r5, [r4, #12]
 8002724:	f8d9 2000 	ldr.w	r2, [r9]
 8002728:	f003 0306 	and.w	r3, r3, #6
 800272c:	2b04      	cmp	r3, #4
 800272e:	bf08      	it	eq
 8002730:	1aad      	subeq	r5, r5, r2
 8002732:	68a3      	ldr	r3, [r4, #8]
 8002734:	6922      	ldr	r2, [r4, #16]
 8002736:	bf0c      	ite	eq
 8002738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800273c:	2500      	movne	r5, #0
 800273e:	4293      	cmp	r3, r2
 8002740:	bfc4      	itt	gt
 8002742:	1a9b      	subgt	r3, r3, r2
 8002744:	18ed      	addgt	r5, r5, r3
 8002746:	f04f 0900 	mov.w	r9, #0
 800274a:	341a      	adds	r4, #26
 800274c:	454d      	cmp	r5, r9
 800274e:	d11a      	bne.n	8002786 <_printf_common+0xd6>
 8002750:	2000      	movs	r0, #0
 8002752:	e008      	b.n	8002766 <_printf_common+0xb6>
 8002754:	2301      	movs	r3, #1
 8002756:	4652      	mov	r2, sl
 8002758:	4639      	mov	r1, r7
 800275a:	4630      	mov	r0, r6
 800275c:	47c0      	blx	r8
 800275e:	3001      	adds	r0, #1
 8002760:	d103      	bne.n	800276a <_printf_common+0xba>
 8002762:	f04f 30ff 	mov.w	r0, #4294967295
 8002766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800276a:	3501      	adds	r5, #1
 800276c:	e7c3      	b.n	80026f6 <_printf_common+0x46>
 800276e:	18e1      	adds	r1, r4, r3
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	2030      	movs	r0, #48	; 0x30
 8002774:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002778:	4422      	add	r2, r4
 800277a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800277e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002782:	3302      	adds	r3, #2
 8002784:	e7c5      	b.n	8002712 <_printf_common+0x62>
 8002786:	2301      	movs	r3, #1
 8002788:	4622      	mov	r2, r4
 800278a:	4639      	mov	r1, r7
 800278c:	4630      	mov	r0, r6
 800278e:	47c0      	blx	r8
 8002790:	3001      	adds	r0, #1
 8002792:	d0e6      	beq.n	8002762 <_printf_common+0xb2>
 8002794:	f109 0901 	add.w	r9, r9, #1
 8002798:	e7d8      	b.n	800274c <_printf_common+0x9c>
	...

0800279c <_printf_i>:
 800279c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80027a4:	460c      	mov	r4, r1
 80027a6:	7e09      	ldrb	r1, [r1, #24]
 80027a8:	b085      	sub	sp, #20
 80027aa:	296e      	cmp	r1, #110	; 0x6e
 80027ac:	4617      	mov	r7, r2
 80027ae:	4606      	mov	r6, r0
 80027b0:	4698      	mov	r8, r3
 80027b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80027b4:	f000 80b3 	beq.w	800291e <_printf_i+0x182>
 80027b8:	d822      	bhi.n	8002800 <_printf_i+0x64>
 80027ba:	2963      	cmp	r1, #99	; 0x63
 80027bc:	d036      	beq.n	800282c <_printf_i+0x90>
 80027be:	d80a      	bhi.n	80027d6 <_printf_i+0x3a>
 80027c0:	2900      	cmp	r1, #0
 80027c2:	f000 80b9 	beq.w	8002938 <_printf_i+0x19c>
 80027c6:	2958      	cmp	r1, #88	; 0x58
 80027c8:	f000 8083 	beq.w	80028d2 <_printf_i+0x136>
 80027cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80027d4:	e032      	b.n	800283c <_printf_i+0xa0>
 80027d6:	2964      	cmp	r1, #100	; 0x64
 80027d8:	d001      	beq.n	80027de <_printf_i+0x42>
 80027da:	2969      	cmp	r1, #105	; 0x69
 80027dc:	d1f6      	bne.n	80027cc <_printf_i+0x30>
 80027de:	6820      	ldr	r0, [r4, #0]
 80027e0:	6813      	ldr	r3, [r2, #0]
 80027e2:	0605      	lsls	r5, r0, #24
 80027e4:	f103 0104 	add.w	r1, r3, #4
 80027e8:	d52a      	bpl.n	8002840 <_printf_i+0xa4>
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6011      	str	r1, [r2, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	da03      	bge.n	80027fa <_printf_i+0x5e>
 80027f2:	222d      	movs	r2, #45	; 0x2d
 80027f4:	425b      	negs	r3, r3
 80027f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80027fa:	486f      	ldr	r0, [pc, #444]	; (80029b8 <_printf_i+0x21c>)
 80027fc:	220a      	movs	r2, #10
 80027fe:	e039      	b.n	8002874 <_printf_i+0xd8>
 8002800:	2973      	cmp	r1, #115	; 0x73
 8002802:	f000 809d 	beq.w	8002940 <_printf_i+0x1a4>
 8002806:	d808      	bhi.n	800281a <_printf_i+0x7e>
 8002808:	296f      	cmp	r1, #111	; 0x6f
 800280a:	d020      	beq.n	800284e <_printf_i+0xb2>
 800280c:	2970      	cmp	r1, #112	; 0x70
 800280e:	d1dd      	bne.n	80027cc <_printf_i+0x30>
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	f043 0320 	orr.w	r3, r3, #32
 8002816:	6023      	str	r3, [r4, #0]
 8002818:	e003      	b.n	8002822 <_printf_i+0x86>
 800281a:	2975      	cmp	r1, #117	; 0x75
 800281c:	d017      	beq.n	800284e <_printf_i+0xb2>
 800281e:	2978      	cmp	r1, #120	; 0x78
 8002820:	d1d4      	bne.n	80027cc <_printf_i+0x30>
 8002822:	2378      	movs	r3, #120	; 0x78
 8002824:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002828:	4864      	ldr	r0, [pc, #400]	; (80029bc <_printf_i+0x220>)
 800282a:	e055      	b.n	80028d8 <_printf_i+0x13c>
 800282c:	6813      	ldr	r3, [r2, #0]
 800282e:	1d19      	adds	r1, r3, #4
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6011      	str	r1, [r2, #0]
 8002834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800283c:	2301      	movs	r3, #1
 800283e:	e08c      	b.n	800295a <_printf_i+0x1be>
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6011      	str	r1, [r2, #0]
 8002844:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002848:	bf18      	it	ne
 800284a:	b21b      	sxthne	r3, r3
 800284c:	e7cf      	b.n	80027ee <_printf_i+0x52>
 800284e:	6813      	ldr	r3, [r2, #0]
 8002850:	6825      	ldr	r5, [r4, #0]
 8002852:	1d18      	adds	r0, r3, #4
 8002854:	6010      	str	r0, [r2, #0]
 8002856:	0628      	lsls	r0, r5, #24
 8002858:	d501      	bpl.n	800285e <_printf_i+0xc2>
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	e002      	b.n	8002864 <_printf_i+0xc8>
 800285e:	0668      	lsls	r0, r5, #25
 8002860:	d5fb      	bpl.n	800285a <_printf_i+0xbe>
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	4854      	ldr	r0, [pc, #336]	; (80029b8 <_printf_i+0x21c>)
 8002866:	296f      	cmp	r1, #111	; 0x6f
 8002868:	bf14      	ite	ne
 800286a:	220a      	movne	r2, #10
 800286c:	2208      	moveq	r2, #8
 800286e:	2100      	movs	r1, #0
 8002870:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002874:	6865      	ldr	r5, [r4, #4]
 8002876:	60a5      	str	r5, [r4, #8]
 8002878:	2d00      	cmp	r5, #0
 800287a:	f2c0 8095 	blt.w	80029a8 <_printf_i+0x20c>
 800287e:	6821      	ldr	r1, [r4, #0]
 8002880:	f021 0104 	bic.w	r1, r1, #4
 8002884:	6021      	str	r1, [r4, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d13d      	bne.n	8002906 <_printf_i+0x16a>
 800288a:	2d00      	cmp	r5, #0
 800288c:	f040 808e 	bne.w	80029ac <_printf_i+0x210>
 8002890:	4665      	mov	r5, ip
 8002892:	2a08      	cmp	r2, #8
 8002894:	d10b      	bne.n	80028ae <_printf_i+0x112>
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	07db      	lsls	r3, r3, #31
 800289a:	d508      	bpl.n	80028ae <_printf_i+0x112>
 800289c:	6923      	ldr	r3, [r4, #16]
 800289e:	6862      	ldr	r2, [r4, #4]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	bfde      	ittt	le
 80028a4:	2330      	movle	r3, #48	; 0x30
 80028a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80028aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80028ae:	ebac 0305 	sub.w	r3, ip, r5
 80028b2:	6123      	str	r3, [r4, #16]
 80028b4:	f8cd 8000 	str.w	r8, [sp]
 80028b8:	463b      	mov	r3, r7
 80028ba:	aa03      	add	r2, sp, #12
 80028bc:	4621      	mov	r1, r4
 80028be:	4630      	mov	r0, r6
 80028c0:	f7ff fef6 	bl	80026b0 <_printf_common>
 80028c4:	3001      	adds	r0, #1
 80028c6:	d14d      	bne.n	8002964 <_printf_i+0x1c8>
 80028c8:	f04f 30ff 	mov.w	r0, #4294967295
 80028cc:	b005      	add	sp, #20
 80028ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028d2:	4839      	ldr	r0, [pc, #228]	; (80029b8 <_printf_i+0x21c>)
 80028d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80028d8:	6813      	ldr	r3, [r2, #0]
 80028da:	6821      	ldr	r1, [r4, #0]
 80028dc:	1d1d      	adds	r5, r3, #4
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6015      	str	r5, [r2, #0]
 80028e2:	060a      	lsls	r2, r1, #24
 80028e4:	d50b      	bpl.n	80028fe <_printf_i+0x162>
 80028e6:	07ca      	lsls	r2, r1, #31
 80028e8:	bf44      	itt	mi
 80028ea:	f041 0120 	orrmi.w	r1, r1, #32
 80028ee:	6021      	strmi	r1, [r4, #0]
 80028f0:	b91b      	cbnz	r3, 80028fa <_printf_i+0x15e>
 80028f2:	6822      	ldr	r2, [r4, #0]
 80028f4:	f022 0220 	bic.w	r2, r2, #32
 80028f8:	6022      	str	r2, [r4, #0]
 80028fa:	2210      	movs	r2, #16
 80028fc:	e7b7      	b.n	800286e <_printf_i+0xd2>
 80028fe:	064d      	lsls	r5, r1, #25
 8002900:	bf48      	it	mi
 8002902:	b29b      	uxthmi	r3, r3
 8002904:	e7ef      	b.n	80028e6 <_printf_i+0x14a>
 8002906:	4665      	mov	r5, ip
 8002908:	fbb3 f1f2 	udiv	r1, r3, r2
 800290c:	fb02 3311 	mls	r3, r2, r1, r3
 8002910:	5cc3      	ldrb	r3, [r0, r3]
 8002912:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002916:	460b      	mov	r3, r1
 8002918:	2900      	cmp	r1, #0
 800291a:	d1f5      	bne.n	8002908 <_printf_i+0x16c>
 800291c:	e7b9      	b.n	8002892 <_printf_i+0xf6>
 800291e:	6813      	ldr	r3, [r2, #0]
 8002920:	6825      	ldr	r5, [r4, #0]
 8002922:	6961      	ldr	r1, [r4, #20]
 8002924:	1d18      	adds	r0, r3, #4
 8002926:	6010      	str	r0, [r2, #0]
 8002928:	0628      	lsls	r0, r5, #24
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	d501      	bpl.n	8002932 <_printf_i+0x196>
 800292e:	6019      	str	r1, [r3, #0]
 8002930:	e002      	b.n	8002938 <_printf_i+0x19c>
 8002932:	066a      	lsls	r2, r5, #25
 8002934:	d5fb      	bpl.n	800292e <_printf_i+0x192>
 8002936:	8019      	strh	r1, [r3, #0]
 8002938:	2300      	movs	r3, #0
 800293a:	6123      	str	r3, [r4, #16]
 800293c:	4665      	mov	r5, ip
 800293e:	e7b9      	b.n	80028b4 <_printf_i+0x118>
 8002940:	6813      	ldr	r3, [r2, #0]
 8002942:	1d19      	adds	r1, r3, #4
 8002944:	6011      	str	r1, [r2, #0]
 8002946:	681d      	ldr	r5, [r3, #0]
 8002948:	6862      	ldr	r2, [r4, #4]
 800294a:	2100      	movs	r1, #0
 800294c:	4628      	mov	r0, r5
 800294e:	f7fd fc77 	bl	8000240 <memchr>
 8002952:	b108      	cbz	r0, 8002958 <_printf_i+0x1bc>
 8002954:	1b40      	subs	r0, r0, r5
 8002956:	6060      	str	r0, [r4, #4]
 8002958:	6863      	ldr	r3, [r4, #4]
 800295a:	6123      	str	r3, [r4, #16]
 800295c:	2300      	movs	r3, #0
 800295e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002962:	e7a7      	b.n	80028b4 <_printf_i+0x118>
 8002964:	6923      	ldr	r3, [r4, #16]
 8002966:	462a      	mov	r2, r5
 8002968:	4639      	mov	r1, r7
 800296a:	4630      	mov	r0, r6
 800296c:	47c0      	blx	r8
 800296e:	3001      	adds	r0, #1
 8002970:	d0aa      	beq.n	80028c8 <_printf_i+0x12c>
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	079b      	lsls	r3, r3, #30
 8002976:	d413      	bmi.n	80029a0 <_printf_i+0x204>
 8002978:	68e0      	ldr	r0, [r4, #12]
 800297a:	9b03      	ldr	r3, [sp, #12]
 800297c:	4298      	cmp	r0, r3
 800297e:	bfb8      	it	lt
 8002980:	4618      	movlt	r0, r3
 8002982:	e7a3      	b.n	80028cc <_printf_i+0x130>
 8002984:	2301      	movs	r3, #1
 8002986:	464a      	mov	r2, r9
 8002988:	4639      	mov	r1, r7
 800298a:	4630      	mov	r0, r6
 800298c:	47c0      	blx	r8
 800298e:	3001      	adds	r0, #1
 8002990:	d09a      	beq.n	80028c8 <_printf_i+0x12c>
 8002992:	3501      	adds	r5, #1
 8002994:	68e3      	ldr	r3, [r4, #12]
 8002996:	9a03      	ldr	r2, [sp, #12]
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	42ab      	cmp	r3, r5
 800299c:	dcf2      	bgt.n	8002984 <_printf_i+0x1e8>
 800299e:	e7eb      	b.n	8002978 <_printf_i+0x1dc>
 80029a0:	2500      	movs	r5, #0
 80029a2:	f104 0919 	add.w	r9, r4, #25
 80029a6:	e7f5      	b.n	8002994 <_printf_i+0x1f8>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1ac      	bne.n	8002906 <_printf_i+0x16a>
 80029ac:	7803      	ldrb	r3, [r0, #0]
 80029ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029b6:	e76c      	b.n	8002892 <_printf_i+0xf6>
 80029b8:	08002e45 	.word	0x08002e45
 80029bc:	08002e56 	.word	0x08002e56

080029c0 <_read_r>:
 80029c0:	b538      	push	{r3, r4, r5, lr}
 80029c2:	4c07      	ldr	r4, [pc, #28]	; (80029e0 <_read_r+0x20>)
 80029c4:	4605      	mov	r5, r0
 80029c6:	4608      	mov	r0, r1
 80029c8:	4611      	mov	r1, r2
 80029ca:	2200      	movs	r2, #0
 80029cc:	6022      	str	r2, [r4, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	f7fd ff5e 	bl	8000890 <_read>
 80029d4:	1c43      	adds	r3, r0, #1
 80029d6:	d102      	bne.n	80029de <_read_r+0x1e>
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	b103      	cbz	r3, 80029de <_read_r+0x1e>
 80029dc:	602b      	str	r3, [r5, #0]
 80029de:	bd38      	pop	{r3, r4, r5, pc}
 80029e0:	2000019c 	.word	0x2000019c

080029e4 <__srget_r>:
 80029e4:	b538      	push	{r3, r4, r5, lr}
 80029e6:	460c      	mov	r4, r1
 80029e8:	4605      	mov	r5, r0
 80029ea:	b118      	cbz	r0, 80029f4 <__srget_r+0x10>
 80029ec:	6983      	ldr	r3, [r0, #24]
 80029ee:	b90b      	cbnz	r3, 80029f4 <__srget_r+0x10>
 80029f0:	f7ff f9a0 	bl	8001d34 <__sinit>
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <__srget_r+0x4c>)
 80029f6:	429c      	cmp	r4, r3
 80029f8:	d10d      	bne.n	8002a16 <__srget_r+0x32>
 80029fa:	686c      	ldr	r4, [r5, #4]
 80029fc:	4621      	mov	r1, r4
 80029fe:	4628      	mov	r0, r5
 8002a00:	f000 f848 	bl	8002a94 <__srefill_r>
 8002a04:	b988      	cbnz	r0, 8002a2a <__srget_r+0x46>
 8002a06:	6863      	ldr	r3, [r4, #4]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	6063      	str	r3, [r4, #4]
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	6022      	str	r2, [r4, #0]
 8002a12:	7818      	ldrb	r0, [r3, #0]
 8002a14:	bd38      	pop	{r3, r4, r5, pc}
 8002a16:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <__srget_r+0x50>)
 8002a18:	429c      	cmp	r4, r3
 8002a1a:	d101      	bne.n	8002a20 <__srget_r+0x3c>
 8002a1c:	68ac      	ldr	r4, [r5, #8]
 8002a1e:	e7ed      	b.n	80029fc <__srget_r+0x18>
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <__srget_r+0x54>)
 8002a22:	429c      	cmp	r4, r3
 8002a24:	bf08      	it	eq
 8002a26:	68ec      	ldreq	r4, [r5, #12]
 8002a28:	e7e8      	b.n	80029fc <__srget_r+0x18>
 8002a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2e:	e7f1      	b.n	8002a14 <__srget_r+0x30>
 8002a30:	08002df0 	.word	0x08002df0
 8002a34:	08002e10 	.word	0x08002e10
 8002a38:	08002dd0 	.word	0x08002dd0

08002a3c <_fstat_r>:
 8002a3c:	b538      	push	{r3, r4, r5, lr}
 8002a3e:	4c07      	ldr	r4, [pc, #28]	; (8002a5c <_fstat_r+0x20>)
 8002a40:	2300      	movs	r3, #0
 8002a42:	4605      	mov	r5, r0
 8002a44:	4608      	mov	r0, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	6023      	str	r3, [r4, #0]
 8002a4a:	f000 f8b7 	bl	8002bbc <_fstat>
 8002a4e:	1c43      	adds	r3, r0, #1
 8002a50:	d102      	bne.n	8002a58 <_fstat_r+0x1c>
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	b103      	cbz	r3, 8002a58 <_fstat_r+0x1c>
 8002a56:	602b      	str	r3, [r5, #0]
 8002a58:	bd38      	pop	{r3, r4, r5, pc}
 8002a5a:	bf00      	nop
 8002a5c:	2000019c 	.word	0x2000019c

08002a60 <_isatty_r>:
 8002a60:	b538      	push	{r3, r4, r5, lr}
 8002a62:	4c06      	ldr	r4, [pc, #24]	; (8002a7c <_isatty_r+0x1c>)
 8002a64:	2300      	movs	r3, #0
 8002a66:	4605      	mov	r5, r0
 8002a68:	4608      	mov	r0, r1
 8002a6a:	6023      	str	r3, [r4, #0]
 8002a6c:	f000 f8ae 	bl	8002bcc <_isatty>
 8002a70:	1c43      	adds	r3, r0, #1
 8002a72:	d102      	bne.n	8002a7a <_isatty_r+0x1a>
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	b103      	cbz	r3, 8002a7a <_isatty_r+0x1a>
 8002a78:	602b      	str	r3, [r5, #0]
 8002a7a:	bd38      	pop	{r3, r4, r5, pc}
 8002a7c:	2000019c 	.word	0x2000019c

08002a80 <lflush>:
 8002a80:	8983      	ldrh	r3, [r0, #12]
 8002a82:	f003 0309 	and.w	r3, r3, #9
 8002a86:	2b09      	cmp	r3, #9
 8002a88:	d101      	bne.n	8002a8e <lflush+0xe>
 8002a8a:	f7ff b901 	b.w	8001c90 <fflush>
 8002a8e:	2000      	movs	r0, #0
 8002a90:	4770      	bx	lr
	...

08002a94 <__srefill_r>:
 8002a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a96:	460c      	mov	r4, r1
 8002a98:	4605      	mov	r5, r0
 8002a9a:	b118      	cbz	r0, 8002aa4 <__srefill_r+0x10>
 8002a9c:	6983      	ldr	r3, [r0, #24]
 8002a9e:	b90b      	cbnz	r3, 8002aa4 <__srefill_r+0x10>
 8002aa0:	f7ff f948 	bl	8001d34 <__sinit>
 8002aa4:	4b3c      	ldr	r3, [pc, #240]	; (8002b98 <__srefill_r+0x104>)
 8002aa6:	429c      	cmp	r4, r3
 8002aa8:	d10a      	bne.n	8002ac0 <__srefill_r+0x2c>
 8002aaa:	686c      	ldr	r4, [r5, #4]
 8002aac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	6063      	str	r3, [r4, #4]
 8002ab4:	b293      	uxth	r3, r2
 8002ab6:	069e      	lsls	r6, r3, #26
 8002ab8:	d50c      	bpl.n	8002ad4 <__srefill_r+0x40>
 8002aba:	f04f 30ff 	mov.w	r0, #4294967295
 8002abe:	e067      	b.n	8002b90 <__srefill_r+0xfc>
 8002ac0:	4b36      	ldr	r3, [pc, #216]	; (8002b9c <__srefill_r+0x108>)
 8002ac2:	429c      	cmp	r4, r3
 8002ac4:	d101      	bne.n	8002aca <__srefill_r+0x36>
 8002ac6:	68ac      	ldr	r4, [r5, #8]
 8002ac8:	e7f0      	b.n	8002aac <__srefill_r+0x18>
 8002aca:	4b35      	ldr	r3, [pc, #212]	; (8002ba0 <__srefill_r+0x10c>)
 8002acc:	429c      	cmp	r4, r3
 8002ace:	bf08      	it	eq
 8002ad0:	68ec      	ldreq	r4, [r5, #12]
 8002ad2:	e7eb      	b.n	8002aac <__srefill_r+0x18>
 8002ad4:	0758      	lsls	r0, r3, #29
 8002ad6:	d449      	bmi.n	8002b6c <__srefill_r+0xd8>
 8002ad8:	06d9      	lsls	r1, r3, #27
 8002ada:	d405      	bmi.n	8002ae8 <__srefill_r+0x54>
 8002adc:	2309      	movs	r3, #9
 8002ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ae2:	602b      	str	r3, [r5, #0]
 8002ae4:	81a2      	strh	r2, [r4, #12]
 8002ae6:	e7e8      	b.n	8002aba <__srefill_r+0x26>
 8002ae8:	071a      	lsls	r2, r3, #28
 8002aea:	d50b      	bpl.n	8002b04 <__srefill_r+0x70>
 8002aec:	4621      	mov	r1, r4
 8002aee:	4628      	mov	r0, r5
 8002af0:	f7ff f8a4 	bl	8001c3c <_fflush_r>
 8002af4:	2800      	cmp	r0, #0
 8002af6:	d1e0      	bne.n	8002aba <__srefill_r+0x26>
 8002af8:	89a3      	ldrh	r3, [r4, #12]
 8002afa:	60a0      	str	r0, [r4, #8]
 8002afc:	f023 0308 	bic.w	r3, r3, #8
 8002b00:	81a3      	strh	r3, [r4, #12]
 8002b02:	61a0      	str	r0, [r4, #24]
 8002b04:	89a3      	ldrh	r3, [r4, #12]
 8002b06:	f043 0304 	orr.w	r3, r3, #4
 8002b0a:	81a3      	strh	r3, [r4, #12]
 8002b0c:	6923      	ldr	r3, [r4, #16]
 8002b0e:	b91b      	cbnz	r3, 8002b18 <__srefill_r+0x84>
 8002b10:	4621      	mov	r1, r4
 8002b12:	4628      	mov	r0, r5
 8002b14:	f7ff fc4a 	bl	80023ac <__smakebuf_r>
 8002b18:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8002b1c:	b2be      	uxth	r6, r7
 8002b1e:	07b3      	lsls	r3, r6, #30
 8002b20:	d00f      	beq.n	8002b42 <__srefill_r+0xae>
 8002b22:	2301      	movs	r3, #1
 8002b24:	81a3      	strh	r3, [r4, #12]
 8002b26:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <__srefill_r+0x110>)
 8002b28:	491f      	ldr	r1, [pc, #124]	; (8002ba8 <__srefill_r+0x114>)
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	f006 0609 	and.w	r6, r6, #9
 8002b30:	f7ff f96c 	bl	8001e0c <_fwalk>
 8002b34:	2e09      	cmp	r6, #9
 8002b36:	81a7      	strh	r7, [r4, #12]
 8002b38:	d103      	bne.n	8002b42 <__srefill_r+0xae>
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	f7fe fff7 	bl	8001b30 <__sflush_r>
 8002b42:	6922      	ldr	r2, [r4, #16]
 8002b44:	6022      	str	r2, [r4, #0]
 8002b46:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002b48:	6963      	ldr	r3, [r4, #20]
 8002b4a:	6a21      	ldr	r1, [r4, #32]
 8002b4c:	4628      	mov	r0, r5
 8002b4e:	47b0      	blx	r6
 8002b50:	2800      	cmp	r0, #0
 8002b52:	6060      	str	r0, [r4, #4]
 8002b54:	dc1d      	bgt.n	8002b92 <__srefill_r+0xfe>
 8002b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b5a:	bf17      	itett	ne
 8002b5c:	2200      	movne	r2, #0
 8002b5e:	f043 0320 	orreq.w	r3, r3, #32
 8002b62:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8002b66:	6062      	strne	r2, [r4, #4]
 8002b68:	81a3      	strh	r3, [r4, #12]
 8002b6a:	e7a6      	b.n	8002aba <__srefill_r+0x26>
 8002b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b6e:	2900      	cmp	r1, #0
 8002b70:	d0cc      	beq.n	8002b0c <__srefill_r+0x78>
 8002b72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b76:	4299      	cmp	r1, r3
 8002b78:	d002      	beq.n	8002b80 <__srefill_r+0xec>
 8002b7a:	4628      	mov	r0, r5
 8002b7c:	f7ff f9be 	bl	8001efc <_free_r>
 8002b80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b82:	6063      	str	r3, [r4, #4]
 8002b84:	2000      	movs	r0, #0
 8002b86:	6360      	str	r0, [r4, #52]	; 0x34
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0bf      	beq.n	8002b0c <__srefill_r+0x78>
 8002b8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b8e:	6023      	str	r3, [r4, #0]
 8002b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b92:	2000      	movs	r0, #0
 8002b94:	e7fc      	b.n	8002b90 <__srefill_r+0xfc>
 8002b96:	bf00      	nop
 8002b98:	08002df0 	.word	0x08002df0
 8002b9c:	08002e10 	.word	0x08002e10
 8002ba0:	08002dd0 	.word	0x08002dd0
 8002ba4:	08002e30 	.word	0x08002e30
 8002ba8:	08002a81 	.word	0x08002a81

08002bac <_close>:
 8002bac:	4b02      	ldr	r3, [pc, #8]	; (8002bb8 <_close+0xc>)
 8002bae:	2258      	movs	r2, #88	; 0x58
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb6:	4770      	bx	lr
 8002bb8:	2000019c 	.word	0x2000019c

08002bbc <_fstat>:
 8002bbc:	4b02      	ldr	r3, [pc, #8]	; (8002bc8 <_fstat+0xc>)
 8002bbe:	2258      	movs	r2, #88	; 0x58
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc6:	4770      	bx	lr
 8002bc8:	2000019c 	.word	0x2000019c

08002bcc <_isatty>:
 8002bcc:	4b02      	ldr	r3, [pc, #8]	; (8002bd8 <_isatty+0xc>)
 8002bce:	2258      	movs	r2, #88	; 0x58
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	2000019c 	.word	0x2000019c

08002bdc <_lseek>:
 8002bdc:	4b02      	ldr	r3, [pc, #8]	; (8002be8 <_lseek+0xc>)
 8002bde:	2258      	movs	r2, #88	; 0x58
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	f04f 30ff 	mov.w	r0, #4294967295
 8002be6:	4770      	bx	lr
 8002be8:	2000019c 	.word	0x2000019c

08002bec <_sbrk>:
 8002bec:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <_sbrk+0x14>)
 8002bee:	6819      	ldr	r1, [r3, #0]
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	b909      	cbnz	r1, 8002bf8 <_sbrk+0xc>
 8002bf4:	4903      	ldr	r1, [pc, #12]	; (8002c04 <_sbrk+0x18>)
 8002bf6:	6019      	str	r1, [r3, #0]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	4402      	add	r2, r0
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	4770      	bx	lr
 8002c00:	20000094 	.word	0x20000094
 8002c04:	200001a0 	.word	0x200001a0

08002c08 <_init>:
 8002c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0a:	bf00      	nop
 8002c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0e:	bc08      	pop	{r3}
 8002c10:	469e      	mov	lr, r3
 8002c12:	4770      	bx	lr

08002c14 <_fini>:
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	bf00      	nop
 8002c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1a:	bc08      	pop	{r3}
 8002c1c:	469e      	mov	lr, r3
 8002c1e:	4770      	bx	lr
